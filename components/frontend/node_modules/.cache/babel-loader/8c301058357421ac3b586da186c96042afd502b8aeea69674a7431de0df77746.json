{"ast":null,"code":"(function () {\n  var root = this;\n\n  //消息填充位，补足长度。\n  function fillString(str) {\n    var blockAmount = (str.length + 8 >> 6) + 1,\n      blocks = [],\n      i;\n    for (i = 0; i < blockAmount * 16; i++) {\n      blocks[i] = 0;\n    }\n    for (i = 0; i < str.length; i++) {\n      blocks[i >> 2] |= str.charCodeAt(i) << 24 - (i & 3) * 8;\n    }\n    blocks[i >> 2] |= 0x80 << 24 - (i & 3) * 8;\n    blocks[blockAmount * 16 - 1] = str.length * 8;\n    return blocks;\n  }\n\n  //将输入的二进制数组转化为十六进制的字符串。\n  function binToHex(binArray) {\n    var hexString = \"0123456789abcdef\",\n      str = \"\",\n      i;\n    for (i = 0; i < binArray.length * 4; i++) {\n      str += hexString.charAt(binArray[i >> 2] >> (3 - i % 4) * 8 + 4 & 0xF) + hexString.charAt(binArray[i >> 2] >> (3 - i % 4) * 8 & 0xF);\n    }\n    return str;\n  }\n\n  //核心函数，输出为长度为5的number数组，对应160位的消息摘要。\n  function coreFunction(blockArray) {\n    var w = [],\n      a = 0x67452301,\n      b = 0xEFCDAB89,\n      c = 0x98BADCFE,\n      d = 0x10325476,\n      e = 0xC3D2E1F0,\n      olda,\n      oldb,\n      oldc,\n      oldd,\n      olde,\n      t,\n      i,\n      j;\n    for (i = 0; i < blockArray.length; i += 16) {\n      //每次处理512位 16*32\n      olda = a;\n      oldb = b;\n      oldc = c;\n      oldd = d;\n      olde = e;\n      for (j = 0; j < 80; j++) {\n        //对每个512位进行80步操作\n        if (j < 16) {\n          w[j] = blockArray[i + j];\n        } else {\n          w[j] = cyclicShift(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n        }\n        t = modPlus(modPlus(cyclicShift(a, 5), ft(j, b, c, d)), modPlus(modPlus(e, w[j]), kt(j)));\n        e = d;\n        d = c;\n        c = cyclicShift(b, 30);\n        b = a;\n        a = t;\n      }\n      a = modPlus(a, olda);\n      b = modPlus(b, oldb);\n      c = modPlus(c, oldc);\n      d = modPlus(d, oldd);\n      e = modPlus(e, olde);\n    }\n    return [a, b, c, d, e];\n  }\n\n  //根据t值返回相应得压缩函数中用到的f函数。\n  function ft(t, b, c, d) {\n    if (t < 20) {\n      return b & c | ~b & d;\n    } else if (t < 40) {\n      return b ^ c ^ d;\n    } else if (t < 60) {\n      return b & c | b & d | c & d;\n    } else {\n      return b ^ c ^ d;\n    }\n  }\n\n  //根据t值返回相应得压缩函数中用到的K值。\n  function kt(t) {\n    return t < 20 ? 0x5A827999 : t < 40 ? 0x6ED9EBA1 : t < 60 ? 0x8F1BBCDC : 0xCA62C1D6;\n  }\n\n  //模2的32次方加法，因为JavaScript的number是双精度浮点数表示，所以将32位数拆成高16位和低16位分别进行相加\n  function modPlus(x, y) {\n    var low = (x & 0xFFFF) + (y & 0xFFFF),\n      high = (x >> 16) + (y >> 16) + (low >> 16);\n    return high << 16 | low & 0xFFFF;\n  }\n\n  //对输入的32位的num二进制数进行循环左移 ,因为JavaScript的number是双精度浮点数表示，所以移位需需要注意\n  function cyclicShift(num, k) {\n    return num << k | num >>> 32 - k;\n  }\n\n  //主函数根据输入的消息字符串计算消息摘要，返回十六进制表示的消息摘要\n  function sha1(s) {\n    return binToHex(coreFunction(fillString(s)));\n  }\n\n  // support AMD and Node\n  if (typeof define === \"function\" && typeof define.amd) {\n    define(function () {\n      return sha1;\n    });\n  } else if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = sha1;\n    }\n    exports.sha1 = sha1;\n  } else {\n    root.sha1 = sha1;\n  }\n}).call(this);","map":{"version":3,"names":["root","fillString","str","blockAmount","length","blocks","i","charCodeAt","binToHex","binArray","hexString","charAt","coreFunction","blockArray","w","a","b","c","d","e","olda","oldb","oldc","oldd","olde","t","j","cyclicShift","modPlus","ft","kt","x","y","low","high","num","k","sha1","s","define","amd","exports","module","call"],"sources":["/Users/anandarunima/Documents/Arunima/Coursework/sauce_labs-fizzbuzzbash/fizzbuzzbass/components/node_modules/sha-1/sha1.js"],"sourcesContent":["(function(){\n    var root = this;\n\n    //消息填充位，补足长度。\n    function fillString(str){\n        var blockAmount = ((str.length + 8) >> 6) + 1,\n            blocks = [],\n            i;\n\n        for(i = 0; i < blockAmount * 16; i++){\n            blocks[i] = 0;\n        }\n        for(i = 0; i < str.length; i++){\n            blocks[i >> 2] |= str.charCodeAt(i) << (24 - (i & 3) * 8);\n        }\n        blocks[i >> 2] |= 0x80 << (24 - (i & 3) * 8);\n        blocks[blockAmount * 16 - 1] = str.length * 8;\n\n        return blocks;\n    }\n\n    //将输入的二进制数组转化为十六进制的字符串。\n    function binToHex(binArray){\n        var hexString = \"0123456789abcdef\",\n            str = \"\",\n            i;\n\n        for(i = 0; i < binArray.length * 4; i++){\n            str += hexString.charAt((binArray[i >> 2] >> ((3 - i % 4) * 8 + 4)) & 0xF) +\n                    hexString.charAt((binArray[i >> 2] >> ((3 - i % 4) * 8  )) & 0xF);\n        }\n\n        return str;\n    }\n\n    //核心函数，输出为长度为5的number数组，对应160位的消息摘要。\n    function coreFunction(blockArray){\n        var w = [],\n            a = 0x67452301,\n            b = 0xEFCDAB89,\n            c = 0x98BADCFE,\n            d = 0x10325476,\n            e = 0xC3D2E1F0,\n            olda,\n            oldb,\n            oldc,\n            oldd,\n            olde,\n            t,\n            i,\n            j;\n\n        for(i = 0; i < blockArray.length; i += 16){  //每次处理512位 16*32\n            olda = a;\n            oldb = b;\n            oldc = c;\n            oldd = d;\n            olde = e;\n\n            for(j = 0; j < 80; j++){  //对每个512位进行80步操作\n                if(j < 16){\n                    w[j] = blockArray[i + j];\n                }else{\n                    w[j] = cyclicShift(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);\n                }\n                t = modPlus(modPlus(cyclicShift(a, 5), ft(j, b, c, d)), modPlus(modPlus(e, w[j]), kt(j)));\n                e = d;\n                d = c;\n                c = cyclicShift(b, 30);\n                b = a;\n                a = t;\n            }\n\n            a = modPlus(a, olda);\n            b = modPlus(b, oldb);\n            c = modPlus(c, oldc);\n            d = modPlus(d, oldd);\n            e = modPlus(e, olde);\n        }\n\n        return [a, b, c, d, e];\n    }\n\n    //根据t值返回相应得压缩函数中用到的f函数。\n    function ft(t, b, c, d){\n        if(t < 20){\n            return (b & c) | ((~b) & d);\n        }else if(t < 40){\n            return b ^ c ^ d;\n        }else if(t < 60){\n            return (b & c) | (b & d) | (c & d);\n        }else{\n            return b ^ c ^ d;\n        }\n    }\n\n    //根据t值返回相应得压缩函数中用到的K值。\n    function kt(t){\n        return (t < 20) ?  0x5A827999 :\n                (t < 40) ? 0x6ED9EBA1 :\n                (t < 60) ? 0x8F1BBCDC : 0xCA62C1D6;\n    }\n\n    //模2的32次方加法，因为JavaScript的number是双精度浮点数表示，所以将32位数拆成高16位和低16位分别进行相加\n    function modPlus(x, y){\n        var low = (x & 0xFFFF) + (y & 0xFFFF),\n            high = (x >> 16) + (y >> 16) + (low >> 16);\n\n        return (high << 16) | (low & 0xFFFF);\n    }\n\n    //对输入的32位的num二进制数进行循环左移 ,因为JavaScript的number是双精度浮点数表示，所以移位需需要注意\n    function cyclicShift(num, k){\n        return (num << k) | (num >>> (32 - k));\n    }\n\n    //主函数根据输入的消息字符串计算消息摘要，返回十六进制表示的消息摘要\n    function sha1(s){\n        return binToHex(coreFunction(fillString(s)));\n    }\n\n    // support AMD and Node\n    if(typeof define === \"function\" && typeof define.amd){\n        define(function(){\n            return sha1;\n        });\n    }else if(typeof exports !== 'undefined') {\n        if(typeof module !== 'undefined' && module.exports) {\n          exports = module.exports = sha1;\n        }\n        exports.sha1 = sha1;\n    } else {\n        root.sha1 = sha1;\n    }\n\n}).call(this);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}