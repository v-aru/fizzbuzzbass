{"ast":null,"code":"//\n//\n//\n\n// General-purpose API for glueing everything together.\n\n'use strict';\n\nvar URL = require('url');\nvar QS = require('querystring');\nvar Connection = require('./connection').Connection;\nvar fmt = require('util').format;\nvar credentials = require('./credentials');\nfunction copyInto(obj, target) {\n  var keys = Object.keys(obj);\n  var i = keys.length;\n  while (i--) {\n    var k = keys[i];\n    target[k] = obj[k];\n  }\n  return target;\n}\n\n// Adapted from util._extend, which is too fringe to use.\nfunction clone(obj) {\n  return copyInto(obj, {});\n}\nvar CLIENT_PROPERTIES = {\n  \"product\": \"amqplib\",\n  \"version\": require('../package.json').version,\n  \"platform\": fmt('Node.JS %s', process.version),\n  \"information\": \"http://squaremo.github.io/amqp.node\",\n  \"capabilities\": {\n    \"publisher_confirms\": true,\n    \"exchange_exchange_bindings\": true,\n    \"basic.nack\": true,\n    \"consumer_cancel_notify\": true,\n    \"connection.blocked\": true,\n    \"authentication_failure_close\": true\n  }\n};\n\n// Construct the main frames used in the opening handshake\nfunction openFrames(vhost, query, credentials, extraClientProperties) {\n  if (!vhost) vhost = '/';else vhost = QS.unescape(vhost);\n  var query = query || {};\n  function intOrDefault(val, def) {\n    return val === undefined ? def : parseInt(val);\n  }\n  var clientProperties = Object.create(CLIENT_PROPERTIES);\n  return {\n    // start-ok\n    'clientProperties': copyInto(extraClientProperties, clientProperties),\n    'mechanism': credentials.mechanism,\n    'response': credentials.response(),\n    'locale': query.locale || 'en_US',\n    // tune-ok\n    'channelMax': intOrDefault(query.channelMax, 0),\n    'frameMax': intOrDefault(query.frameMax, 0x1000),\n    'heartbeat': intOrDefault(query.heartbeat, 0),\n    // open\n    'virtualHost': vhost,\n    'capabilities': '',\n    'insist': 0\n  };\n}\n\n// Decide on credentials based on what we're supplied. Note that in a\n// parsed URL, the auth part is already URL-decoded, so e.g., '%3a' in\n// the URL is already decoded to ':'. This is a bit unhelpful, as it\n// means we can't tell whether a colon is a separator, or part of the\n// username. Assume no colons in usernames.\nfunction credentialsFromUrl(parts) {\n  var user = 'guest',\n    passwd = 'guest';\n  if (parts.auth) {\n    var colon = parts.auth.indexOf(':');\n    if (colon == -1) {\n      user = parts.auth;\n      passwd = '';\n    } else {\n      user = parts.auth.substring(0, colon);\n      passwd = parts.auth.substring(colon + 1);\n    }\n  }\n  return credentials.plain(user, passwd);\n}\nfunction connect(url, socketOptions, openCallback) {\n  // tls.connect uses `util._extend()` on the options given it, which\n  // copies only properties mentioned in `Object.keys()`, when\n  // processing the options. So I have to make copies too, rather\n  // than using `Object.create()`.\n  var sockopts = clone(socketOptions || {});\n  url = url || 'amqp://localhost';\n  var noDelay = !!sockopts.noDelay;\n  var timeout = sockopts.timeout;\n  var keepAlive = !!sockopts.keepAlive;\n  // 0 is default for node\n  var keepAliveDelay = sockopts.keepAliveDelay || 0;\n  var extraClientProperties = sockopts.clientProperties || {};\n  var protocol, fields;\n  if (typeof url === 'object') {\n    protocol = (url.protocol || 'amqp') + ':';\n    sockopts.host = url.hostname;\n    sockopts.port = url.port || (protocol === 'amqp:' ? 5672 : 5671);\n    var user, pass;\n    // Only default if both are missing, to have the same behaviour as\n    // the stringly URL.\n    if (url.username == undefined && url.password == undefined) {\n      user = 'guest';\n      pass = 'guest';\n    } else {\n      user = url.username || '';\n      pass = url.password || '';\n    }\n    var config = {\n      locale: url.locale,\n      channelMax: url.channelMax,\n      frameMax: url.frameMax,\n      heartbeat: url.heartbeat\n    };\n    fields = openFrames(url.vhost, config, sockopts.credentials || credentials.plain(user, pass), extraClientProperties);\n  } else {\n    var parts = URL.parse(url, true); // yes, parse the query string\n    protocol = parts.protocol;\n    sockopts.host = parts.hostname;\n    sockopts.port = parseInt(parts.port) || (protocol === 'amqp:' ? 5672 : 5671);\n    var vhost = parts.pathname ? parts.pathname.substr(1) : null;\n    fields = openFrames(vhost, parts.query, sockopts.credentials || credentialsFromUrl(parts), extraClientProperties);\n  }\n  var sockok = false;\n  var sock;\n  function onConnect() {\n    sockok = true;\n    sock.setNoDelay(noDelay);\n    if (keepAlive) sock.setKeepAlive(keepAlive, keepAliveDelay);\n    var c = new Connection(sock);\n    c.open(fields, function (err, ok) {\n      // disable timeout once the connection is open, we don't want\n      // it fouling things\n      if (timeout) sock.setTimeout(0);\n      if (err === null) {\n        openCallback(null, c);\n      } else openCallback(err);\n    });\n  }\n  if (protocol === 'amqp:') {\n    sock = require('net').connect(sockopts, onConnect);\n  } else if (protocol === 'amqps:') {\n    sock = require('tls').connect(sockopts, onConnect);\n  } else {\n    throw new Error(\"Expected amqp: or amqps: as the protocol; got \" + protocol);\n  }\n  if (timeout) {\n    sock.setTimeout(timeout, function () {\n      sock.end();\n      sock.destroy();\n      openCallback(new Error('connect ETIMEDOUT'));\n    });\n  }\n  sock.once('error', function (err) {\n    if (!sockok) openCallback(err);\n  });\n}\nmodule.exports.connect = connect;\nmodule.exports.credentialsFromUrl = credentialsFromUrl;","map":{"version":3,"names":["URL","require","QS","Connection","fmt","format","credentials","copyInto","obj","target","keys","Object","i","length","k","clone","CLIENT_PROPERTIES","version","process","openFrames","vhost","query","extraClientProperties","unescape","intOrDefault","val","def","undefined","parseInt","clientProperties","create","mechanism","response","locale","channelMax","frameMax","heartbeat","credentialsFromUrl","parts","user","passwd","auth","colon","indexOf","substring","plain","connect","url","socketOptions","openCallback","sockopts","noDelay","timeout","keepAlive","keepAliveDelay","protocol","fields","host","hostname","port","pass","username","password","config","parse","pathname","substr","sockok","sock","onConnect","setNoDelay","setKeepAlive","c","open","err","ok","setTimeout","Error","end","destroy","once","module","exports"],"sources":["/Users/anandarunima/Documents/Arunima/Coursework/sauce_labs-fizzbuzzbash/fizzbuzzbass/components/node_modules/amqplib/lib/connect.js"],"sourcesContent":["//\n//\n//\n\n// General-purpose API for glueing everything together.\n\n'use strict';\n\nvar URL = require('url');\nvar QS = require('querystring');\nvar Connection = require('./connection').Connection;\nvar fmt = require('util').format;\nvar credentials = require('./credentials');\n\nfunction copyInto(obj, target) {\n  var keys = Object.keys(obj);\n  var i = keys.length;\n  while (i--) {\n    var k = keys[i];\n    target[k] = obj[k];\n  }\n  return target;\n}\n\n// Adapted from util._extend, which is too fringe to use.\nfunction clone(obj) {\n  return copyInto(obj, {});\n}\n\nvar CLIENT_PROPERTIES = {\n  \"product\": \"amqplib\",\n  \"version\": require('../package.json').version,\n  \"platform\": fmt('Node.JS %s', process.version),\n  \"information\": \"http://squaremo.github.io/amqp.node\",\n  \"capabilities\": {\n    \"publisher_confirms\": true,\n    \"exchange_exchange_bindings\": true,\n    \"basic.nack\": true,\n    \"consumer_cancel_notify\": true,\n    \"connection.blocked\": true,\n    \"authentication_failure_close\": true\n  }\n};\n\n// Construct the main frames used in the opening handshake\nfunction openFrames(vhost, query, credentials, extraClientProperties) {\n  if (!vhost)\n    vhost = '/';\n  else\n    vhost = QS.unescape(vhost);\n\n  var query = query || {};\n\n  function intOrDefault(val, def) {\n    return (val === undefined) ? def : parseInt(val);\n  }\n\n  var clientProperties = Object.create(CLIENT_PROPERTIES);\n\n  return {\n    // start-ok\n    'clientProperties': copyInto(extraClientProperties, clientProperties),\n    'mechanism': credentials.mechanism,\n    'response': credentials.response(),\n    'locale': query.locale || 'en_US',\n\n    // tune-ok\n    'channelMax': intOrDefault(query.channelMax, 0),\n    'frameMax': intOrDefault(query.frameMax, 0x1000),\n    'heartbeat': intOrDefault(query.heartbeat, 0),\n\n    // open\n    'virtualHost': vhost,\n    'capabilities': '',\n    'insist': 0\n  };\n}\n\n// Decide on credentials based on what we're supplied. Note that in a\n// parsed URL, the auth part is already URL-decoded, so e.g., '%3a' in\n// the URL is already decoded to ':'. This is a bit unhelpful, as it\n// means we can't tell whether a colon is a separator, or part of the\n// username. Assume no colons in usernames.\nfunction credentialsFromUrl(parts) {\n  var user = 'guest', passwd = 'guest';\n  if (parts.auth) {\n    var colon = parts.auth.indexOf(':')\n    if (colon == -1) {\n      user = parts.auth;\n      passwd = '';\n    } else {\n      user = parts.auth.substring(0, colon);\n      passwd = parts.auth.substring(colon+1);\n    }\n  }\n  return credentials.plain(user, passwd);\n}\n\nfunction connect(url, socketOptions, openCallback) {\n  // tls.connect uses `util._extend()` on the options given it, which\n  // copies only properties mentioned in `Object.keys()`, when\n  // processing the options. So I have to make copies too, rather\n  // than using `Object.create()`.\n  var sockopts = clone(socketOptions || {});\n  url = url || 'amqp://localhost';\n\n  var noDelay = !!sockopts.noDelay;\n  var timeout = sockopts.timeout;\n  var keepAlive = !!sockopts.keepAlive;\n  // 0 is default for node\n  var keepAliveDelay = sockopts.keepAliveDelay || 0;\n\n  var extraClientProperties = sockopts.clientProperties || {};\n\n  var protocol, fields;\n  if (typeof url === 'object') {\n    protocol = (url.protocol || 'amqp') + ':';\n    sockopts.host = url.hostname;\n    sockopts.port = url.port || ((protocol === 'amqp:') ? 5672 : 5671);\n\n    var user, pass;\n    // Only default if both are missing, to have the same behaviour as\n    // the stringly URL.\n    if (url.username == undefined && url.password == undefined) {\n      user = 'guest'; pass = 'guest';\n    } else {\n      user = url.username || '';\n      pass = url.password || '';\n    }\n\n    var config = {\n      locale: url.locale,\n      channelMax: url.channelMax,\n      frameMax: url.frameMax,\n      heartbeat: url.heartbeat,\n    };\n\n    fields = openFrames(url.vhost, config, sockopts.credentials || credentials.plain(user, pass), extraClientProperties);\n  } else {\n    var parts = URL.parse(url, true); // yes, parse the query string\n    protocol = parts.protocol;\n    sockopts.host = parts.hostname;\n    sockopts.port = parseInt(parts.port) || ((protocol === 'amqp:') ? 5672 : 5671);\n    var vhost = parts.pathname ? parts.pathname.substr(1) : null;\n    fields = openFrames(vhost, parts.query, sockopts.credentials || credentialsFromUrl(parts), extraClientProperties);\n  }\n\n  var sockok = false;\n  var sock;\n\n  function onConnect() {\n    sockok = true;\n    sock.setNoDelay(noDelay);\n    if (keepAlive) sock.setKeepAlive(keepAlive, keepAliveDelay);\n\n    var c = new Connection(sock);\n    c.open(fields, function(err, ok) {\n      // disable timeout once the connection is open, we don't want\n      // it fouling things\n      if (timeout) sock.setTimeout(0);\n      if (err === null) {\n        openCallback(null, c);\n      }\n      else openCallback(err);\n    });\n  }\n\n  if (protocol === 'amqp:') {\n    sock = require('net').connect(sockopts, onConnect);\n  }\n  else if (protocol === 'amqps:') {\n    sock = require('tls').connect(sockopts, onConnect);\n  }\n  else {\n    throw new Error(\"Expected amqp: or amqps: as the protocol; got \" + protocol);\n  }\n\n  if (timeout) {\n    sock.setTimeout(timeout, function() {\n      sock.end();\n      sock.destroy();\n      openCallback(new Error('connect ETIMEDOUT'));\n    });\n  }\n\n  sock.once('error', function(err) {\n    if (!sockok) openCallback(err);\n  });\n\n}\n\nmodule.exports.connect = connect;\nmodule.exports.credentialsFromUrl = credentialsFromUrl;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA,YAAY;;AAEZ,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AACxB,IAAIC,EAAE,GAAGD,OAAO,CAAC,aAAa,CAAC;AAC/B,IAAIE,UAAU,GAAGF,OAAO,CAAC,cAAc,CAAC,CAACE,UAAU;AACnD,IAAIC,GAAG,GAAGH,OAAO,CAAC,MAAM,CAAC,CAACI,MAAM;AAChC,IAAIC,WAAW,GAAGL,OAAO,CAAC,eAAe,CAAC;AAE1C,SAASM,QAAQA,CAACC,GAAG,EAAEC,MAAM,EAAE;EAC7B,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACF,GAAG,CAAC;EAC3B,IAAII,CAAC,GAAGF,IAAI,CAACG,MAAM;EACnB,OAAOD,CAAC,EAAE,EAAE;IACV,IAAIE,CAAC,GAAGJ,IAAI,CAACE,CAAC,CAAC;IACfH,MAAM,CAACK,CAAC,CAAC,GAAGN,GAAG,CAACM,CAAC,CAAC;EACpB;EACA,OAAOL,MAAM;AACf;;AAEA;AACA,SAASM,KAAKA,CAACP,GAAG,EAAE;EAClB,OAAOD,QAAQ,CAACC,GAAG,EAAE,CAAC,CAAC,CAAC;AAC1B;AAEA,IAAIQ,iBAAiB,GAAG;EACtB,SAAS,EAAE,SAAS;EACpB,SAAS,EAAEf,OAAO,CAAC,iBAAiB,CAAC,CAACgB,OAAO;EAC7C,UAAU,EAAEb,GAAG,CAAC,YAAY,EAAEc,OAAO,CAACD,OAAO,CAAC;EAC9C,aAAa,EAAE,qCAAqC;EACpD,cAAc,EAAE;IACd,oBAAoB,EAAE,IAAI;IAC1B,4BAA4B,EAAE,IAAI;IAClC,YAAY,EAAE,IAAI;IAClB,wBAAwB,EAAE,IAAI;IAC9B,oBAAoB,EAAE,IAAI;IAC1B,8BAA8B,EAAE;EAClC;AACF,CAAC;;AAED;AACA,SAASE,UAAUA,CAACC,KAAK,EAAEC,KAAK,EAAEf,WAAW,EAAEgB,qBAAqB,EAAE;EACpE,IAAI,CAACF,KAAK,EACRA,KAAK,GAAG,GAAG,CAAC,KAEZA,KAAK,GAAGlB,EAAE,CAACqB,QAAQ,CAACH,KAAK,CAAC;EAE5B,IAAIC,KAAK,GAAGA,KAAK,IAAI,CAAC,CAAC;EAEvB,SAASG,YAAYA,CAACC,GAAG,EAAEC,GAAG,EAAE;IAC9B,OAAQD,GAAG,KAAKE,SAAS,GAAID,GAAG,GAAGE,QAAQ,CAACH,GAAG,CAAC;EAClD;EAEA,IAAII,gBAAgB,GAAGlB,MAAM,CAACmB,MAAM,CAACd,iBAAiB,CAAC;EAEvD,OAAO;IACL;IACA,kBAAkB,EAAET,QAAQ,CAACe,qBAAqB,EAAEO,gBAAgB,CAAC;IACrE,WAAW,EAAEvB,WAAW,CAACyB,SAAS;IAClC,UAAU,EAAEzB,WAAW,CAAC0B,QAAQ,CAAC,CAAC;IAClC,QAAQ,EAAEX,KAAK,CAACY,MAAM,IAAI,OAAO;IAEjC;IACA,YAAY,EAAET,YAAY,CAACH,KAAK,CAACa,UAAU,EAAE,CAAC,CAAC;IAC/C,UAAU,EAAEV,YAAY,CAACH,KAAK,CAACc,QAAQ,EAAE,MAAM,CAAC;IAChD,WAAW,EAAEX,YAAY,CAACH,KAAK,CAACe,SAAS,EAAE,CAAC,CAAC;IAE7C;IACA,aAAa,EAAEhB,KAAK;IACpB,cAAc,EAAE,EAAE;IAClB,QAAQ,EAAE;EACZ,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASiB,kBAAkBA,CAACC,KAAK,EAAE;EACjC,IAAIC,IAAI,GAAG,OAAO;IAAEC,MAAM,GAAG,OAAO;EACpC,IAAIF,KAAK,CAACG,IAAI,EAAE;IACd,IAAIC,KAAK,GAAGJ,KAAK,CAACG,IAAI,CAACE,OAAO,CAAC,GAAG,CAAC;IACnC,IAAID,KAAK,IAAI,CAAC,CAAC,EAAE;MACfH,IAAI,GAAGD,KAAK,CAACG,IAAI;MACjBD,MAAM,GAAG,EAAE;IACb,CAAC,MAAM;MACLD,IAAI,GAAGD,KAAK,CAACG,IAAI,CAACG,SAAS,CAAC,CAAC,EAAEF,KAAK,CAAC;MACrCF,MAAM,GAAGF,KAAK,CAACG,IAAI,CAACG,SAAS,CAACF,KAAK,GAAC,CAAC,CAAC;IACxC;EACF;EACA,OAAOpC,WAAW,CAACuC,KAAK,CAACN,IAAI,EAAEC,MAAM,CAAC;AACxC;AAEA,SAASM,OAAOA,CAACC,GAAG,EAAEC,aAAa,EAAEC,YAAY,EAAE;EACjD;EACA;EACA;EACA;EACA,IAAIC,QAAQ,GAAGnC,KAAK,CAACiC,aAAa,IAAI,CAAC,CAAC,CAAC;EACzCD,GAAG,GAAGA,GAAG,IAAI,kBAAkB;EAE/B,IAAII,OAAO,GAAG,CAAC,CAACD,QAAQ,CAACC,OAAO;EAChC,IAAIC,OAAO,GAAGF,QAAQ,CAACE,OAAO;EAC9B,IAAIC,SAAS,GAAG,CAAC,CAACH,QAAQ,CAACG,SAAS;EACpC;EACA,IAAIC,cAAc,GAAGJ,QAAQ,CAACI,cAAc,IAAI,CAAC;EAEjD,IAAIhC,qBAAqB,GAAG4B,QAAQ,CAACrB,gBAAgB,IAAI,CAAC,CAAC;EAE3D,IAAI0B,QAAQ,EAAEC,MAAM;EACpB,IAAI,OAAOT,GAAG,KAAK,QAAQ,EAAE;IAC3BQ,QAAQ,GAAG,CAACR,GAAG,CAACQ,QAAQ,IAAI,MAAM,IAAI,GAAG;IACzCL,QAAQ,CAACO,IAAI,GAAGV,GAAG,CAACW,QAAQ;IAC5BR,QAAQ,CAACS,IAAI,GAAGZ,GAAG,CAACY,IAAI,KAAMJ,QAAQ,KAAK,OAAO,GAAI,IAAI,GAAG,IAAI,CAAC;IAElE,IAAIhB,IAAI,EAAEqB,IAAI;IACd;IACA;IACA,IAAIb,GAAG,CAACc,QAAQ,IAAIlC,SAAS,IAAIoB,GAAG,CAACe,QAAQ,IAAInC,SAAS,EAAE;MAC1DY,IAAI,GAAG,OAAO;MAAEqB,IAAI,GAAG,OAAO;IAChC,CAAC,MAAM;MACLrB,IAAI,GAAGQ,GAAG,CAACc,QAAQ,IAAI,EAAE;MACzBD,IAAI,GAAGb,GAAG,CAACe,QAAQ,IAAI,EAAE;IAC3B;IAEA,IAAIC,MAAM,GAAG;MACX9B,MAAM,EAAEc,GAAG,CAACd,MAAM;MAClBC,UAAU,EAAEa,GAAG,CAACb,UAAU;MAC1BC,QAAQ,EAAEY,GAAG,CAACZ,QAAQ;MACtBC,SAAS,EAAEW,GAAG,CAACX;IACjB,CAAC;IAEDoB,MAAM,GAAGrC,UAAU,CAAC4B,GAAG,CAAC3B,KAAK,EAAE2C,MAAM,EAAEb,QAAQ,CAAC5C,WAAW,IAAIA,WAAW,CAACuC,KAAK,CAACN,IAAI,EAAEqB,IAAI,CAAC,EAAEtC,qBAAqB,CAAC;EACtH,CAAC,MAAM;IACL,IAAIgB,KAAK,GAAGtC,GAAG,CAACgE,KAAK,CAACjB,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;IAClCQ,QAAQ,GAAGjB,KAAK,CAACiB,QAAQ;IACzBL,QAAQ,CAACO,IAAI,GAAGnB,KAAK,CAACoB,QAAQ;IAC9BR,QAAQ,CAACS,IAAI,GAAG/B,QAAQ,CAACU,KAAK,CAACqB,IAAI,CAAC,KAAMJ,QAAQ,KAAK,OAAO,GAAI,IAAI,GAAG,IAAI,CAAC;IAC9E,IAAInC,KAAK,GAAGkB,KAAK,CAAC2B,QAAQ,GAAG3B,KAAK,CAAC2B,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI;IAC5DV,MAAM,GAAGrC,UAAU,CAACC,KAAK,EAAEkB,KAAK,CAACjB,KAAK,EAAE6B,QAAQ,CAAC5C,WAAW,IAAI+B,kBAAkB,CAACC,KAAK,CAAC,EAAEhB,qBAAqB,CAAC;EACnH;EAEA,IAAI6C,MAAM,GAAG,KAAK;EAClB,IAAIC,IAAI;EAER,SAASC,SAASA,CAAA,EAAG;IACnBF,MAAM,GAAG,IAAI;IACbC,IAAI,CAACE,UAAU,CAACnB,OAAO,CAAC;IACxB,IAAIE,SAAS,EAAEe,IAAI,CAACG,YAAY,CAAClB,SAAS,EAAEC,cAAc,CAAC;IAE3D,IAAIkB,CAAC,GAAG,IAAIrE,UAAU,CAACiE,IAAI,CAAC;IAC5BI,CAAC,CAACC,IAAI,CAACjB,MAAM,EAAE,UAASkB,GAAG,EAAEC,EAAE,EAAE;MAC/B;MACA;MACA,IAAIvB,OAAO,EAAEgB,IAAI,CAACQ,UAAU,CAAC,CAAC,CAAC;MAC/B,IAAIF,GAAG,KAAK,IAAI,EAAE;QAChBzB,YAAY,CAAC,IAAI,EAAEuB,CAAC,CAAC;MACvB,CAAC,MACIvB,YAAY,CAACyB,GAAG,CAAC;IACxB,CAAC,CAAC;EACJ;EAEA,IAAInB,QAAQ,KAAK,OAAO,EAAE;IACxBa,IAAI,GAAGnE,OAAO,CAAC,KAAK,CAAC,CAAC6C,OAAO,CAACI,QAAQ,EAAEmB,SAAS,CAAC;EACpD,CAAC,MACI,IAAId,QAAQ,KAAK,QAAQ,EAAE;IAC9Ba,IAAI,GAAGnE,OAAO,CAAC,KAAK,CAAC,CAAC6C,OAAO,CAACI,QAAQ,EAAEmB,SAAS,CAAC;EACpD,CAAC,MACI;IACH,MAAM,IAAIQ,KAAK,CAAC,gDAAgD,GAAGtB,QAAQ,CAAC;EAC9E;EAEA,IAAIH,OAAO,EAAE;IACXgB,IAAI,CAACQ,UAAU,CAACxB,OAAO,EAAE,YAAW;MAClCgB,IAAI,CAACU,GAAG,CAAC,CAAC;MACVV,IAAI,CAACW,OAAO,CAAC,CAAC;MACd9B,YAAY,CAAC,IAAI4B,KAAK,CAAC,mBAAmB,CAAC,CAAC;IAC9C,CAAC,CAAC;EACJ;EAEAT,IAAI,CAACY,IAAI,CAAC,OAAO,EAAE,UAASN,GAAG,EAAE;IAC/B,IAAI,CAACP,MAAM,EAAElB,YAAY,CAACyB,GAAG,CAAC;EAChC,CAAC,CAAC;AAEJ;AAEAO,MAAM,CAACC,OAAO,CAACpC,OAAO,GAAGA,OAAO;AAChCmC,MAAM,CAACC,OAAO,CAAC7C,kBAAkB,GAAGA,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}