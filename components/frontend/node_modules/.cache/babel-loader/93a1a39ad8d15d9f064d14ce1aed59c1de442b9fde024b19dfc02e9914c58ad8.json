{"ast":null,"code":"/*\n * RSA Encryption / Decryption with PKCS1 v2 Padding.\n * \n * Copyright (c) 2003-2005  Tom Wu\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND, \n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY \n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  \n *\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * In addition, the following condition applies:\n *\n * All redistributions must retain an intact copy of this copyright notice\n * and disclaimer.\n */\n\n/*\n * Node.js adaptation\n * long message support implementation\n * signing/verifying\n *\n * 2014 rzcoder\n */\n\nvar _ = require('../utils')._;\nvar crypt = require('crypto');\nvar BigInteger = require('./jsbn.js');\nvar utils = require('../utils.js');\nvar schemes = require('../schemes/schemes.js');\nvar encryptEngines = require('../encryptEngines/encryptEngines.js');\nexports.BigInteger = BigInteger;\nmodule.exports.Key = function () {\n  /**\n   * RSA key constructor\n   *\n   * n - modulus\n   * e - publicExponent\n   * d - privateExponent\n   * p - prime1\n   * q - prime2\n   * dmp1 - exponent1 -- d mod (p1)\n   * dmq1 - exponent2 -- d mod (q-1)\n   * coeff - coefficient -- (inverse of q) mod p\n   */\n  function RSAKey() {\n    this.n = null;\n    this.e = 0;\n    this.d = null;\n    this.p = null;\n    this.q = null;\n    this.dmp1 = null;\n    this.dmq1 = null;\n    this.coeff = null;\n  }\n  RSAKey.prototype.setOptions = function (options) {\n    var signingSchemeProvider = schemes[options.signingScheme];\n    var encryptionSchemeProvider = schemes[options.encryptionScheme];\n    if (signingSchemeProvider === encryptionSchemeProvider) {\n      this.signingScheme = this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);\n    } else {\n      this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);\n      this.signingScheme = signingSchemeProvider.makeScheme(this, options);\n    }\n    this.encryptEngine = encryptEngines.getEngine(this, options);\n  };\n\n  /**\n   * Generate a new random private key B bits long, using public expt E\n   * @param B\n   * @param E\n   */\n  RSAKey.prototype.generate = function (B, E) {\n    var qs = B >> 1;\n    this.e = parseInt(E, 16);\n    var ee = new BigInteger(E, 16);\n    while (true) {\n      while (true) {\n        this.p = new BigInteger(B - qs, 1);\n        if (this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) === 0 && this.p.isProbablePrime(10)) break;\n      }\n      while (true) {\n        this.q = new BigInteger(qs, 1);\n        if (this.q.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) === 0 && this.q.isProbablePrime(10)) break;\n      }\n      if (this.p.compareTo(this.q) <= 0) {\n        var t = this.p;\n        this.p = this.q;\n        this.q = t;\n      }\n      var p1 = this.p.subtract(BigInteger.ONE);\n      var q1 = this.q.subtract(BigInteger.ONE);\n      var phi = p1.multiply(q1);\n      if (phi.gcd(ee).compareTo(BigInteger.ONE) === 0) {\n        this.n = this.p.multiply(this.q);\n        if (this.n.bitLength() < B) {\n          continue;\n        }\n        this.d = ee.modInverse(phi);\n        this.dmp1 = this.d.mod(p1);\n        this.dmq1 = this.d.mod(q1);\n        this.coeff = this.q.modInverse(this.p);\n        break;\n      }\n    }\n    this.$$recalculateCache();\n  };\n\n  /**\n   * Set the private key fields N, e, d and CRT params from buffers\n   *\n   * @param N\n   * @param E\n   * @param D\n   * @param P\n   * @param Q\n   * @param DP\n   * @param DQ\n   * @param C\n   */\n  RSAKey.prototype.setPrivate = function (N, E, D, P, Q, DP, DQ, C) {\n    if (N && E && D && N.length > 0 && (_.isNumber(E) || E.length > 0) && D.length > 0) {\n      this.n = new BigInteger(N);\n      this.e = _.isNumber(E) ? E : utils.get32IntFromBuffer(E, 0);\n      this.d = new BigInteger(D);\n      if (P && Q && DP && DQ && C) {\n        this.p = new BigInteger(P);\n        this.q = new BigInteger(Q);\n        this.dmp1 = new BigInteger(DP);\n        this.dmq1 = new BigInteger(DQ);\n        this.coeff = new BigInteger(C);\n      } else {\n        // TODO: re-calculate any missing CRT params\n      }\n      this.$$recalculateCache();\n    } else {\n      throw Error(\"Invalid RSA private key\");\n    }\n  };\n\n  /**\n   * Set the public key fields N and e from hex strings\n   * @param N\n   * @param E\n   */\n  RSAKey.prototype.setPublic = function (N, E) {\n    if (N && E && N.length > 0 && (_.isNumber(E) || E.length > 0)) {\n      this.n = new BigInteger(N);\n      this.e = _.isNumber(E) ? E : utils.get32IntFromBuffer(E, 0);\n      this.$$recalculateCache();\n    } else {\n      throw Error(\"Invalid RSA public key\");\n    }\n  };\n\n  /**\n   * private\n   * Perform raw private operation on \"x\": return x^d (mod n)\n   *\n   * @param x\n   * @returns {*}\n   */\n  RSAKey.prototype.$doPrivate = function (x) {\n    if (this.p || this.q) {\n      return x.modPow(this.d, this.n);\n    }\n\n    // TODO: re-calculate any missing CRT params\n    var xp = x.mod(this.p).modPow(this.dmp1, this.p);\n    var xq = x.mod(this.q).modPow(this.dmq1, this.q);\n    while (xp.compareTo(xq) < 0) {\n      xp = xp.add(this.p);\n    }\n    return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);\n  };\n\n  /**\n   * private\n   * Perform raw public operation on \"x\": return x^e (mod n)\n   *\n   * @param x\n   * @returns {*}\n   */\n  RSAKey.prototype.$doPublic = function (x) {\n    return x.modPowInt(this.e, this.n);\n  };\n\n  /**\n   * Return the PKCS#1 RSA encryption of buffer\n   * @param buffer {Buffer}\n   * @returns {Buffer}\n   */\n  RSAKey.prototype.encrypt = function (buffer, usePrivate) {\n    var buffers = [];\n    var results = [];\n    var bufferSize = buffer.length;\n    var buffersCount = Math.ceil(bufferSize / this.maxMessageLength) || 1; // total buffers count for encrypt\n    var dividedSize = Math.ceil(bufferSize / buffersCount || 1); // each buffer size\n\n    if (buffersCount == 1) {\n      buffers.push(buffer);\n    } else {\n      for (var bufNum = 0; bufNum < buffersCount; bufNum++) {\n        buffers.push(buffer.slice(bufNum * dividedSize, (bufNum + 1) * dividedSize));\n      }\n    }\n    for (var i = 0; i < buffers.length; i++) {\n      results.push(this.encryptEngine.encrypt(buffers[i], usePrivate));\n    }\n    return Buffer.concat(results);\n  };\n\n  /**\n   * Return the PKCS#1 RSA decryption of buffer\n   * @param buffer {Buffer}\n   * @returns {Buffer}\n   */\n  RSAKey.prototype.decrypt = function (buffer, usePublic) {\n    if (buffer.length % this.encryptedDataLength > 0) {\n      throw Error('Incorrect data or key');\n    }\n    var result = [];\n    var offset = 0;\n    var length = 0;\n    var buffersCount = buffer.length / this.encryptedDataLength;\n    for (var i = 0; i < buffersCount; i++) {\n      offset = i * this.encryptedDataLength;\n      length = offset + this.encryptedDataLength;\n      result.push(this.encryptEngine.decrypt(buffer.slice(offset, Math.min(length, buffer.length)), usePublic));\n    }\n    return Buffer.concat(result);\n  };\n  RSAKey.prototype.sign = function (buffer) {\n    return this.signingScheme.sign.apply(this.signingScheme, arguments);\n  };\n  RSAKey.prototype.verify = function (buffer, signature, signature_encoding) {\n    return this.signingScheme.verify.apply(this.signingScheme, arguments);\n  };\n\n  /**\n   * Check if key pair contains private key\n   */\n  RSAKey.prototype.isPrivate = function () {\n    return this.n && this.e && this.d || false;\n  };\n\n  /**\n   * Check if key pair contains public key\n   * @param strict {boolean} - public key only, return false if have private exponent\n   */\n  RSAKey.prototype.isPublic = function (strict) {\n    return this.n && this.e && !(strict && this.d) || false;\n  };\n  Object.defineProperty(RSAKey.prototype, 'keySize', {\n    get: function () {\n      return this.cache.keyBitLength;\n    }\n  });\n  Object.defineProperty(RSAKey.prototype, 'encryptedDataLength', {\n    get: function () {\n      return this.cache.keyByteLength;\n    }\n  });\n  Object.defineProperty(RSAKey.prototype, 'maxMessageLength', {\n    get: function () {\n      return this.encryptionScheme.maxMessageLength();\n    }\n  });\n\n  /**\n   * Caching key data\n   */\n  RSAKey.prototype.$$recalculateCache = function () {\n    this.cache = this.cache || {};\n    // Bit & byte length\n    this.cache.keyBitLength = this.n.bitLength();\n    this.cache.keyByteLength = this.cache.keyBitLength + 6 >> 3;\n  };\n  return RSAKey;\n}();","map":{"version":3,"names":["_","require","crypt","BigInteger","utils","schemes","encryptEngines","exports","module","Key","RSAKey","n","e","d","p","q","dmp1","dmq1","coeff","prototype","setOptions","options","signingSchemeProvider","signingScheme","encryptionSchemeProvider","encryptionScheme","makeScheme","encryptEngine","getEngine","generate","B","E","qs","parseInt","ee","subtract","ONE","gcd","compareTo","isProbablePrime","t","p1","q1","phi","multiply","bitLength","modInverse","mod","$$recalculateCache","setPrivate","N","D","P","Q","DP","DQ","C","length","isNumber","get32IntFromBuffer","Error","setPublic","$doPrivate","x","modPow","xp","xq","add","$doPublic","modPowInt","encrypt","buffer","usePrivate","buffers","results","bufferSize","buffersCount","Math","ceil","maxMessageLength","dividedSize","push","bufNum","slice","i","Buffer","concat","decrypt","usePublic","encryptedDataLength","result","offset","min","sign","apply","arguments","verify","signature","signature_encoding","isPrivate","isPublic","strict","Object","defineProperty","get","cache","keyBitLength","keyByteLength"],"sources":["/Users/anandarunima/Documents/Arunima/Coursework/sauce_labs-fizzbuzzbash/fizzbuzzbass/components/node_modules/node-rsa/src/libs/rsa.js"],"sourcesContent":["/*\n * RSA Encryption / Decryption with PKCS1 v2 Padding.\n * \n * Copyright (c) 2003-2005  Tom Wu\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND, \n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY \n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  \n *\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * In addition, the following condition applies:\n *\n * All redistributions must retain an intact copy of this copyright notice\n * and disclaimer.\n */\n\n/*\n * Node.js adaptation\n * long message support implementation\n * signing/verifying\n *\n * 2014 rzcoder\n */\n\nvar _ = require('../utils')._;\nvar crypt = require('crypto');\nvar BigInteger = require('./jsbn.js');\nvar utils = require('../utils.js');\nvar schemes = require('../schemes/schemes.js');\nvar encryptEngines = require('../encryptEngines/encryptEngines.js');\n\nexports.BigInteger = BigInteger;\nmodule.exports.Key = (function () {\n    /**\n     * RSA key constructor\n     *\n     * n - modulus\n     * e - publicExponent\n     * d - privateExponent\n     * p - prime1\n     * q - prime2\n     * dmp1 - exponent1 -- d mod (p1)\n     * dmq1 - exponent2 -- d mod (q-1)\n     * coeff - coefficient -- (inverse of q) mod p\n     */\n    function RSAKey() {\n        this.n = null;\n        this.e = 0;\n        this.d = null;\n        this.p = null;\n        this.q = null;\n        this.dmp1 = null;\n        this.dmq1 = null;\n        this.coeff = null;\n    }\n\n    RSAKey.prototype.setOptions = function (options) {\n        var signingSchemeProvider = schemes[options.signingScheme];\n        var encryptionSchemeProvider = schemes[options.encryptionScheme];\n\n        if (signingSchemeProvider === encryptionSchemeProvider) {\n            this.signingScheme = this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);\n        } else {\n            this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);\n            this.signingScheme = signingSchemeProvider.makeScheme(this, options);\n        }\n\n        this.encryptEngine = encryptEngines.getEngine(this, options);\n    };\n\n    /**\n     * Generate a new random private key B bits long, using public expt E\n     * @param B\n     * @param E\n     */\n    RSAKey.prototype.generate = function (B, E) {\n        var qs = B >> 1;\n        this.e = parseInt(E, 16);\n        var ee = new BigInteger(E, 16);\n        while (true) {\n            while (true) {\n                this.p = new BigInteger(B - qs, 1);\n                if (this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) === 0 && this.p.isProbablePrime(10))\n                    break;\n            }\n            while (true) {\n                this.q = new BigInteger(qs, 1);\n                if (this.q.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) === 0 && this.q.isProbablePrime(10))\n                    break;\n            }\n            if (this.p.compareTo(this.q) <= 0) {\n                var t = this.p;\n                this.p = this.q;\n                this.q = t;\n            }\n            var p1 = this.p.subtract(BigInteger.ONE);\n            var q1 = this.q.subtract(BigInteger.ONE);\n            var phi = p1.multiply(q1);\n            if (phi.gcd(ee).compareTo(BigInteger.ONE) === 0) {\n                this.n = this.p.multiply(this.q);\n                if (this.n.bitLength() < B) {\n                    continue;\n                }\n                this.d = ee.modInverse(phi);\n                this.dmp1 = this.d.mod(p1);\n                this.dmq1 = this.d.mod(q1);\n                this.coeff = this.q.modInverse(this.p);\n                break;\n            }\n        }\n        this.$$recalculateCache();\n    };\n\n    /**\n     * Set the private key fields N, e, d and CRT params from buffers\n     *\n     * @param N\n     * @param E\n     * @param D\n     * @param P\n     * @param Q\n     * @param DP\n     * @param DQ\n     * @param C\n     */\n    RSAKey.prototype.setPrivate = function (N, E, D, P, Q, DP, DQ, C) {\n        if (N && E && D && N.length > 0 && (_.isNumber(E) || E.length > 0) && D.length > 0) {\n            this.n = new BigInteger(N);\n            this.e = _.isNumber(E) ? E : utils.get32IntFromBuffer(E, 0);\n            this.d = new BigInteger(D);\n\n            if (P && Q && DP && DQ && C) {\n                this.p = new BigInteger(P);\n                this.q = new BigInteger(Q);\n                this.dmp1 = new BigInteger(DP);\n                this.dmq1 = new BigInteger(DQ);\n                this.coeff = new BigInteger(C);\n            } else {\n                // TODO: re-calculate any missing CRT params\n            }\n            this.$$recalculateCache();\n        } else {\n            throw Error(\"Invalid RSA private key\");\n        }\n    };\n\n    /**\n     * Set the public key fields N and e from hex strings\n     * @param N\n     * @param E\n     */\n    RSAKey.prototype.setPublic = function (N, E) {\n        if (N && E && N.length > 0 && (_.isNumber(E) || E.length > 0)) {\n            this.n = new BigInteger(N);\n            this.e = _.isNumber(E) ? E : utils.get32IntFromBuffer(E, 0);\n            this.$$recalculateCache();\n        } else {\n            throw Error(\"Invalid RSA public key\");\n        }\n    };\n\n    /**\n     * private\n     * Perform raw private operation on \"x\": return x^d (mod n)\n     *\n     * @param x\n     * @returns {*}\n     */\n    RSAKey.prototype.$doPrivate = function (x) {\n        if (this.p || this.q) {\n            return x.modPow(this.d, this.n);\n        }\n\n        // TODO: re-calculate any missing CRT params\n        var xp = x.mod(this.p).modPow(this.dmp1, this.p);\n        var xq = x.mod(this.q).modPow(this.dmq1, this.q);\n\n        while (xp.compareTo(xq) < 0) {\n            xp = xp.add(this.p);\n        }\n        return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);\n    };\n\n    /**\n     * private\n     * Perform raw public operation on \"x\": return x^e (mod n)\n     *\n     * @param x\n     * @returns {*}\n     */\n    RSAKey.prototype.$doPublic = function (x) {\n        return x.modPowInt(this.e, this.n);\n    };\n\n    /**\n     * Return the PKCS#1 RSA encryption of buffer\n     * @param buffer {Buffer}\n     * @returns {Buffer}\n     */\n    RSAKey.prototype.encrypt = function (buffer, usePrivate) {\n        var buffers = [];\n        var results = [];\n        var bufferSize = buffer.length;\n        var buffersCount = Math.ceil(bufferSize / this.maxMessageLength) || 1; // total buffers count for encrypt\n        var dividedSize = Math.ceil(bufferSize / buffersCount || 1); // each buffer size\n\n        if (buffersCount == 1) {\n            buffers.push(buffer);\n        } else {\n            for (var bufNum = 0; bufNum < buffersCount; bufNum++) {\n                buffers.push(buffer.slice(bufNum * dividedSize, (bufNum + 1) * dividedSize));\n            }\n        }\n\n        for (var i = 0; i < buffers.length; i++) {\n            results.push(this.encryptEngine.encrypt(buffers[i], usePrivate));\n        }\n\n        return Buffer.concat(results);\n    };\n\n    /**\n     * Return the PKCS#1 RSA decryption of buffer\n     * @param buffer {Buffer}\n     * @returns {Buffer}\n     */\n    RSAKey.prototype.decrypt = function (buffer, usePublic) {\n        if (buffer.length % this.encryptedDataLength > 0) {\n            throw Error('Incorrect data or key');\n        }\n\n        var result = [];\n        var offset = 0;\n        var length = 0;\n        var buffersCount = buffer.length / this.encryptedDataLength;\n\n        for (var i = 0; i < buffersCount; i++) {\n            offset = i * this.encryptedDataLength;\n            length = offset + this.encryptedDataLength;\n            result.push(this.encryptEngine.decrypt(buffer.slice(offset, Math.min(length, buffer.length)), usePublic));\n        }\n\n        return Buffer.concat(result);\n    };\n\n    RSAKey.prototype.sign = function (buffer) {\n        return this.signingScheme.sign.apply(this.signingScheme, arguments);\n    };\n\n    RSAKey.prototype.verify = function (buffer, signature, signature_encoding) {\n        return this.signingScheme.verify.apply(this.signingScheme, arguments);\n    };\n\n    /**\n     * Check if key pair contains private key\n     */\n    RSAKey.prototype.isPrivate = function () {\n        return this.n && this.e && this.d || false;\n    };\n\n    /**\n     * Check if key pair contains public key\n     * @param strict {boolean} - public key only, return false if have private exponent\n     */\n    RSAKey.prototype.isPublic = function (strict) {\n        return this.n && this.e && !(strict && this.d) || false;\n    };\n\n    Object.defineProperty(RSAKey.prototype, 'keySize', {\n        get: function () {\n            return this.cache.keyBitLength;\n        }\n    });\n\n    Object.defineProperty(RSAKey.prototype, 'encryptedDataLength', {\n        get: function () {\n            return this.cache.keyByteLength;\n        }\n    });\n\n    Object.defineProperty(RSAKey.prototype, 'maxMessageLength', {\n        get: function () {\n            return this.encryptionScheme.maxMessageLength();\n        }\n    });\n\n    /**\n     * Caching key data\n     */\n    RSAKey.prototype.$$recalculateCache = function () {\n        this.cache = this.cache || {};\n        // Bit & byte length\n        this.cache.keyBitLength = this.n.bitLength();\n        this.cache.keyByteLength = (this.cache.keyBitLength + 6) >> 3;\n    };\n\n    return RSAKey;\n})();\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}