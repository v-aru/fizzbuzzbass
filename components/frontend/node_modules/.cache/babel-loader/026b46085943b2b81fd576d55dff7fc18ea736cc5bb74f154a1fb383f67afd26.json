{"ast":null,"code":"/*\n * Basic JavaScript BN library - subset useful for RSA encryption.\n * \n * Copyright (c) 2003-2005  Tom Wu\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND, \n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY \n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  \n *\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * In addition, the following condition applies:\n *\n * All redistributions must retain an intact copy of this copyright notice\n * and disclaimer.\n */\n\n/*\n * Added Node.js Buffers support\n * 2014 rzcoder\n */\n\nvar crypt = require('crypto');\nvar _ = require('../utils')._;\n\n// Bits per digit\nvar dbits;\n\n// JavaScript engine analysis\nvar canary = 0xdeadbeefcafe;\nvar j_lm = (canary & 0xffffff) == 0xefcafe;\n\n// (public) Constructor\nfunction BigInteger(a, b) {\n  if (a != null) {\n    if (\"number\" == typeof a) {\n      this.fromNumber(a, b);\n    } else if (Buffer.isBuffer(a)) {\n      this.fromBuffer(a);\n    } else if (b == null && \"string\" != typeof a) {\n      this.fromByteArray(a);\n    } else {\n      this.fromString(a, b);\n    }\n  }\n}\n\n// return new, unset BigInteger\nfunction nbi() {\n  return new BigInteger(null);\n}\n\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i, x, w, j, c, n) {\n  while (--n >= 0) {\n    var v = x * this[i++] + w[j] + c;\n    c = Math.floor(v / 0x4000000);\n    w[j++] = v & 0x3ffffff;\n  }\n  return c;\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i, x, w, j, c, n) {\n  var xl = x & 0x7fff,\n    xh = x >> 15;\n  while (--n >= 0) {\n    var l = this[i] & 0x7fff;\n    var h = this[i++] >> 15;\n    var m = xh * l + h * xl;\n    l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n    w[j++] = l & 0x3fffffff;\n  }\n  return c;\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i, x, w, j, c, n) {\n  var xl = x & 0x3fff,\n    xh = x >> 14;\n  while (--n >= 0) {\n    var l = this[i] & 0x3fff;\n    var h = this[i++] >> 14;\n    var m = xh * l + h * xl;\n    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n    c = (l >> 28) + (m >> 14) + xh * h;\n    w[j++] = l & 0xfffffff;\n  }\n  return c;\n}\n\n// We need to select the fastest one that works in this environment. \n//if (j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n//\tBigInteger.prototype.am = am2;\n//\tdbits = 30;\n//} else if (j_lm && (navigator.appName != \"Netscape\")) {\n//\tBigInteger.prototype.am = am1;\n//\tdbits = 26;\n//} else { // Mozilla/Netscape seems to prefer am3\n//\tBigInteger.prototype.am = am3;\n//\tdbits = 28;\n//}\n\n// For node.js, we pick am3 with max dbits to 28.\nBigInteger.prototype.am = am3;\ndbits = 28;\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = (1 << dbits) - 1;\nBigInteger.prototype.DV = 1 << dbits;\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP;\n\n// Digit conversions\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nvar BI_RC = new Array();\nvar rr, vv;\nrr = \"0\".charCodeAt(0);\nfor (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\nrr = \"a\".charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\nrr = \"A\".charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\nfunction int2char(n) {\n  return BI_RM.charAt(n);\n}\nfunction intAt(s, i) {\n  var c = BI_RC[s.charCodeAt(i)];\n  return c == null ? -1 : c;\n}\n\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n  for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];\n  r.t = this.t;\n  r.s = this.s;\n}\n\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n  this.t = 1;\n  this.s = x < 0 ? -1 : 0;\n  if (x > 0) this[0] = x;else if (x < -1) this[0] = x + DV;else this.t = 0;\n}\n\n// return bigint initialized to value\nfunction nbv(i) {\n  var r = nbi();\n  r.fromInt(i);\n  return r;\n}\n\n// (protected) set from string and radix\nfunction bnpFromString(data, radix, unsigned) {\n  var k;\n  switch (radix) {\n    case 2:\n      k = 1;\n      break;\n    case 4:\n      k = 2;\n      break;\n    case 8:\n      k = 3;\n      break;\n    case 16:\n      k = 4;\n      break;\n    case 32:\n      k = 5;\n      break;\n    case 256:\n      k = 8;\n      break;\n    default:\n      this.fromRadix(data, radix);\n      return;\n  }\n  this.t = 0;\n  this.s = 0;\n  var i = data.length;\n  var mi = false;\n  var sh = 0;\n  while (--i >= 0) {\n    var x = k == 8 ? data[i] & 0xff : intAt(data, i);\n    if (x < 0) {\n      if (data.charAt(i) == \"-\") mi = true;\n      continue;\n    }\n    mi = false;\n    if (sh === 0) this[this.t++] = x;else if (sh + k > this.DB) {\n      this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;\n      this[this.t++] = x >> this.DB - sh;\n    } else this[this.t - 1] |= x << sh;\n    sh += k;\n    if (sh >= this.DB) sh -= this.DB;\n  }\n  if (!unsigned && k == 8 && (data[0] & 0x80) != 0) {\n    this.s = -1;\n    if (sh > 0) this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;\n  }\n  this.clamp();\n  if (mi) BigInteger.ZERO.subTo(this, this);\n}\nfunction bnpFromByteArray(a, unsigned) {\n  this.fromString(a, 256, unsigned);\n}\nfunction bnpFromBuffer(a) {\n  this.fromString(a, 256, true);\n}\n\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n  var c = this.s & this.DM;\n  while (this.t > 0 && this[this.t - 1] == c) --this.t;\n}\n\n// (public) return string representation in given radix\nfunction bnToString(b) {\n  if (this.s < 0) return \"-\" + this.negate().toString(b);\n  var k;\n  if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else return this.toRadix(b);\n  var km = (1 << k) - 1,\n    d,\n    m = false,\n    r = \"\",\n    i = this.t;\n  var p = this.DB - i * this.DB % k;\n  if (i-- > 0) {\n    if (p < this.DB && (d = this[i] >> p) > 0) {\n      m = true;\n      r = int2char(d);\n    }\n    while (i >= 0) {\n      if (p < k) {\n        d = (this[i] & (1 << p) - 1) << k - p;\n        d |= this[--i] >> (p += this.DB - k);\n      } else {\n        d = this[i] >> (p -= k) & km;\n        if (p <= 0) {\n          p += this.DB;\n          --i;\n        }\n      }\n      if (d > 0) m = true;\n      if (m) r += int2char(d);\n    }\n  }\n  return m ? r : \"0\";\n}\n\n// (public) -this\nfunction bnNegate() {\n  var r = nbi();\n  BigInteger.ZERO.subTo(this, r);\n  return r;\n}\n\n// (public) |this|\nfunction bnAbs() {\n  return this.s < 0 ? this.negate() : this;\n}\n\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n  var r = this.s - a.s;\n  if (r != 0) return r;\n  var i = this.t;\n  r = i - a.t;\n  if (r != 0) return this.s < 0 ? -r : r;\n  while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;\n  return 0;\n}\n\n// returns bit length of the integer x\nfunction nbits(x) {\n  var r = 1,\n    t;\n  if ((t = x >>> 16) != 0) {\n    x = t;\n    r += 16;\n  }\n  if ((t = x >> 8) != 0) {\n    x = t;\n    r += 8;\n  }\n  if ((t = x >> 4) != 0) {\n    x = t;\n    r += 4;\n  }\n  if ((t = x >> 2) != 0) {\n    x = t;\n    r += 2;\n  }\n  if ((t = x >> 1) != 0) {\n    x = t;\n    r += 1;\n  }\n  return r;\n}\n\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n  if (this.t <= 0) return 0;\n  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);\n}\n\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n, r) {\n  var i;\n  for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];\n  for (i = n - 1; i >= 0; --i) r[i] = 0;\n  r.t = this.t + n;\n  r.s = this.s;\n}\n\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n, r) {\n  for (var i = n; i < this.t; ++i) r[i - n] = this[i];\n  r.t = Math.max(this.t - n, 0);\n  r.s = this.s;\n}\n\n// (protected) r = this << n\nfunction bnpLShiftTo(n, r) {\n  var bs = n % this.DB;\n  var cbs = this.DB - bs;\n  var bm = (1 << cbs) - 1;\n  var ds = Math.floor(n / this.DB),\n    c = this.s << bs & this.DM,\n    i;\n  for (i = this.t - 1; i >= 0; --i) {\n    r[i + ds + 1] = this[i] >> cbs | c;\n    c = (this[i] & bm) << bs;\n  }\n  for (i = ds - 1; i >= 0; --i) r[i] = 0;\n  r[ds] = c;\n  r.t = this.t + ds + 1;\n  r.s = this.s;\n  r.clamp();\n}\n\n// (protected) r = this >> n\nfunction bnpRShiftTo(n, r) {\n  r.s = this.s;\n  var ds = Math.floor(n / this.DB);\n  if (ds >= this.t) {\n    r.t = 0;\n    return;\n  }\n  var bs = n % this.DB;\n  var cbs = this.DB - bs;\n  var bm = (1 << bs) - 1;\n  r[0] = this[ds] >> bs;\n  for (var i = ds + 1; i < this.t; ++i) {\n    r[i - ds - 1] |= (this[i] & bm) << cbs;\n    r[i - ds] = this[i] >> bs;\n  }\n  if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;\n  r.t = this.t - ds;\n  r.clamp();\n}\n\n// (protected) r = this - a\nfunction bnpSubTo(a, r) {\n  var i = 0,\n    c = 0,\n    m = Math.min(a.t, this.t);\n  while (i < m) {\n    c += this[i] - a[i];\n    r[i++] = c & this.DM;\n    c >>= this.DB;\n  }\n  if (a.t < this.t) {\n    c -= a.s;\n    while (i < this.t) {\n      c += this[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n    c += this.s;\n  } else {\n    c += this.s;\n    while (i < a.t) {\n      c -= a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n    c -= a.s;\n  }\n  r.s = c < 0 ? -1 : 0;\n  if (c < -1) r[i++] = this.DV + c;else if (c > 0) r[i++] = c;\n  r.t = i;\n  r.clamp();\n}\n\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a, r) {\n  var x = this.abs(),\n    y = a.abs();\n  var i = x.t;\n  r.t = i + y.t;\n  while (--i >= 0) r[i] = 0;\n  for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n  r.s = 0;\n  r.clamp();\n  if (this.s != a.s) BigInteger.ZERO.subTo(r, r);\n}\n\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n  var x = this.abs();\n  var i = r.t = 2 * x.t;\n  while (--i >= 0) r[i] = 0;\n  for (i = 0; i < x.t - 1; ++i) {\n    var c = x.am(i, x[i], r, 2 * i, 0, 1);\n    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n      r[i + x.t] -= x.DV;\n      r[i + x.t + 1] = 1;\n    }\n  }\n  if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n  r.s = 0;\n  r.clamp();\n}\n\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m, q, r) {\n  var pm = m.abs();\n  if (pm.t <= 0) return;\n  var pt = this.abs();\n  if (pt.t < pm.t) {\n    if (q != null) q.fromInt(0);\n    if (r != null) this.copyTo(r);\n    return;\n  }\n  if (r == null) r = nbi();\n  var y = nbi(),\n    ts = this.s,\n    ms = m.s;\n  var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n  if (nsh > 0) {\n    pm.lShiftTo(nsh, y);\n    pt.lShiftTo(nsh, r);\n  } else {\n    pm.copyTo(y);\n    pt.copyTo(r);\n  }\n  var ys = y.t;\n  var y0 = y[ys - 1];\n  if (y0 === 0) return;\n  var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);\n  var d1 = this.FV / yt,\n    d2 = (1 << this.F1) / yt,\n    e = 1 << this.F2;\n  var i = r.t,\n    j = i - ys,\n    t = q == null ? nbi() : q;\n  y.dlShiftTo(j, t);\n  if (r.compareTo(t) >= 0) {\n    r[r.t++] = 1;\n    r.subTo(t, r);\n  }\n  BigInteger.ONE.dlShiftTo(ys, t);\n  t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n  while (y.t < ys) y[y.t++] = 0;\n  while (--j >= 0) {\n    // Estimate quotient digit\n    var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n    if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n      // Try it out\n      y.dlShiftTo(j, t);\n      r.subTo(t, r);\n      while (r[i] < --qd) r.subTo(t, r);\n    }\n  }\n  if (q != null) {\n    r.drShiftTo(ys, q);\n    if (ts != ms) BigInteger.ZERO.subTo(q, q);\n  }\n  r.t = ys;\n  r.clamp();\n  if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder\n  if (ts < 0) BigInteger.ZERO.subTo(r, r);\n}\n\n// (public) this mod a\nfunction bnMod(a) {\n  var r = nbi();\n  this.abs().divRemTo(a, null, r);\n  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n  return r;\n}\n\n// Modular reduction using \"classic\" algorithm\nfunction Classic(m) {\n  this.m = m;\n}\nfunction cConvert(x) {\n  if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);else return x;\n}\nfunction cRevert(x) {\n  return x;\n}\nfunction cReduce(x) {\n  x.divRemTo(this.m, null, x);\n}\nfunction cMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\nfunction cSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n}\nClassic.prototype.convert = cConvert;\nClassic.prototype.revert = cRevert;\nClassic.prototype.reduce = cReduce;\nClassic.prototype.mulTo = cMulTo;\nClassic.prototype.sqrTo = cSqrTo;\n\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n  if (this.t < 1) return 0;\n  var x = this[0];\n  if ((x & 1) === 0) return 0;\n  var y = x & 3; // y == 1/x mod 2^2\n  y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4\n  y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8\n  y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16\n  // last step - calculate inverse mod DV directly;\n  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n  y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits\n  // we really want the negative inverse, and -DV < y < DV\n  return y > 0 ? this.DV - y : -y;\n}\n\n// Montgomery reduction\nfunction Montgomery(m) {\n  this.m = m;\n  this.mp = m.invDigit();\n  this.mpl = this.mp & 0x7fff;\n  this.mph = this.mp >> 15;\n  this.um = (1 << m.DB - 15) - 1;\n  this.mt2 = 2 * m.t;\n}\n\n// xR mod m\nfunction montConvert(x) {\n  var r = nbi();\n  x.abs().dlShiftTo(this.m.t, r);\n  r.divRemTo(this.m, null, r);\n  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n  return r;\n}\n\n// x/R mod m\nfunction montRevert(x) {\n  var r = nbi();\n  x.copyTo(r);\n  this.reduce(r);\n  return r;\n}\n\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n  while (x.t <= this.mt2)\n  // pad x so am has enough room later\n  x[x.t++] = 0;\n  for (var i = 0; i < this.m.t; ++i) {\n    // faster way of calculating u0 = x[i]*mp mod DV\n    var j = x[i] & 0x7fff;\n    var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;\n    // use am to combine the multiply-shift-add into one call\n    j = i + this.m.t;\n    x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n    // propagate carry\n    while (x[j] >= x.DV) {\n      x[j] -= x.DV;\n      x[++j]++;\n    }\n  }\n  x.clamp();\n  x.drShiftTo(this.m.t, x);\n  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n}\n\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n}\n\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo;\n\n// (protected) true iff this is even\nfunction bnpIsEven() {\n  return (this.t > 0 ? this[0] & 1 : this.s) === 0;\n}\n\n// (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\nfunction bnpExp(e, z) {\n  if (e > 0xffffffff || e < 1) return BigInteger.ONE;\n  var r = nbi(),\n    r2 = nbi(),\n    g = z.convert(this),\n    i = nbits(e) - 1;\n  g.copyTo(r);\n  while (--i >= 0) {\n    z.sqrTo(r, r2);\n    if ((e & 1 << i) > 0) z.mulTo(r2, g, r);else {\n      var t = r;\n      r = r2;\n      r2 = t;\n    }\n  }\n  return z.revert(r);\n}\n\n// (public) this^e % m, 0 <= e < 2^32\nfunction bnModPowInt(e, m) {\n  var z;\n  if (e < 256 || m.isEven()) z = new Classic(m);else z = new Montgomery(m);\n  return this.exp(e, z);\n}\n\n// Copyright (c) 2005-2009  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n\n// Extended JavaScript BN functions, required for RSA private ops.\n\n// Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n// Version 1.2: square() API, isProbablePrime fix\n\n//(public)\nfunction bnClone() {\n  var r = nbi();\n  this.copyTo(r);\n  return r;\n}\n\n//(public) return value as integer\nfunction bnIntValue() {\n  if (this.s < 0) {\n    if (this.t == 1) return this[0] - this.DV;else if (this.t === 0) return -1;\n  } else if (this.t == 1) return this[0];else if (this.t === 0) return 0;\n  // assumes 16 < DB < 32\n  return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];\n}\n\n//(public) return value as byte\nfunction bnByteValue() {\n  return this.t == 0 ? this.s : this[0] << 24 >> 24;\n}\n\n//(public) return value as short (assumes DB>=16)\nfunction bnShortValue() {\n  return this.t == 0 ? this.s : this[0] << 16 >> 16;\n}\n\n//(protected) return x s.t. r^x < DV\nfunction bnpChunkSize(r) {\n  return Math.floor(Math.LN2 * this.DB / Math.log(r));\n}\n\n//(public) 0 if this === 0, 1 if this > 0\nfunction bnSigNum() {\n  if (this.s < 0) return -1;else if (this.t <= 0 || this.t == 1 && this[0] <= 0) return 0;else return 1;\n}\n\n//(protected) convert to radix string\nfunction bnpToRadix(b) {\n  if (b == null) b = 10;\n  if (this.signum() === 0 || b < 2 || b > 36) return \"0\";\n  var cs = this.chunkSize(b);\n  var a = Math.pow(b, cs);\n  var d = nbv(a),\n    y = nbi(),\n    z = nbi(),\n    r = \"\";\n  this.divRemTo(d, y, z);\n  while (y.signum() > 0) {\n    r = (a + z.intValue()).toString(b).substr(1) + r;\n    y.divRemTo(d, y, z);\n  }\n  return z.intValue().toString(b) + r;\n}\n\n//(protected) convert from radix string\nfunction bnpFromRadix(s, b) {\n  this.fromInt(0);\n  if (b == null) b = 10;\n  var cs = this.chunkSize(b);\n  var d = Math.pow(b, cs),\n    mi = false,\n    j = 0,\n    w = 0;\n  for (var i = 0; i < s.length; ++i) {\n    var x = intAt(s, i);\n    if (x < 0) {\n      if (s.charAt(i) == \"-\" && this.signum() === 0) mi = true;\n      continue;\n    }\n    w = b * w + x;\n    if (++j >= cs) {\n      this.dMultiply(d);\n      this.dAddOffset(w, 0);\n      j = 0;\n      w = 0;\n    }\n  }\n  if (j > 0) {\n    this.dMultiply(Math.pow(b, j));\n    this.dAddOffset(w, 0);\n  }\n  if (mi) BigInteger.ZERO.subTo(this, this);\n}\n\n//(protected) alternate constructor\nfunction bnpFromNumber(a, b) {\n  if (\"number\" == typeof b) {\n    // new BigInteger(int,int,RNG)\n    if (a < 2) this.fromInt(1);else {\n      this.fromNumber(a);\n      if (!this.testBit(a - 1))\n        // force MSB set\n        this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n      if (this.isEven()) this.dAddOffset(1, 0); // force odd\n      while (!this.isProbablePrime(b)) {\n        this.dAddOffset(2, 0);\n        if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n      }\n    }\n  } else {\n    // new BigInteger(int,RNG)\n    var x = crypt.randomBytes((a >> 3) + 1);\n    var t = a & 7;\n    if (t > 0) x[0] &= (1 << t) - 1;else x[0] = 0;\n    this.fromByteArray(x);\n  }\n}\n\n//(public) convert to bigendian byte array\nfunction bnToByteArray() {\n  var i = this.t,\n    r = new Array();\n  r[0] = this.s;\n  var p = this.DB - i * this.DB % 8,\n    d,\n    k = 0;\n  if (i-- > 0) {\n    if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) r[k++] = d | this.s << this.DB - p;\n    while (i >= 0) {\n      if (p < 8) {\n        d = (this[i] & (1 << p) - 1) << 8 - p;\n        d |= this[--i] >> (p += this.DB - 8);\n      } else {\n        d = this[i] >> (p -= 8) & 0xff;\n        if (p <= 0) {\n          p += this.DB;\n          --i;\n        }\n      }\n      if ((d & 0x80) != 0) d |= -256;\n      if (k === 0 && (this.s & 0x80) != (d & 0x80)) ++k;\n      if (k > 0 || d != this.s) r[k++] = d;\n    }\n  }\n  return r;\n}\n\n/**\n * return Buffer object\n * @param trim {boolean} slice buffer if first element == 0\n * @returns {Buffer}\n */\nfunction bnToBuffer(trimOrSize) {\n  var res = new Buffer(this.toByteArray());\n  if (trimOrSize === true && res[0] === 0) {\n    res = res.slice(1);\n  } else if (_.isNumber(trimOrSize)) {\n    if (res.length > trimOrSize) {\n      for (var i = 0; i < res.length - trimOrSize; i++) {\n        if (res[i] !== 0) {\n          return null;\n        }\n      }\n      return res.slice(res.length - trimOrSize);\n    } else if (res.length < trimOrSize) {\n      var padded = new Buffer(trimOrSize);\n      padded.fill(0, 0, trimOrSize - res.length);\n      res.copy(padded, trimOrSize - res.length);\n      return padded;\n    }\n  }\n  return res;\n}\nfunction bnEquals(a) {\n  return this.compareTo(a) == 0;\n}\nfunction bnMin(a) {\n  return this.compareTo(a) < 0 ? this : a;\n}\nfunction bnMax(a) {\n  return this.compareTo(a) > 0 ? this : a;\n}\n\n//(protected) r = this op a (bitwise)\nfunction bnpBitwiseTo(a, op, r) {\n  var i,\n    f,\n    m = Math.min(a.t, this.t);\n  for (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);\n  if (a.t < this.t) {\n    f = a.s & this.DM;\n    for (i = m; i < this.t; ++i) r[i] = op(this[i], f);\n    r.t = this.t;\n  } else {\n    f = this.s & this.DM;\n    for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);\n    r.t = a.t;\n  }\n  r.s = op(this.s, a.s);\n  r.clamp();\n}\n\n//(public) this & a\nfunction op_and(x, y) {\n  return x & y;\n}\nfunction bnAnd(a) {\n  var r = nbi();\n  this.bitwiseTo(a, op_and, r);\n  return r;\n}\n\n//(public) this | a\nfunction op_or(x, y) {\n  return x | y;\n}\nfunction bnOr(a) {\n  var r = nbi();\n  this.bitwiseTo(a, op_or, r);\n  return r;\n}\n\n//(public) this ^ a\nfunction op_xor(x, y) {\n  return x ^ y;\n}\nfunction bnXor(a) {\n  var r = nbi();\n  this.bitwiseTo(a, op_xor, r);\n  return r;\n}\n\n//(public) this & ~a\nfunction op_andnot(x, y) {\n  return x & ~y;\n}\nfunction bnAndNot(a) {\n  var r = nbi();\n  this.bitwiseTo(a, op_andnot, r);\n  return r;\n}\n\n//(public) ~this\nfunction bnNot() {\n  var r = nbi();\n  for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];\n  r.t = this.t;\n  r.s = ~this.s;\n  return r;\n}\n\n//(public) this << n\nfunction bnShiftLeft(n) {\n  var r = nbi();\n  if (n < 0) this.rShiftTo(-n, r);else this.lShiftTo(n, r);\n  return r;\n}\n\n//(public) this >> n\nfunction bnShiftRight(n) {\n  var r = nbi();\n  if (n < 0) this.lShiftTo(-n, r);else this.rShiftTo(n, r);\n  return r;\n}\n\n//return index of lowest 1-bit in x, x < 2^31\nfunction lbit(x) {\n  if (x === 0) return -1;\n  var r = 0;\n  if ((x & 0xffff) === 0) {\n    x >>= 16;\n    r += 16;\n  }\n  if ((x & 0xff) === 0) {\n    x >>= 8;\n    r += 8;\n  }\n  if ((x & 0xf) === 0) {\n    x >>= 4;\n    r += 4;\n  }\n  if ((x & 3) === 0) {\n    x >>= 2;\n    r += 2;\n  }\n  if ((x & 1) === 0) ++r;\n  return r;\n}\n\n//(public) returns index of lowest 1-bit (or -1 if none)\nfunction bnGetLowestSetBit() {\n  for (var i = 0; i < this.t; ++i) if (this[i] != 0) return i * this.DB + lbit(this[i]);\n  if (this.s < 0) return this.t * this.DB;\n  return -1;\n}\n\n//return number of 1 bits in x\nfunction cbit(x) {\n  var r = 0;\n  while (x != 0) {\n    x &= x - 1;\n    ++r;\n  }\n  return r;\n}\n\n//(public) return number of set bits\nfunction bnBitCount() {\n  var r = 0,\n    x = this.s & this.DM;\n  for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);\n  return r;\n}\n\n//(public) true iff nth bit is set\nfunction bnTestBit(n) {\n  var j = Math.floor(n / this.DB);\n  if (j >= this.t) return this.s != 0;\n  return (this[j] & 1 << n % this.DB) != 0;\n}\n\n//(protected) this op (1<<n)\nfunction bnpChangeBit(n, op) {\n  var r = BigInteger.ONE.shiftLeft(n);\n  this.bitwiseTo(r, op, r);\n  return r;\n}\n\n//(public) this | (1<<n)\nfunction bnSetBit(n) {\n  return this.changeBit(n, op_or);\n}\n\n//(public) this & ~(1<<n)\nfunction bnClearBit(n) {\n  return this.changeBit(n, op_andnot);\n}\n\n//(public) this ^ (1<<n)\nfunction bnFlipBit(n) {\n  return this.changeBit(n, op_xor);\n}\n\n//(protected) r = this + a\nfunction bnpAddTo(a, r) {\n  var i = 0,\n    c = 0,\n    m = Math.min(a.t, this.t);\n  while (i < m) {\n    c += this[i] + a[i];\n    r[i++] = c & this.DM;\n    c >>= this.DB;\n  }\n  if (a.t < this.t) {\n    c += a.s;\n    while (i < this.t) {\n      c += this[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n    c += this.s;\n  } else {\n    c += this.s;\n    while (i < a.t) {\n      c += a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n    c += a.s;\n  }\n  r.s = c < 0 ? -1 : 0;\n  if (c > 0) r[i++] = c;else if (c < -1) r[i++] = this.DV + c;\n  r.t = i;\n  r.clamp();\n}\n\n//(public) this + a\nfunction bnAdd(a) {\n  var r = nbi();\n  this.addTo(a, r);\n  return r;\n}\n\n//(public) this - a\nfunction bnSubtract(a) {\n  var r = nbi();\n  this.subTo(a, r);\n  return r;\n}\n\n//(public) this * a\nfunction bnMultiply(a) {\n  var r = nbi();\n  this.multiplyTo(a, r);\n  return r;\n}\n\n// (public) this^2\nfunction bnSquare() {\n  var r = nbi();\n  this.squareTo(r);\n  return r;\n}\n\n//(public) this / a\nfunction bnDivide(a) {\n  var r = nbi();\n  this.divRemTo(a, r, null);\n  return r;\n}\n\n//(public) this % a\nfunction bnRemainder(a) {\n  var r = nbi();\n  this.divRemTo(a, null, r);\n  return r;\n}\n\n//(public) [this/a,this%a]\nfunction bnDivideAndRemainder(a) {\n  var q = nbi(),\n    r = nbi();\n  this.divRemTo(a, q, r);\n  return new Array(q, r);\n}\n\n//(protected) this *= n, this >= 0, 1 < n < DV\nfunction bnpDMultiply(n) {\n  this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n  ++this.t;\n  this.clamp();\n}\n\n//(protected) this += n << w words, this >= 0\nfunction bnpDAddOffset(n, w) {\n  if (n === 0) return;\n  while (this.t <= w) this[this.t++] = 0;\n  this[w] += n;\n  while (this[w] >= this.DV) {\n    this[w] -= this.DV;\n    if (++w >= this.t) this[this.t++] = 0;\n    ++this[w];\n  }\n}\n\n//A \"null\" reducer\nfunction NullExp() {}\nfunction nNop(x) {\n  return x;\n}\nfunction nMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n}\nfunction nSqrTo(x, r) {\n  x.squareTo(r);\n}\nNullExp.prototype.convert = nNop;\nNullExp.prototype.revert = nNop;\nNullExp.prototype.mulTo = nMulTo;\nNullExp.prototype.sqrTo = nSqrTo;\n\n//(public) this^e\nfunction bnPow(e) {\n  return this.exp(e, new NullExp());\n}\n\n//(protected) r = lower n words of \"this * a\", a.t <= n\n//\"this\" should be the larger one if appropriate.\nfunction bnpMultiplyLowerTo(a, n, r) {\n  var i = Math.min(this.t + a.t, n);\n  r.s = 0; // assumes a,this >= 0\n  r.t = i;\n  while (i > 0) r[--i] = 0;\n  var j;\n  for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n  for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);\n  r.clamp();\n}\n\n//(protected) r = \"this * a\" without lower n words, n > 0\n//\"this\" should be the larger one if appropriate.\nfunction bnpMultiplyUpperTo(a, n, r) {\n  --n;\n  var i = r.t = this.t + a.t - n;\n  r.s = 0; // assumes a,this >= 0\n  while (--i >= 0) r[i] = 0;\n  for (i = Math.max(n - this.t, 0); i < a.t; ++i) r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n  r.clamp();\n  r.drShiftTo(1, r);\n}\n\n//Barrett modular reduction\nfunction Barrett(m) {\n  // setup Barrett\n  this.r2 = nbi();\n  this.q3 = nbi();\n  BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n  this.mu = this.r2.divide(m);\n  this.m = m;\n}\nfunction barrettConvert(x) {\n  if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);else if (x.compareTo(this.m) < 0) return x;else {\n    var r = nbi();\n    x.copyTo(r);\n    this.reduce(r);\n    return r;\n  }\n}\nfunction barrettRevert(x) {\n  return x;\n}\n\n//x = x mod m (HAC 14.42)\nfunction barrettReduce(x) {\n  x.drShiftTo(this.m.t - 1, this.r2);\n  if (x.t > this.m.t + 1) {\n    x.t = this.m.t + 1;\n    x.clamp();\n  }\n  this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n  this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n  while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);\n  x.subTo(this.r2, x);\n  while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n}\n\n//r = x^2 mod m; x != r\nfunction barrettSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n}\n\n//r = x*y mod m; x,y != r\nfunction barrettMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\nBarrett.prototype.convert = barrettConvert;\nBarrett.prototype.revert = barrettRevert;\nBarrett.prototype.reduce = barrettReduce;\nBarrett.prototype.mulTo = barrettMulTo;\nBarrett.prototype.sqrTo = barrettSqrTo;\n\n//(public) this^e % m (HAC 14.85)\nfunction bnModPow(e, m) {\n  var i = e.bitLength(),\n    k,\n    r = nbv(1),\n    z;\n  if (i <= 0) return r;else if (i < 18) k = 1;else if (i < 48) k = 3;else if (i < 144) k = 4;else if (i < 768) k = 5;else k = 6;\n  if (i < 8) z = new Classic(m);else if (m.isEven()) z = new Barrett(m);else z = new Montgomery(m);\n\n  // precomputation\n  var g = new Array(),\n    n = 3,\n    k1 = k - 1,\n    km = (1 << k) - 1;\n  g[1] = z.convert(this);\n  if (k > 1) {\n    var g2 = nbi();\n    z.sqrTo(g[1], g2);\n    while (n <= km) {\n      g[n] = nbi();\n      z.mulTo(g2, g[n - 2], g[n]);\n      n += 2;\n    }\n  }\n  var j = e.t - 1,\n    w,\n    is1 = true,\n    r2 = nbi(),\n    t;\n  i = nbits(e[j]) - 1;\n  while (j >= 0) {\n    if (i >= k1) w = e[j] >> i - k1 & km;else {\n      w = (e[j] & (1 << i + 1) - 1) << k1 - i;\n      if (j > 0) w |= e[j - 1] >> this.DB + i - k1;\n    }\n    n = k;\n    while ((w & 1) === 0) {\n      w >>= 1;\n      --n;\n    }\n    if ((i -= n) < 0) {\n      i += this.DB;\n      --j;\n    }\n    if (is1) {\n      // ret == 1, don't bother squaring or multiplying it\n      g[w].copyTo(r);\n      is1 = false;\n    } else {\n      while (n > 1) {\n        z.sqrTo(r, r2);\n        z.sqrTo(r2, r);\n        n -= 2;\n      }\n      if (n > 0) z.sqrTo(r, r2);else {\n        t = r;\n        r = r2;\n        r2 = t;\n      }\n      z.mulTo(r2, g[w], r);\n    }\n    while (j >= 0 && (e[j] & 1 << i) === 0) {\n      z.sqrTo(r, r2);\n      t = r;\n      r = r2;\n      r2 = t;\n      if (--i < 0) {\n        i = this.DB - 1;\n        --j;\n      }\n    }\n  }\n  return z.revert(r);\n}\n\n//(public) gcd(this,a) (HAC 14.54)\nfunction bnGCD(a) {\n  var x = this.s < 0 ? this.negate() : this.clone();\n  var y = a.s < 0 ? a.negate() : a.clone();\n  if (x.compareTo(y) < 0) {\n    var t = x;\n    x = y;\n    y = t;\n  }\n  var i = x.getLowestSetBit(),\n    g = y.getLowestSetBit();\n  if (g < 0) return x;\n  if (i < g) g = i;\n  if (g > 0) {\n    x.rShiftTo(g, x);\n    y.rShiftTo(g, y);\n  }\n  while (x.signum() > 0) {\n    if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);\n    if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);\n    if (x.compareTo(y) >= 0) {\n      x.subTo(y, x);\n      x.rShiftTo(1, x);\n    } else {\n      y.subTo(x, y);\n      y.rShiftTo(1, y);\n    }\n  }\n  if (g > 0) y.lShiftTo(g, y);\n  return y;\n}\n\n//(protected) this % n, n < 2^26\nfunction bnpModInt(n) {\n  if (n <= 0) return 0;\n  var d = this.DV % n,\n    r = this.s < 0 ? n - 1 : 0;\n  if (this.t > 0) if (d === 0) r = this[0] % n;else for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;\n  return r;\n}\n\n//(public) 1/this % m (HAC 14.61)\nfunction bnModInverse(m) {\n  var ac = m.isEven();\n  if (this.isEven() && ac || m.signum() === 0) return BigInteger.ZERO;\n  var u = m.clone(),\n    v = this.clone();\n  var a = nbv(1),\n    b = nbv(0),\n    c = nbv(0),\n    d = nbv(1);\n  while (u.signum() != 0) {\n    while (u.isEven()) {\n      u.rShiftTo(1, u);\n      if (ac) {\n        if (!a.isEven() || !b.isEven()) {\n          a.addTo(this, a);\n          b.subTo(m, b);\n        }\n        a.rShiftTo(1, a);\n      } else if (!b.isEven()) b.subTo(m, b);\n      b.rShiftTo(1, b);\n    }\n    while (v.isEven()) {\n      v.rShiftTo(1, v);\n      if (ac) {\n        if (!c.isEven() || !d.isEven()) {\n          c.addTo(this, c);\n          d.subTo(m, d);\n        }\n        c.rShiftTo(1, c);\n      } else if (!d.isEven()) d.subTo(m, d);\n      d.rShiftTo(1, d);\n    }\n    if (u.compareTo(v) >= 0) {\n      u.subTo(v, u);\n      if (ac) a.subTo(c, a);\n      b.subTo(d, b);\n    } else {\n      v.subTo(u, v);\n      if (ac) c.subTo(a, c);\n      d.subTo(b, d);\n    }\n  }\n  if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n  if (d.compareTo(m) >= 0) return d.subtract(m);\n  if (d.signum() < 0) d.addTo(m, d);else return d;\n  if (d.signum() < 0) return d.add(m);else return d;\n}\nvar lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\nvar lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\n\n//(public) test primality with certainty >= 1-.5^t\nfunction bnIsProbablePrime(t) {\n  var i,\n    x = this.abs();\n  if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\n    for (i = 0; i < lowprimes.length; ++i) if (x[0] == lowprimes[i]) return true;\n    return false;\n  }\n  if (x.isEven()) return false;\n  i = 1;\n  while (i < lowprimes.length) {\n    var m = lowprimes[i],\n      j = i + 1;\n    while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n    m = x.modInt(m);\n    while (i < j) if (m % lowprimes[i++] === 0) return false;\n  }\n  return x.millerRabin(t);\n}\n\n//(protected) true if probably prime (HAC 4.24, Miller-Rabin)\nfunction bnpMillerRabin(t) {\n  var n1 = this.subtract(BigInteger.ONE);\n  var k = n1.getLowestSetBit();\n  if (k <= 0) return false;\n  var r = n1.shiftRight(k);\n  t = t + 1 >> 1;\n  if (t > lowprimes.length) t = lowprimes.length;\n  var a = nbi();\n  for (var i = 0; i < t; ++i) {\n    //Pick bases at random, instead of starting at 2\n    a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n    var y = a.modPow(r, this);\n    if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n      var j = 1;\n      while (j++ < k && y.compareTo(n1) != 0) {\n        y = y.modPowInt(2, this);\n        if (y.compareTo(BigInteger.ONE) === 0) return false;\n      }\n      if (y.compareTo(n1) != 0) return false;\n    }\n  }\n  return true;\n}\n\n// protected\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.fromByteArray = bnpFromByteArray;\nBigInteger.prototype.fromBuffer = bnpFromBuffer;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.isEven = bnpIsEven;\nBigInteger.prototype.exp = bnpExp;\nBigInteger.prototype.chunkSize = bnpChunkSize;\nBigInteger.prototype.toRadix = bnpToRadix;\nBigInteger.prototype.fromRadix = bnpFromRadix;\nBigInteger.prototype.fromNumber = bnpFromNumber;\nBigInteger.prototype.bitwiseTo = bnpBitwiseTo;\nBigInteger.prototype.changeBit = bnpChangeBit;\nBigInteger.prototype.addTo = bnpAddTo;\nBigInteger.prototype.dMultiply = bnpDMultiply;\nBigInteger.prototype.dAddOffset = bnpDAddOffset;\nBigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\nBigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\nBigInteger.prototype.modInt = bnpModInt;\nBigInteger.prototype.millerRabin = bnpMillerRabin;\n\n// public\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.modPowInt = bnModPowInt;\nBigInteger.prototype.clone = bnClone;\nBigInteger.prototype.intValue = bnIntValue;\nBigInteger.prototype.byteValue = bnByteValue;\nBigInteger.prototype.shortValue = bnShortValue;\nBigInteger.prototype.signum = bnSigNum;\nBigInteger.prototype.toByteArray = bnToByteArray;\nBigInteger.prototype.toBuffer = bnToBuffer;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.min = bnMin;\nBigInteger.prototype.max = bnMax;\nBigInteger.prototype.and = bnAnd;\nBigInteger.prototype.or = bnOr;\nBigInteger.prototype.xor = bnXor;\nBigInteger.prototype.andNot = bnAndNot;\nBigInteger.prototype.not = bnNot;\nBigInteger.prototype.shiftLeft = bnShiftLeft;\nBigInteger.prototype.shiftRight = bnShiftRight;\nBigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\nBigInteger.prototype.bitCount = bnBitCount;\nBigInteger.prototype.testBit = bnTestBit;\nBigInteger.prototype.setBit = bnSetBit;\nBigInteger.prototype.clearBit = bnClearBit;\nBigInteger.prototype.flipBit = bnFlipBit;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.remainder = bnRemainder;\nBigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\nBigInteger.prototype.modPow = bnModPow;\nBigInteger.prototype.modInverse = bnModInverse;\nBigInteger.prototype.pow = bnPow;\nBigInteger.prototype.gcd = bnGCD;\nBigInteger.prototype.isProbablePrime = bnIsProbablePrime;\nBigInteger.int2char = int2char;\n\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\n\n// JSBN-specific extension\nBigInteger.prototype.square = bnSquare;\n\n//BigInteger interfaces not implemented in jsbn:\n\n//BigInteger(int signum, byte[] magnitude)\n//double doubleValue()\n//float floatValue()\n//int hashCode()\n//long longValue()\n//static BigInteger valueOf(long val)\n\nmodule.exports = BigInteger;","map":{"version":3,"names":["crypt","require","_","dbits","canary","j_lm","BigInteger","a","b","fromNumber","Buffer","isBuffer","fromBuffer","fromByteArray","fromString","nbi","am1","i","x","w","j","c","n","v","Math","floor","am2","xl","xh","l","h","m","am3","prototype","am","DB","DM","DV","BI_FP","FV","pow","F1","F2","BI_RM","BI_RC","Array","rr","vv","charCodeAt","int2char","charAt","intAt","s","bnpCopyTo","r","t","bnpFromInt","nbv","fromInt","bnpFromString","data","radix","unsigned","k","fromRadix","length","mi","sh","clamp","ZERO","subTo","bnpFromByteArray","bnpFromBuffer","bnpClamp","bnToString","negate","toString","toRadix","km","d","p","bnNegate","bnAbs","bnCompareTo","nbits","bnBitLength","bnpDLShiftTo","bnpDRShiftTo","max","bnpLShiftTo","bs","cbs","bm","ds","bnpRShiftTo","bnpSubTo","min","bnpMultiplyTo","abs","y","bnpSquareTo","bnpDivRemTo","q","pm","pt","copyTo","ts","ms","nsh","lShiftTo","ys","y0","yt","d1","d2","e","dlShiftTo","compareTo","ONE","qd","drShiftTo","rShiftTo","bnMod","divRemTo","Classic","cConvert","mod","cRevert","cReduce","cMulTo","multiplyTo","reduce","cSqrTo","squareTo","convert","revert","mulTo","sqrTo","bnpInvDigit","Montgomery","mp","invDigit","mpl","mph","um","mt2","montConvert","montRevert","montReduce","u0","montSqrTo","montMulTo","bnpIsEven","bnpExp","z","r2","g","bnModPowInt","isEven","exp","bnClone","bnIntValue","bnByteValue","bnShortValue","bnpChunkSize","LN2","log","bnSigNum","bnpToRadix","signum","cs","chunkSize","intValue","substr","bnpFromRadix","dMultiply","dAddOffset","bnpFromNumber","testBit","bitwiseTo","shiftLeft","op_or","isProbablePrime","bitLength","randomBytes","bnToByteArray","bnToBuffer","trimOrSize","res","toByteArray","slice","isNumber","padded","fill","copy","bnEquals","bnMin","bnMax","bnpBitwiseTo","op","f","op_and","bnAnd","bnOr","op_xor","bnXor","op_andnot","bnAndNot","bnNot","bnShiftLeft","bnShiftRight","lbit","bnGetLowestSetBit","cbit","bnBitCount","bnTestBit","bnpChangeBit","bnSetBit","changeBit","bnClearBit","bnFlipBit","bnpAddTo","bnAdd","addTo","bnSubtract","bnMultiply","bnSquare","bnDivide","bnRemainder","bnDivideAndRemainder","bnpDMultiply","bnpDAddOffset","NullExp","nNop","nMulTo","nSqrTo","bnPow","bnpMultiplyLowerTo","bnpMultiplyUpperTo","Barrett","q3","mu","divide","barrettConvert","barrettRevert","barrettReduce","multiplyUpperTo","multiplyLowerTo","barrettSqrTo","barrettMulTo","bnModPow","k1","g2","is1","bnGCD","clone","getLowestSetBit","bnpModInt","bnModInverse","ac","u","subtract","add","lowprimes","lplim","bnIsProbablePrime","modInt","millerRabin","bnpMillerRabin","n1","shiftRight","random","modPow","modPowInt","byteValue","shortValue","toBuffer","equals","and","or","xor","andNot","not","bitCount","setBit","clearBit","flipBit","multiply","remainder","divideAndRemainder","modInverse","gcd","square","module","exports"],"sources":["/Users/anandarunima/Documents/Arunima/Coursework/sauce_labs-fizzbuzzbash/fizzbuzzbass/components/node_modules/node-rsa/src/libs/jsbn.js"],"sourcesContent":["/*\n * Basic JavaScript BN library - subset useful for RSA encryption.\n * \n * Copyright (c) 2003-2005  Tom Wu\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND, \n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY \n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  \n *\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * In addition, the following condition applies:\n *\n * All redistributions must retain an intact copy of this copyright notice\n * and disclaimer.\n */\n\n/*\n * Added Node.js Buffers support\n * 2014 rzcoder\n */\n\nvar crypt = require('crypto');\nvar _ = require('../utils')._;\n\n// Bits per digit\nvar dbits;\n\n// JavaScript engine analysis\nvar canary = 0xdeadbeefcafe;\nvar j_lm = ((canary & 0xffffff) == 0xefcafe);\n\n// (public) Constructor\nfunction BigInteger(a, b) {\n    if (a != null) {\n        if (\"number\" == typeof a) {\n            this.fromNumber(a, b);\n        } else if (Buffer.isBuffer(a)) {\n            this.fromBuffer(a);\n        } else if (b == null && \"string\" != typeof a) {\n            this.fromByteArray(a);\n        } else {\n            this.fromString(a, b);\n        }\n    }\n}\n\n// return new, unset BigInteger\nfunction nbi() {\n    return new BigInteger(null);\n}\n\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i, x, w, j, c, n) {\n    while (--n >= 0) {\n        var v = x * this[i++] + w[j] + c;\n        c = Math.floor(v / 0x4000000);\n        w[j++] = v & 0x3ffffff;\n    }\n    return c;\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i, x, w, j, c, n) {\n    var xl = x & 0x7fff, xh = x >> 15;\n    while (--n >= 0) {\n        var l = this[i] & 0x7fff;\n        var h = this[i++] >> 15;\n        var m = xh * l + h * xl;\n        l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n        w[j++] = l & 0x3fffffff;\n    }\n    return c;\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i, x, w, j, c, n) {\n    var xl = x & 0x3fff, xh = x >> 14;\n    while (--n >= 0) {\n        var l = this[i] & 0x3fff;\n        var h = this[i++] >> 14;\n        var m = xh * l + h * xl;\n        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n        c = (l >> 28) + (m >> 14) + xh * h;\n        w[j++] = l & 0xfffffff;\n    }\n    return c;\n}\n\n// We need to select the fastest one that works in this environment. \n//if (j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n//\tBigInteger.prototype.am = am2;\n//\tdbits = 30;\n//} else if (j_lm && (navigator.appName != \"Netscape\")) {\n//\tBigInteger.prototype.am = am1;\n//\tdbits = 26;\n//} else { // Mozilla/Netscape seems to prefer am3\n//\tBigInteger.prototype.am = am3;\n//\tdbits = 28;\n//}\n\n// For node.js, we pick am3 with max dbits to 28.\nBigInteger.prototype.am = am3;\ndbits = 28;\n\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = ((1 << dbits) - 1);\nBigInteger.prototype.DV = (1 << dbits);\n\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP;\n\n// Digit conversions\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nvar BI_RC = new Array();\nvar rr, vv;\nrr = \"0\".charCodeAt(0);\nfor (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\nrr = \"a\".charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\nrr = \"A\".charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\nfunction int2char(n) {\n    return BI_RM.charAt(n);\n}\nfunction intAt(s, i) {\n    var c = BI_RC[s.charCodeAt(i)];\n    return (c == null) ? -1 : c;\n}\n\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n    for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];\n    r.t = this.t;\n    r.s = this.s;\n}\n\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n    this.t = 1;\n    this.s = (x < 0) ? -1 : 0;\n    if (x > 0) this[0] = x;\n    else if (x < -1) this[0] = x + DV;\n    else this.t = 0;\n}\n\n// return bigint initialized to value\nfunction nbv(i) {\n    var r = nbi();\n    r.fromInt(i);\n    return r;\n}\n\n// (protected) set from string and radix\nfunction bnpFromString(data, radix, unsigned) {\n    var k;\n    switch (radix) {\n        case 2:\n            k = 1;\n            break;\n        case 4:\n            k = 2;\n            break;\n        case 8:\n            k = 3;\n            break;\n        case 16:\n            k = 4;\n            break;\n        case 32:\n            k = 5;\n            break;\n        case 256:\n            k = 8;\n            break;\n        default:\n            this.fromRadix(data, radix);\n            return;\n    }\n\n    this.t = 0;\n    this.s = 0;\n\n    var i = data.length;\n    var mi = false;\n    var sh = 0;\n\n    while (--i >= 0) {\n        var x = (k == 8) ? data[i] & 0xff : intAt(data, i);\n        if (x < 0) {\n            if (data.charAt(i) == \"-\") mi = true;\n            continue;\n        }\n        mi = false;\n        if (sh === 0)\n            this[this.t++] = x;\n        else if (sh + k > this.DB) {\n            this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;\n            this[this.t++] = (x >> (this.DB - sh));\n        }\n        else\n            this[this.t - 1] |= x << sh;\n        sh += k;\n        if (sh >= this.DB) sh -= this.DB;\n    }\n    if ((!unsigned) && k == 8 && (data[0] & 0x80) != 0) {\n        this.s = -1;\n        if (sh > 0) this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;\n    }\n    this.clamp();\n    if (mi) BigInteger.ZERO.subTo(this, this);\n}\n\nfunction bnpFromByteArray(a, unsigned) {\n    this.fromString(a, 256, unsigned)\n}\n\nfunction bnpFromBuffer(a) {\n    this.fromString(a, 256, true)\n}\n\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n    var c = this.s & this.DM;\n    while (this.t > 0 && this[this.t - 1] == c) --this.t;\n}\n\n// (public) return string representation in given radix\nfunction bnToString(b) {\n    if (this.s < 0) return \"-\" + this.negate().toString(b);\n    var k;\n    if (b == 16) k = 4;\n    else if (b == 8) k = 3;\n    else if (b == 2) k = 1;\n    else if (b == 32) k = 5;\n    else if (b == 4) k = 2;\n    else return this.toRadix(b);\n    var km = (1 << k) - 1, d, m = false, r = \"\", i = this.t;\n    var p = this.DB - (i * this.DB) % k;\n    if (i-- > 0) {\n        if (p < this.DB && (d = this[i] >> p) > 0) {\n            m = true;\n            r = int2char(d);\n        }\n        while (i >= 0) {\n            if (p < k) {\n                d = (this[i] & ((1 << p) - 1)) << (k - p);\n                d |= this[--i] >> (p += this.DB - k);\n            }\n            else {\n                d = (this[i] >> (p -= k)) & km;\n                if (p <= 0) {\n                    p += this.DB;\n                    --i;\n                }\n            }\n            if (d > 0) m = true;\n            if (m) r += int2char(d);\n        }\n    }\n    return m ? r : \"0\";\n}\n\n// (public) -this\nfunction bnNegate() {\n    var r = nbi();\n    BigInteger.ZERO.subTo(this, r);\n    return r;\n}\n\n// (public) |this|\nfunction bnAbs() {\n    return (this.s < 0) ? this.negate() : this;\n}\n\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n    var r = this.s - a.s;\n    if (r != 0) return r;\n    var i = this.t;\n    r = i - a.t;\n    if (r != 0) return (this.s < 0) ? -r : r;\n    while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;\n    return 0;\n}\n\n// returns bit length of the integer x\nfunction nbits(x) {\n    var r = 1, t;\n    if ((t = x >>> 16) != 0) {\n        x = t;\n        r += 16;\n    }\n    if ((t = x >> 8) != 0) {\n        x = t;\n        r += 8;\n    }\n    if ((t = x >> 4) != 0) {\n        x = t;\n        r += 4;\n    }\n    if ((t = x >> 2) != 0) {\n        x = t;\n        r += 2;\n    }\n    if ((t = x >> 1) != 0) {\n        x = t;\n        r += 1;\n    }\n    return r;\n}\n\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n    if (this.t <= 0) return 0;\n    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));\n}\n\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n, r) {\n    var i;\n    for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];\n    for (i = n - 1; i >= 0; --i) r[i] = 0;\n    r.t = this.t + n;\n    r.s = this.s;\n}\n\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n, r) {\n    for (var i = n; i < this.t; ++i) r[i - n] = this[i];\n    r.t = Math.max(this.t - n, 0);\n    r.s = this.s;\n}\n\n// (protected) r = this << n\nfunction bnpLShiftTo(n, r) {\n    var bs = n % this.DB;\n    var cbs = this.DB - bs;\n    var bm = (1 << cbs) - 1;\n    var ds = Math.floor(n / this.DB), c = (this.s << bs) & this.DM, i;\n    for (i = this.t - 1; i >= 0; --i) {\n        r[i + ds + 1] = (this[i] >> cbs) | c;\n        c = (this[i] & bm) << bs;\n    }\n    for (i = ds - 1; i >= 0; --i) r[i] = 0;\n    r[ds] = c;\n    r.t = this.t + ds + 1;\n    r.s = this.s;\n    r.clamp();\n}\n\n// (protected) r = this >> n\nfunction bnpRShiftTo(n, r) {\n    r.s = this.s;\n    var ds = Math.floor(n / this.DB);\n    if (ds >= this.t) {\n        r.t = 0;\n        return;\n    }\n    var bs = n % this.DB;\n    var cbs = this.DB - bs;\n    var bm = (1 << bs) - 1;\n    r[0] = this[ds] >> bs;\n    for (var i = ds + 1; i < this.t; ++i) {\n        r[i - ds - 1] |= (this[i] & bm) << cbs;\n        r[i - ds] = this[i] >> bs;\n    }\n    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;\n    r.t = this.t - ds;\n    r.clamp();\n}\n\n// (protected) r = this - a\nfunction bnpSubTo(a, r) {\n    var i = 0, c = 0, m = Math.min(a.t, this.t);\n    while (i < m) {\n        c += this[i] - a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n    }\n    if (a.t < this.t) {\n        c -= a.s;\n        while (i < this.t) {\n            c += this[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += this.s;\n    }\n    else {\n        c += this.s;\n        while (i < a.t) {\n            c -= a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c -= a.s;\n    }\n    r.s = (c < 0) ? -1 : 0;\n    if (c < -1) r[i++] = this.DV + c;\n    else if (c > 0) r[i++] = c;\n    r.t = i;\n    r.clamp();\n}\n\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a, r) {\n    var x = this.abs(), y = a.abs();\n    var i = x.t;\n    r.t = i + y.t;\n    while (--i >= 0) r[i] = 0;\n    for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n    r.s = 0;\n    r.clamp();\n    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);\n}\n\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n    var x = this.abs();\n    var i = r.t = 2 * x.t;\n    while (--i >= 0) r[i] = 0;\n    for (i = 0; i < x.t - 1; ++i) {\n        var c = x.am(i, x[i], r, 2 * i, 0, 1);\n        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n            r[i + x.t] -= x.DV;\n            r[i + x.t + 1] = 1;\n        }\n    }\n    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n    r.s = 0;\n    r.clamp();\n}\n\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m, q, r) {\n    var pm = m.abs();\n    if (pm.t <= 0) return;\n    var pt = this.abs();\n    if (pt.t < pm.t) {\n        if (q != null) q.fromInt(0);\n        if (r != null) this.copyTo(r);\n        return;\n    }\n    if (r == null) r = nbi();\n    var y = nbi(), ts = this.s, ms = m.s;\n    var nsh = this.DB - nbits(pm[pm.t - 1]);\t// normalize modulus\n    if (nsh > 0) {\n        pm.lShiftTo(nsh, y);\n        pt.lShiftTo(nsh, r);\n    }\n    else {\n        pm.copyTo(y);\n        pt.copyTo(r);\n    }\n    var ys = y.t;\n    var y0 = y[ys - 1];\n    if (y0 === 0) return;\n    var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);\n    var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;\n    var i = r.t, j = i - ys, t = (q == null) ? nbi() : q;\n    y.dlShiftTo(j, t);\n    if (r.compareTo(t) >= 0) {\n        r[r.t++] = 1;\n        r.subTo(t, r);\n    }\n    BigInteger.ONE.dlShiftTo(ys, t);\n    t.subTo(y, y);\t// \"negative\" y so we can replace sub with am later\n    while (y.t < ys) y[y.t++] = 0;\n    while (--j >= 0) {\n        // Estimate quotient digit\n        var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\t// Try it out\n            y.dlShiftTo(j, t);\n            r.subTo(t, r);\n            while (r[i] < --qd) r.subTo(t, r);\n        }\n    }\n    if (q != null) {\n        r.drShiftTo(ys, q);\n        if (ts != ms) BigInteger.ZERO.subTo(q, q);\n    }\n    r.t = ys;\n    r.clamp();\n    if (nsh > 0) r.rShiftTo(nsh, r);\t// Denormalize remainder\n    if (ts < 0) BigInteger.ZERO.subTo(r, r);\n}\n\n// (public) this mod a\nfunction bnMod(a) {\n    var r = nbi();\n    this.abs().divRemTo(a, null, r);\n    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n    return r;\n}\n\n// Modular reduction using \"classic\" algorithm\nfunction Classic(m) {\n    this.m = m;\n}\nfunction cConvert(x) {\n    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n    else return x;\n}\nfunction cRevert(x) {\n    return x;\n}\nfunction cReduce(x) {\n    x.divRemTo(this.m, null, x);\n}\nfunction cMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n}\nfunction cSqrTo(x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n}\n\nClassic.prototype.convert = cConvert;\nClassic.prototype.revert = cRevert;\nClassic.prototype.reduce = cReduce;\nClassic.prototype.mulTo = cMulTo;\nClassic.prototype.sqrTo = cSqrTo;\n\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n    if (this.t < 1) return 0;\n    var x = this[0];\n    if ((x & 1) === 0) return 0;\n    var y = x & 3;\t\t// y == 1/x mod 2^2\n    y = (y * (2 - (x & 0xf) * y)) & 0xf;\t// y == 1/x mod 2^4\n    y = (y * (2 - (x & 0xff) * y)) & 0xff;\t// y == 1/x mod 2^8\n    y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff;\t// y == 1/x mod 2^16\n    // last step - calculate inverse mod DV directly;\n    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n    y = (y * (2 - x * y % this.DV)) % this.DV;\t\t// y == 1/x mod 2^dbits\n    // we really want the negative inverse, and -DV < y < DV\n    return (y > 0) ? this.DV - y : -y;\n}\n\n// Montgomery reduction\nfunction Montgomery(m) {\n    this.m = m;\n    this.mp = m.invDigit();\n    this.mpl = this.mp & 0x7fff;\n    this.mph = this.mp >> 15;\n    this.um = (1 << (m.DB - 15)) - 1;\n    this.mt2 = 2 * m.t;\n}\n\n// xR mod m\nfunction montConvert(x) {\n    var r = nbi();\n    x.abs().dlShiftTo(this.m.t, r);\n    r.divRemTo(this.m, null, r);\n    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n    return r;\n}\n\n// x/R mod m\nfunction montRevert(x) {\n    var r = nbi();\n    x.copyTo(r);\n    this.reduce(r);\n    return r;\n}\n\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n    while (x.t <= this.mt2)\t// pad x so am has enough room later\n        x[x.t++] = 0;\n    for (var i = 0; i < this.m.t; ++i) {\n        // faster way of calculating u0 = x[i]*mp mod DV\n        var j = x[i] & 0x7fff;\n        var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;\n        // use am to combine the multiply-shift-add into one call\n        j = i + this.m.t;\n        x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n        // propagate carry\n        while (x[j] >= x.DV) {\n            x[j] -= x.DV;\n            x[++j]++;\n        }\n    }\n    x.clamp();\n    x.drShiftTo(this.m.t, x);\n    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n}\n\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n}\n\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n}\n\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo;\n\n// (protected) true iff this is even\nfunction bnpIsEven() {\n    return ((this.t > 0) ? (this[0] & 1) : this.s) === 0;\n}\n\n// (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\nfunction bnpExp(e, z) {\n    if (e > 0xffffffff || e < 1) return BigInteger.ONE;\n    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;\n    g.copyTo(r);\n    while (--i >= 0) {\n        z.sqrTo(r, r2);\n        if ((e & (1 << i)) > 0) z.mulTo(r2, g, r);\n        else {\n            var t = r;\n            r = r2;\n            r2 = t;\n        }\n    }\n    return z.revert(r);\n}\n\n// (public) this^e % m, 0 <= e < 2^32\nfunction bnModPowInt(e, m) {\n    var z;\n    if (e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);\n    return this.exp(e, z);\n}\n\n// Copyright (c) 2005-2009  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n\n// Extended JavaScript BN functions, required for RSA private ops.\n\n// Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n// Version 1.2: square() API, isProbablePrime fix\n\n//(public)\nfunction bnClone() {\n    var r = nbi();\n    this.copyTo(r);\n    return r;\n}\n\n//(public) return value as integer\nfunction bnIntValue() {\n    if (this.s < 0) {\n        if (this.t == 1) return this[0] - this.DV;\n        else if (this.t === 0) return -1;\n    }\n    else if (this.t == 1) return this[0];\n    else if (this.t === 0) return 0;\n// assumes 16 < DB < 32\n    return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];\n}\n\n//(public) return value as byte\nfunction bnByteValue() {\n    return (this.t == 0) ? this.s : (this[0] << 24) >> 24;\n}\n\n//(public) return value as short (assumes DB>=16)\nfunction bnShortValue() {\n    return (this.t == 0) ? this.s : (this[0] << 16) >> 16;\n}\n\n//(protected) return x s.t. r^x < DV\nfunction bnpChunkSize(r) {\n    return Math.floor(Math.LN2 * this.DB / Math.log(r));\n}\n\n//(public) 0 if this === 0, 1 if this > 0\nfunction bnSigNum() {\n    if (this.s < 0) return -1;\n    else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\n    else return 1;\n}\n\n//(protected) convert to radix string\nfunction bnpToRadix(b) {\n    if (b == null) b = 10;\n    if (this.signum() === 0 || b < 2 || b > 36) return \"0\";\n    var cs = this.chunkSize(b);\n    var a = Math.pow(b, cs);\n    var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\n    this.divRemTo(d, y, z);\n    while (y.signum() > 0) {\n        r = (a + z.intValue()).toString(b).substr(1) + r;\n        y.divRemTo(d, y, z);\n    }\n    return z.intValue().toString(b) + r;\n}\n\n//(protected) convert from radix string\nfunction bnpFromRadix(s, b) {\n    this.fromInt(0);\n    if (b == null) b = 10;\n    var cs = this.chunkSize(b);\n    var d = Math.pow(b, cs), mi = false, j = 0, w = 0;\n    for (var i = 0; i < s.length; ++i) {\n        var x = intAt(s, i);\n        if (x < 0) {\n            if (s.charAt(i) == \"-\" && this.signum() === 0) mi = true;\n            continue;\n        }\n        w = b * w + x;\n        if (++j >= cs) {\n            this.dMultiply(d);\n            this.dAddOffset(w, 0);\n            j = 0;\n            w = 0;\n        }\n    }\n    if (j > 0) {\n        this.dMultiply(Math.pow(b, j));\n        this.dAddOffset(w, 0);\n    }\n    if (mi) BigInteger.ZERO.subTo(this, this);\n}\n\n//(protected) alternate constructor\nfunction bnpFromNumber(a, b) {\n    if (\"number\" == typeof b) {\n        // new BigInteger(int,int,RNG)\n        if (a < 2) this.fromInt(1);\n        else {\n            this.fromNumber(a);\n            if (!this.testBit(a - 1))\t// force MSB set\n                this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n            if (this.isEven()) this.dAddOffset(1, 0); // force odd\n            while (!this.isProbablePrime(b)) {\n                this.dAddOffset(2, 0);\n                if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n            }\n        }\n    } else {\n        // new BigInteger(int,RNG)\n        var x = crypt.randomBytes((a >> 3) + 1)\n        var t = a & 7;\n\n        if (t > 0)\n            x[0] &= ((1 << t) - 1);\n        else\n            x[0] = 0;\n\n        this.fromByteArray(x);\n    }\n}\n\n//(public) convert to bigendian byte array\nfunction bnToByteArray() {\n    var i = this.t, r = new Array();\n    r[0] = this.s;\n    var p = this.DB - (i * this.DB) % 8, d, k = 0;\n    if (i-- > 0) {\n        if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p)\n            r[k++] = d | (this.s << (this.DB - p));\n        while (i >= 0) {\n            if (p < 8) {\n                d = (this[i] & ((1 << p) - 1)) << (8 - p);\n                d |= this[--i] >> (p += this.DB - 8);\n            }\n            else {\n                d = (this[i] >> (p -= 8)) & 0xff;\n                if (p <= 0) {\n                    p += this.DB;\n                    --i;\n                }\n            }\n            if ((d & 0x80) != 0) d |= -256;\n            if (k === 0 && (this.s & 0x80) != (d & 0x80)) ++k;\n            if (k > 0 || d != this.s) r[k++] = d;\n        }\n    }\n    return r;\n}\n\n/**\n * return Buffer object\n * @param trim {boolean} slice buffer if first element == 0\n * @returns {Buffer}\n */\nfunction bnToBuffer(trimOrSize) {\n    var res = new Buffer(this.toByteArray());\n    if (trimOrSize === true && res[0] === 0) {\n        res = res.slice(1);\n    } else if (_.isNumber(trimOrSize)) {\n        if (res.length > trimOrSize) {\n            for (var i = 0; i < res.length - trimOrSize; i++) {\n                if (res[i] !== 0) {\n                    return null;\n                }\n            }\n            return res.slice(res.length - trimOrSize);\n        } else if (res.length < trimOrSize) {\n            var padded = new Buffer(trimOrSize);\n            padded.fill(0, 0, trimOrSize - res.length);\n            res.copy(padded, trimOrSize - res.length);\n            return padded;\n        }\n    }\n    return res;\n}\n\nfunction bnEquals(a) {\n    return (this.compareTo(a) == 0);\n}\nfunction bnMin(a) {\n    return (this.compareTo(a) < 0) ? this : a;\n}\nfunction bnMax(a) {\n    return (this.compareTo(a) > 0) ? this : a;\n}\n\n//(protected) r = this op a (bitwise)\nfunction bnpBitwiseTo(a, op, r) {\n    var i, f, m = Math.min(a.t, this.t);\n    for (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);\n    if (a.t < this.t) {\n        f = a.s & this.DM;\n        for (i = m; i < this.t; ++i) r[i] = op(this[i], f);\n        r.t = this.t;\n    }\n    else {\n        f = this.s & this.DM;\n        for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);\n        r.t = a.t;\n    }\n    r.s = op(this.s, a.s);\n    r.clamp();\n}\n\n//(public) this & a\nfunction op_and(x, y) {\n    return x & y;\n}\nfunction bnAnd(a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_and, r);\n    return r;\n}\n\n//(public) this | a\nfunction op_or(x, y) {\n    return x | y;\n}\nfunction bnOr(a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_or, r);\n    return r;\n}\n\n//(public) this ^ a\nfunction op_xor(x, y) {\n    return x ^ y;\n}\nfunction bnXor(a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_xor, r);\n    return r;\n}\n\n//(public) this & ~a\nfunction op_andnot(x, y) {\n    return x & ~y;\n}\nfunction bnAndNot(a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_andnot, r);\n    return r;\n}\n\n//(public) ~this\nfunction bnNot() {\n    var r = nbi();\n    for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];\n    r.t = this.t;\n    r.s = ~this.s;\n    return r;\n}\n\n//(public) this << n\nfunction bnShiftLeft(n) {\n    var r = nbi();\n    if (n < 0) this.rShiftTo(-n, r); else this.lShiftTo(n, r);\n    return r;\n}\n\n//(public) this >> n\nfunction bnShiftRight(n) {\n    var r = nbi();\n    if (n < 0) this.lShiftTo(-n, r); else this.rShiftTo(n, r);\n    return r;\n}\n\n//return index of lowest 1-bit in x, x < 2^31\nfunction lbit(x) {\n    if (x === 0) return -1;\n    var r = 0;\n    if ((x & 0xffff) === 0) {\n        x >>= 16;\n        r += 16;\n    }\n    if ((x & 0xff) === 0) {\n        x >>= 8;\n        r += 8;\n    }\n    if ((x & 0xf) === 0) {\n        x >>= 4;\n        r += 4;\n    }\n    if ((x & 3) === 0) {\n        x >>= 2;\n        r += 2;\n    }\n    if ((x & 1) === 0) ++r;\n    return r;\n}\n\n//(public) returns index of lowest 1-bit (or -1 if none)\nfunction bnGetLowestSetBit() {\n    for (var i = 0; i < this.t; ++i)\n        if (this[i] != 0) return i * this.DB + lbit(this[i]);\n    if (this.s < 0) return this.t * this.DB;\n    return -1;\n}\n\n//return number of 1 bits in x\nfunction cbit(x) {\n    var r = 0;\n    while (x != 0) {\n        x &= x - 1;\n        ++r;\n    }\n    return r;\n}\n\n//(public) return number of set bits\nfunction bnBitCount() {\n    var r = 0, x = this.s & this.DM;\n    for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);\n    return r;\n}\n\n//(public) true iff nth bit is set\nfunction bnTestBit(n) {\n    var j = Math.floor(n / this.DB);\n    if (j >= this.t) return (this.s != 0);\n    return ((this[j] & (1 << (n % this.DB))) != 0);\n}\n\n//(protected) this op (1<<n)\nfunction bnpChangeBit(n, op) {\n    var r = BigInteger.ONE.shiftLeft(n);\n    this.bitwiseTo(r, op, r);\n    return r;\n}\n\n//(public) this | (1<<n)\nfunction bnSetBit(n) {\n    return this.changeBit(n, op_or);\n}\n\n//(public) this & ~(1<<n)\nfunction bnClearBit(n) {\n    return this.changeBit(n, op_andnot);\n}\n\n//(public) this ^ (1<<n)\nfunction bnFlipBit(n) {\n    return this.changeBit(n, op_xor);\n}\n\n//(protected) r = this + a\nfunction bnpAddTo(a, r) {\n    var i = 0, c = 0, m = Math.min(a.t, this.t);\n    while (i < m) {\n        c += this[i] + a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n    }\n    if (a.t < this.t) {\n        c += a.s;\n        while (i < this.t) {\n            c += this[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += this.s;\n    }\n    else {\n        c += this.s;\n        while (i < a.t) {\n            c += a[i];\n            r[i++] = c & this.DM;\n            c >>= this.DB;\n        }\n        c += a.s;\n    }\n    r.s = (c < 0) ? -1 : 0;\n    if (c > 0) r[i++] = c;\n    else if (c < -1) r[i++] = this.DV + c;\n    r.t = i;\n    r.clamp();\n}\n\n//(public) this + a\nfunction bnAdd(a) {\n    var r = nbi();\n    this.addTo(a, r);\n    return r;\n}\n\n//(public) this - a\nfunction bnSubtract(a) {\n    var r = nbi();\n    this.subTo(a, r);\n    return r;\n}\n\n//(public) this * a\nfunction bnMultiply(a) {\n    var r = nbi();\n    this.multiplyTo(a, r);\n    return r;\n}\n\n// (public) this^2\nfunction bnSquare() {\n    var r = nbi();\n    this.squareTo(r);\n    return r;\n}\n\n//(public) this / a\nfunction bnDivide(a) {\n    var r = nbi();\n    this.divRemTo(a, r, null);\n    return r;\n}\n\n//(public) this % a\nfunction bnRemainder(a) {\n    var r = nbi();\n    this.divRemTo(a, null, r);\n    return r;\n}\n\n//(public) [this/a,this%a]\nfunction bnDivideAndRemainder(a) {\n    var q = nbi(), r = nbi();\n    this.divRemTo(a, q, r);\n    return new Array(q, r);\n}\n\n//(protected) this *= n, this >= 0, 1 < n < DV\nfunction bnpDMultiply(n) {\n    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n    ++this.t;\n    this.clamp();\n}\n\n//(protected) this += n << w words, this >= 0\nfunction bnpDAddOffset(n, w) {\n    if (n === 0) return;\n    while (this.t <= w) this[this.t++] = 0;\n    this[w] += n;\n    while (this[w] >= this.DV) {\n        this[w] -= this.DV;\n        if (++w >= this.t) this[this.t++] = 0;\n        ++this[w];\n    }\n}\n\n//A \"null\" reducer\nfunction NullExp() {\n}\nfunction nNop(x) {\n    return x;\n}\nfunction nMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n}\nfunction nSqrTo(x, r) {\n    x.squareTo(r);\n}\n\nNullExp.prototype.convert = nNop;\nNullExp.prototype.revert = nNop;\nNullExp.prototype.mulTo = nMulTo;\nNullExp.prototype.sqrTo = nSqrTo;\n\n//(public) this^e\nfunction bnPow(e) {\n    return this.exp(e, new NullExp());\n}\n\n//(protected) r = lower n words of \"this * a\", a.t <= n\n//\"this\" should be the larger one if appropriate.\nfunction bnpMultiplyLowerTo(a, n, r) {\n    var i = Math.min(this.t + a.t, n);\n    r.s = 0; // assumes a,this >= 0\n    r.t = i;\n    while (i > 0) r[--i] = 0;\n    var j;\n    for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n    for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);\n    r.clamp();\n}\n\n//(protected) r = \"this * a\" without lower n words, n > 0\n//\"this\" should be the larger one if appropriate.\nfunction bnpMultiplyUpperTo(a, n, r) {\n    --n;\n    var i = r.t = this.t + a.t - n;\n    r.s = 0; // assumes a,this >= 0\n    while (--i >= 0) r[i] = 0;\n    for (i = Math.max(n - this.t, 0); i < a.t; ++i)\n        r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n    r.clamp();\n    r.drShiftTo(1, r);\n}\n\n//Barrett modular reduction\nfunction Barrett(m) {\n// setup Barrett\n    this.r2 = nbi();\n    this.q3 = nbi();\n    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n    this.mu = this.r2.divide(m);\n    this.m = m;\n}\n\nfunction barrettConvert(x) {\n    if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);\n    else if (x.compareTo(this.m) < 0) return x;\n    else {\n        var r = nbi();\n        x.copyTo(r);\n        this.reduce(r);\n        return r;\n    }\n}\n\nfunction barrettRevert(x) {\n    return x;\n}\n\n//x = x mod m (HAC 14.42)\nfunction barrettReduce(x) {\n    x.drShiftTo(this.m.t - 1, this.r2);\n    if (x.t > this.m.t + 1) {\n        x.t = this.m.t + 1;\n        x.clamp();\n    }\n    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n    while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);\n    x.subTo(this.r2, x);\n    while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n}\n\n//r = x^2 mod m; x != r\nfunction barrettSqrTo(x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n}\n\n//r = x*y mod m; x,y != r\nfunction barrettMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n}\n\nBarrett.prototype.convert = barrettConvert;\nBarrett.prototype.revert = barrettRevert;\nBarrett.prototype.reduce = barrettReduce;\nBarrett.prototype.mulTo = barrettMulTo;\nBarrett.prototype.sqrTo = barrettSqrTo;\n\n//(public) this^e % m (HAC 14.85)\nfunction bnModPow(e, m) {\n    var i = e.bitLength(), k, r = nbv(1), z;\n    if (i <= 0) return r;\n    else if (i < 18) k = 1;\n    else if (i < 48) k = 3;\n    else if (i < 144) k = 4;\n    else if (i < 768) k = 5;\n    else k = 6;\n    if (i < 8)\n        z = new Classic(m);\n    else if (m.isEven())\n        z = new Barrett(m);\n    else\n        z = new Montgomery(m);\n\n// precomputation\n    var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;\n    g[1] = z.convert(this);\n    if (k > 1) {\n        var g2 = nbi();\n        z.sqrTo(g[1], g2);\n        while (n <= km) {\n            g[n] = nbi();\n            z.mulTo(g2, g[n - 2], g[n]);\n            n += 2;\n        }\n    }\n\n    var j = e.t - 1, w, is1 = true, r2 = nbi(), t;\n    i = nbits(e[j]) - 1;\n    while (j >= 0) {\n        if (i >= k1) w = (e[j] >> (i - k1)) & km;\n        else {\n            w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);\n            if (j > 0) w |= e[j - 1] >> (this.DB + i - k1);\n        }\n\n        n = k;\n        while ((w & 1) === 0) {\n            w >>= 1;\n            --n;\n        }\n        if ((i -= n) < 0) {\n            i += this.DB;\n            --j;\n        }\n        if (is1) {\t// ret == 1, don't bother squaring or multiplying it\n            g[w].copyTo(r);\n            is1 = false;\n        }\n        else {\n            while (n > 1) {\n                z.sqrTo(r, r2);\n                z.sqrTo(r2, r);\n                n -= 2;\n            }\n            if (n > 0) z.sqrTo(r, r2); else {\n                t = r;\n                r = r2;\n                r2 = t;\n            }\n            z.mulTo(r2, g[w], r);\n        }\n\n        while (j >= 0 && (e[j] & (1 << i)) === 0) {\n            z.sqrTo(r, r2);\n            t = r;\n            r = r2;\n            r2 = t;\n            if (--i < 0) {\n                i = this.DB - 1;\n                --j;\n            }\n        }\n    }\n    return z.revert(r);\n}\n\n//(public) gcd(this,a) (HAC 14.54)\nfunction bnGCD(a) {\n    var x = (this.s < 0) ? this.negate() : this.clone();\n    var y = (a.s < 0) ? a.negate() : a.clone();\n    if (x.compareTo(y) < 0) {\n        var t = x;\n        x = y;\n        y = t;\n    }\n    var i = x.getLowestSetBit(), g = y.getLowestSetBit();\n    if (g < 0) return x;\n    if (i < g) g = i;\n    if (g > 0) {\n        x.rShiftTo(g, x);\n        y.rShiftTo(g, y);\n    }\n    while (x.signum() > 0) {\n        if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);\n        if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);\n        if (x.compareTo(y) >= 0) {\n            x.subTo(y, x);\n            x.rShiftTo(1, x);\n        }\n        else {\n            y.subTo(x, y);\n            y.rShiftTo(1, y);\n        }\n    }\n    if (g > 0) y.lShiftTo(g, y);\n    return y;\n}\n\n//(protected) this % n, n < 2^26\nfunction bnpModInt(n) {\n    if (n <= 0) return 0;\n    var d = this.DV % n, r = (this.s < 0) ? n - 1 : 0;\n    if (this.t > 0)\n        if (d === 0) r = this[0] % n;\n        else for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;\n    return r;\n}\n\n//(public) 1/this % m (HAC 14.61)\nfunction bnModInverse(m) {\n    var ac = m.isEven();\n    if ((this.isEven() && ac) || m.signum() === 0) return BigInteger.ZERO;\n    var u = m.clone(), v = this.clone();\n    var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\n    while (u.signum() != 0) {\n        while (u.isEven()) {\n            u.rShiftTo(1, u);\n            if (ac) {\n                if (!a.isEven() || !b.isEven()) {\n                    a.addTo(this, a);\n                    b.subTo(m, b);\n                }\n                a.rShiftTo(1, a);\n            }\n            else if (!b.isEven()) b.subTo(m, b);\n            b.rShiftTo(1, b);\n        }\n        while (v.isEven()) {\n            v.rShiftTo(1, v);\n            if (ac) {\n                if (!c.isEven() || !d.isEven()) {\n                    c.addTo(this, c);\n                    d.subTo(m, d);\n                }\n                c.rShiftTo(1, c);\n            }\n            else if (!d.isEven()) d.subTo(m, d);\n            d.rShiftTo(1, d);\n        }\n        if (u.compareTo(v) >= 0) {\n            u.subTo(v, u);\n            if (ac) a.subTo(c, a);\n            b.subTo(d, b);\n        }\n        else {\n            v.subTo(u, v);\n            if (ac) c.subTo(a, c);\n            d.subTo(b, d);\n        }\n    }\n    if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n    if (d.compareTo(m) >= 0) return d.subtract(m);\n    if (d.signum() < 0) d.addTo(m, d); else return d;\n    if (d.signum() < 0) return d.add(m); else return d;\n}\n\nvar lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\nvar lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\n\n//(public) test primality with certainty >= 1-.5^t\nfunction bnIsProbablePrime(t) {\n    var i, x = this.abs();\n    if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\n        for (i = 0; i < lowprimes.length; ++i)\n            if (x[0] == lowprimes[i]) return true;\n        return false;\n    }\n    if (x.isEven()) return false;\n    i = 1;\n    while (i < lowprimes.length) {\n        var m = lowprimes[i], j = i + 1;\n        while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n        m = x.modInt(m);\n        while (i < j) if (m % lowprimes[i++] === 0) return false;\n    }\n    return x.millerRabin(t);\n}\n\n//(protected) true if probably prime (HAC 4.24, Miller-Rabin)\nfunction bnpMillerRabin(t) {\n    var n1 = this.subtract(BigInteger.ONE);\n    var k = n1.getLowestSetBit();\n    if (k <= 0) return false;\n    var r = n1.shiftRight(k);\n    t = (t + 1) >> 1;\n    if (t > lowprimes.length) t = lowprimes.length;\n    var a = nbi();\n    for (var i = 0; i < t; ++i) {\n        //Pick bases at random, instead of starting at 2\n        a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n        var y = a.modPow(r, this);\n        if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n            var j = 1;\n            while (j++ < k && y.compareTo(n1) != 0) {\n                y = y.modPowInt(2, this);\n                if (y.compareTo(BigInteger.ONE) === 0) return false;\n            }\n            if (y.compareTo(n1) != 0) return false;\n        }\n    }\n    return true;\n}\n\n// protected\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.fromByteArray = bnpFromByteArray;\nBigInteger.prototype.fromBuffer = bnpFromBuffer;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.isEven = bnpIsEven;\nBigInteger.prototype.exp = bnpExp;\n\nBigInteger.prototype.chunkSize = bnpChunkSize;\nBigInteger.prototype.toRadix = bnpToRadix;\nBigInteger.prototype.fromRadix = bnpFromRadix;\nBigInteger.prototype.fromNumber = bnpFromNumber;\nBigInteger.prototype.bitwiseTo = bnpBitwiseTo;\nBigInteger.prototype.changeBit = bnpChangeBit;\nBigInteger.prototype.addTo = bnpAddTo;\nBigInteger.prototype.dMultiply = bnpDMultiply;\nBigInteger.prototype.dAddOffset = bnpDAddOffset;\nBigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\nBigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\nBigInteger.prototype.modInt = bnpModInt;\nBigInteger.prototype.millerRabin = bnpMillerRabin;\n\n\n// public\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.modPowInt = bnModPowInt;\n\nBigInteger.prototype.clone = bnClone;\nBigInteger.prototype.intValue = bnIntValue;\nBigInteger.prototype.byteValue = bnByteValue;\nBigInteger.prototype.shortValue = bnShortValue;\nBigInteger.prototype.signum = bnSigNum;\nBigInteger.prototype.toByteArray = bnToByteArray;\nBigInteger.prototype.toBuffer = bnToBuffer;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.min = bnMin;\nBigInteger.prototype.max = bnMax;\nBigInteger.prototype.and = bnAnd;\nBigInteger.prototype.or = bnOr;\nBigInteger.prototype.xor = bnXor;\nBigInteger.prototype.andNot = bnAndNot;\nBigInteger.prototype.not = bnNot;\nBigInteger.prototype.shiftLeft = bnShiftLeft;\nBigInteger.prototype.shiftRight = bnShiftRight;\nBigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\nBigInteger.prototype.bitCount = bnBitCount;\nBigInteger.prototype.testBit = bnTestBit;\nBigInteger.prototype.setBit = bnSetBit;\nBigInteger.prototype.clearBit = bnClearBit;\nBigInteger.prototype.flipBit = bnFlipBit;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.remainder = bnRemainder;\nBigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\nBigInteger.prototype.modPow = bnModPow;\nBigInteger.prototype.modInverse = bnModInverse;\nBigInteger.prototype.pow = bnPow;\nBigInteger.prototype.gcd = bnGCD;\nBigInteger.prototype.isProbablePrime = bnIsProbablePrime;\nBigInteger.int2char = int2char;\n\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\n\n// JSBN-specific extension\nBigInteger.prototype.square = bnSquare;\n\n//BigInteger interfaces not implemented in jsbn:\n\n//BigInteger(int signum, byte[] magnitude)\n//double doubleValue()\n//float floatValue()\n//int hashCode()\n//long longValue()\n//static BigInteger valueOf(long val)\n\nmodule.exports = BigInteger;"],"mappings":"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G,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}