{"ast":null,"code":"//\n//\n//\n\n'use strict';\n\nvar defs = require('./defs');\nvar Promise = require('bluebird');\nvar inherits = require('util').inherits;\nvar EventEmitter = require('events').EventEmitter;\nvar BaseChannel = require('./channel').BaseChannel;\nvar acceptMessage = require('./channel').acceptMessage;\nvar Args = require('./api_args');\nfunction ChannelModel(connection) {\n  if (!(this instanceof ChannelModel)) return new ChannelModel(connection);\n  EventEmitter.call(this);\n  this.connection = connection;\n  var self = this;\n  ['error', 'close', 'blocked', 'unblocked'].forEach(function (ev) {\n    connection.on(ev, self.emit.bind(self, ev));\n  });\n}\ninherits(ChannelModel, EventEmitter);\nmodule.exports.ChannelModel = ChannelModel;\nvar CM = ChannelModel.prototype;\nCM.close = function () {\n  return Promise.fromCallback(this.connection.close.bind(this.connection));\n};\n\n// Channels\n\nfunction Channel(connection) {\n  BaseChannel.call(this, connection);\n  this.on('delivery', this.handleDelivery.bind(this));\n  this.on('cancel', this.handleCancel.bind(this));\n}\ninherits(Channel, BaseChannel);\nmodule.exports.Channel = Channel;\nCM.createChannel = function () {\n  var c = new Channel(this.connection);\n  return c.open().then(function (openOk) {\n    return c;\n  });\n};\nvar C = Channel.prototype;\n\n// An RPC that returns a 'proper' promise, which resolves to just the\n// response's fields; this is intended to be suitable for implementing\n// API procedures.\nC.rpc = function (method, fields, expect) {\n  var self = this;\n  return Promise.fromCallback(function (cb) {\n    return self._rpc(method, fields, expect, cb);\n  }).then(function (f) {\n    return f.fields;\n  });\n};\n\n// Do the remarkably simple channel open handshake\nC.open = function () {\n  return Promise.try(this.allocate.bind(this)).then(function (ch) {\n    return ch.rpc(defs.ChannelOpen, {\n      outOfBand: \"\"\n    }, defs.ChannelOpenOk);\n  });\n};\nC.close = function () {\n  var self = this;\n  return Promise.fromCallback(function (cb) {\n    return self.closeBecause(\"Goodbye\", defs.constants.REPLY_SUCCESS, cb);\n  });\n};\n\n// === Public API, declaring queues and stuff ===\n\nC.assertQueue = function (queue, options) {\n  return this.rpc(defs.QueueDeclare, Args.assertQueue(queue, options), defs.QueueDeclareOk);\n};\nC.checkQueue = function (queue) {\n  return this.rpc(defs.QueueDeclare, Args.checkQueue(queue), defs.QueueDeclareOk);\n};\nC.deleteQueue = function (queue, options) {\n  return this.rpc(defs.QueueDelete, Args.deleteQueue(queue, options), defs.QueueDeleteOk);\n};\nC.purgeQueue = function (queue) {\n  return this.rpc(defs.QueuePurge, Args.purgeQueue(queue), defs.QueuePurgeOk);\n};\nC.bindQueue = function (queue, source, pattern, argt) {\n  return this.rpc(defs.QueueBind, Args.bindQueue(queue, source, pattern, argt), defs.QueueBindOk);\n};\nC.unbindQueue = function (queue, source, pattern, argt) {\n  return this.rpc(defs.QueueUnbind, Args.unbindQueue(queue, source, pattern, argt), defs.QueueUnbindOk);\n};\nC.assertExchange = function (exchange, type, options) {\n  // The server reply is an empty set of fields, but it's convenient\n  // to have the exchange name handed to the continuation.\n  return this.rpc(defs.ExchangeDeclare, Args.assertExchange(exchange, type, options), defs.ExchangeDeclareOk).then(function (_ok) {\n    return {\n      exchange: exchange\n    };\n  });\n};\nC.checkExchange = function (exchange) {\n  return this.rpc(defs.ExchangeDeclare, Args.checkExchange(exchange), defs.ExchangeDeclareOk);\n};\nC.deleteExchange = function (name, options) {\n  return this.rpc(defs.ExchangeDelete, Args.deleteExchange(name, options), defs.ExchangeDeleteOk);\n};\nC.bindExchange = function (dest, source, pattern, argt) {\n  return this.rpc(defs.ExchangeBind, Args.bindExchange(dest, source, pattern, argt), defs.ExchangeBindOk);\n};\nC.unbindExchange = function (dest, source, pattern, argt) {\n  return this.rpc(defs.ExchangeUnbind, Args.unbindExchange(dest, source, pattern, argt), defs.ExchangeUnbindOk);\n};\n\n// Working with messages\n\nC.publish = function (exchange, routingKey, content, options) {\n  var fieldsAndProps = Args.publish(exchange, routingKey, options);\n  return this.sendMessage(fieldsAndProps, fieldsAndProps, content);\n};\nC.sendToQueue = function (queue, content, options) {\n  return this.publish('', queue, content, options);\n};\nC.consume = function (queue, callback, options) {\n  var self = this;\n  // NB we want the callback to be run synchronously, so that we've\n  // registered the consumerTag before any messages can arrive.\n  var fields = Args.consume(queue, options);\n  return Promise.fromCallback(function (cb) {\n    self._rpc(defs.BasicConsume, fields, defs.BasicConsumeOk, cb);\n  }).then(function (ok) {\n    self.registerConsumer(ok.fields.consumerTag, callback);\n    return ok.fields;\n  });\n};\nC.cancel = function (consumerTag) {\n  var self = this;\n  return Promise.fromCallback(function (cb) {\n    self._rpc(defs.BasicCancel, Args.cancel(consumerTag), defs.BasicCancelOk, cb);\n  }).then(function (ok) {\n    self.unregisterConsumer(consumerTag);\n    return ok.fields;\n  });\n};\nC.get = function (queue, options) {\n  var self = this;\n  var fields = Args.get(queue, options);\n  return Promise.fromCallback(function (cb) {\n    return self.sendOrEnqueue(defs.BasicGet, fields, cb);\n  }).then(function (f) {\n    if (f.id === defs.BasicGetEmpty) {\n      return false;\n    } else if (f.id === defs.BasicGetOk) {\n      var fields = f.fields;\n      return new Promise(function (resolve) {\n        self.handleMessage = acceptMessage(function (m) {\n          m.fields = fields;\n          resolve(m);\n        });\n      });\n    } else {\n      throw new Error(\"Unexpected response to BasicGet: \" + inspect(f));\n    }\n  });\n};\nC.ack = function (message, allUpTo) {\n  this.sendImmediately(defs.BasicAck, Args.ack(message.fields.deliveryTag, allUpTo));\n};\nC.ackAll = function () {\n  this.sendImmediately(defs.BasicAck, Args.ack(0, true));\n};\nC.nack = function (message, allUpTo, requeue) {\n  this.sendImmediately(defs.BasicNack, Args.nack(message.fields.deliveryTag, allUpTo, requeue));\n};\nC.nackAll = function (requeue) {\n  this.sendImmediately(defs.BasicNack, Args.nack(0, true, requeue));\n};\n\n// `Basic.Nack` is not available in older RabbitMQ versions (or in the\n// AMQP specification), so you have to use the one-at-a-time\n// `Basic.Reject`. This is otherwise synonymous with\n// `#nack(message, false, requeue)`.\nC.reject = function (message, requeue) {\n  this.sendImmediately(defs.BasicReject, Args.reject(message.fields.deliveryTag, requeue));\n};\n\n// There are more options in AMQP than exposed here; RabbitMQ only\n// implements prefetch based on message count, and only for individual\n// channels or consumers. RabbitMQ v3.3.0 and after treat prefetch\n// (without `global` set) as per-consumer (for consumers following),\n// and prefetch with `global` set as per-channel.\nC.prefetch = C.qos = function (count, global) {\n  return this.rpc(defs.BasicQos, Args.prefetch(count, global), defs.BasicQosOk);\n};\nC.recover = function () {\n  return this.rpc(defs.BasicRecover, Args.recover(), defs.BasicRecoverOk);\n};\n\n// Confirm channel. This is a channel with confirms 'switched on',\n// meaning sent messages will provoke a responding 'ack' or 'nack'\n// from the server. The upshot of this is that `publish` and\n// `sendToQueue` both take a callback, which will be called either\n// with `null` as its argument to signify 'ack', or an exception as\n// its argument to signify 'nack'.\n\nfunction ConfirmChannel(connection) {\n  Channel.call(this, connection);\n}\ninherits(ConfirmChannel, Channel);\nmodule.exports.ConfirmChannel = ConfirmChannel;\nCM.createConfirmChannel = function () {\n  var c = new ConfirmChannel(this.connection);\n  return c.open().then(function (openOk) {\n    return c.rpc(defs.ConfirmSelect, {\n      nowait: false\n    }, defs.ConfirmSelectOk);\n  }).then(function () {\n    return c;\n  });\n};\nvar CC = ConfirmChannel.prototype;\nCC.publish = function (exchange, routingKey, content, options, cb) {\n  this.pushConfirmCallback(cb);\n  return C.publish.call(this, exchange, routingKey, content, options);\n};\nCC.sendToQueue = function (queue, content, options, cb) {\n  return this.publish('', queue, content, options, cb);\n};\nCC.waitForConfirms = function () {\n  var awaiting = [];\n  var unconfirmed = this.unconfirmed;\n  unconfirmed.forEach(function (val, index) {\n    if (val === null) ; // already confirmed\n    else {\n      var confirmed = new Promise(function (resolve, reject) {\n        unconfirmed[index] = function (err) {\n          if (val) val(err);\n          if (err === null) resolve();else reject(err);\n        };\n      });\n      awaiting.push(confirmed);\n    }\n  });\n  return Promise.all(awaiting);\n};","map":{"version":3,"names":["defs","require","Promise","inherits","EventEmitter","BaseChannel","acceptMessage","Args","ChannelModel","connection","call","self","forEach","ev","on","emit","bind","module","exports","CM","prototype","close","fromCallback","Channel","handleDelivery","handleCancel","createChannel","c","open","then","openOk","C","rpc","method","fields","expect","cb","_rpc","f","try","allocate","ch","ChannelOpen","outOfBand","ChannelOpenOk","closeBecause","constants","REPLY_SUCCESS","assertQueue","queue","options","QueueDeclare","QueueDeclareOk","checkQueue","deleteQueue","QueueDelete","QueueDeleteOk","purgeQueue","QueuePurge","QueuePurgeOk","bindQueue","source","pattern","argt","QueueBind","QueueBindOk","unbindQueue","QueueUnbind","QueueUnbindOk","assertExchange","exchange","type","ExchangeDeclare","ExchangeDeclareOk","_ok","checkExchange","deleteExchange","name","ExchangeDelete","ExchangeDeleteOk","bindExchange","dest","ExchangeBind","ExchangeBindOk","unbindExchange","ExchangeUnbind","ExchangeUnbindOk","publish","routingKey","content","fieldsAndProps","sendMessage","sendToQueue","consume","callback","BasicConsume","BasicConsumeOk","ok","registerConsumer","consumerTag","cancel","BasicCancel","BasicCancelOk","unregisterConsumer","get","sendOrEnqueue","BasicGet","id","BasicGetEmpty","BasicGetOk","resolve","handleMessage","m","Error","inspect","ack","message","allUpTo","sendImmediately","BasicAck","deliveryTag","ackAll","nack","requeue","BasicNack","nackAll","reject","BasicReject","prefetch","qos","count","global","BasicQos","BasicQosOk","recover","BasicRecover","BasicRecoverOk","ConfirmChannel","createConfirmChannel","ConfirmSelect","nowait","ConfirmSelectOk","CC","pushConfirmCallback","waitForConfirms","awaiting","unconfirmed","val","index","confirmed","err","push","all"],"sources":["/Users/anandarunima/Documents/Arunima/Coursework/sauce_labs-fizzbuzzbash/fizzbuzzbass/components/node_modules/amqplib/lib/channel_model.js"],"sourcesContent":["//\n//\n//\n\n'use strict';\n\nvar defs = require('./defs');\nvar Promise = require('bluebird');\nvar inherits = require('util').inherits;\nvar EventEmitter = require('events').EventEmitter;\nvar BaseChannel = require('./channel').BaseChannel;\nvar acceptMessage = require('./channel').acceptMessage;\nvar Args = require('./api_args');\n\nfunction ChannelModel(connection) {\n  if (!(this instanceof ChannelModel))\n    return new ChannelModel(connection);\n  EventEmitter.call( this );\n  this.connection = connection;\n  var self = this;\n  ['error', 'close', 'blocked', 'unblocked'].forEach(function(ev) {\n    connection.on(ev, self.emit.bind(self, ev));\n  });\n}\ninherits(ChannelModel, EventEmitter);\n\nmodule.exports.ChannelModel = ChannelModel;\n\nvar CM = ChannelModel.prototype;\n\nCM.close = function() {\n  return Promise.fromCallback(this.connection.close.bind(this.connection));\n};\n\n// Channels\n\nfunction Channel(connection) {\n  BaseChannel.call(this, connection);\n  this.on('delivery', this.handleDelivery.bind(this));\n  this.on('cancel', this.handleCancel.bind(this));\n}\ninherits(Channel, BaseChannel);\n\nmodule.exports.Channel = Channel;\n\nCM.createChannel = function() {\n  var c = new Channel(this.connection);\n  return c.open().then(function(openOk) { return c; });\n};\n\nvar C = Channel.prototype;\n\n// An RPC that returns a 'proper' promise, which resolves to just the\n// response's fields; this is intended to be suitable for implementing\n// API procedures.\nC.rpc = function(method, fields, expect) {\n  var self = this;\n  return Promise.fromCallback(function(cb) {\n    return self._rpc(method, fields, expect, cb);\n  })\n  .then(function(f) {\n    return f.fields;\n  });\n};\n\n// Do the remarkably simple channel open handshake\nC.open = function() {\n  return Promise.try(this.allocate.bind(this)).then(\n    function(ch) {\n      return ch.rpc(defs.ChannelOpen, {outOfBand: \"\"},\n                    defs.ChannelOpenOk);\n    });\n};\n\nC.close = function() {\n  var self = this;\n  return Promise.fromCallback(function(cb) {\n    return self.closeBecause(\"Goodbye\", defs.constants.REPLY_SUCCESS,\n                    cb);\n  });\n};\n\n// === Public API, declaring queues and stuff ===\n\nC.assertQueue = function(queue, options) {\n  return this.rpc(defs.QueueDeclare,\n                  Args.assertQueue(queue, options),\n                  defs.QueueDeclareOk);\n};\n\nC.checkQueue = function(queue) {\n  return this.rpc(defs.QueueDeclare,\n                  Args.checkQueue(queue),\n                  defs.QueueDeclareOk);\n};\n\nC.deleteQueue = function(queue, options) {\n  return this.rpc(defs.QueueDelete,\n                  Args.deleteQueue(queue, options),\n                  defs.QueueDeleteOk);\n};\n\nC.purgeQueue = function(queue) {\n  return this.rpc(defs.QueuePurge,\n                  Args.purgeQueue(queue),\n                  defs.QueuePurgeOk);\n};\n\nC.bindQueue = function(queue, source, pattern, argt) {\n  return this.rpc(defs.QueueBind,\n                  Args.bindQueue(queue, source, pattern, argt),\n                  defs.QueueBindOk);\n};\n\nC.unbindQueue = function(queue, source, pattern, argt) {\n  return this.rpc(defs.QueueUnbind,\n                  Args.unbindQueue(queue, source, pattern, argt),\n                  defs.QueueUnbindOk);\n};\n\nC.assertExchange = function(exchange, type, options) {\n  // The server reply is an empty set of fields, but it's convenient\n  // to have the exchange name handed to the continuation.\n  return this.rpc(defs.ExchangeDeclare,\n                  Args.assertExchange(exchange, type, options),\n                  defs.ExchangeDeclareOk)\n    .then(function(_ok) { return { exchange: exchange }; });\n};\n\nC.checkExchange = function(exchange) {\n  return this.rpc(defs.ExchangeDeclare,\n                  Args.checkExchange(exchange),\n                  defs.ExchangeDeclareOk);\n};\n\nC.deleteExchange = function(name, options) {\n  return this.rpc(defs.ExchangeDelete,\n                  Args.deleteExchange(name, options),\n                  defs.ExchangeDeleteOk);\n};\n\nC.bindExchange = function(dest, source, pattern, argt) {\n  return this.rpc(defs.ExchangeBind,\n                  Args.bindExchange(dest, source, pattern, argt),\n                  defs.ExchangeBindOk);\n};\n\nC.unbindExchange = function(dest, source, pattern, argt) {\n  return this.rpc(defs.ExchangeUnbind,\n                  Args.unbindExchange(dest, source, pattern, argt),\n                  defs.ExchangeUnbindOk);\n};\n\n// Working with messages\n\nC.publish = function(exchange, routingKey, content, options) {\n  var fieldsAndProps = Args.publish(exchange, routingKey, options);\n  return this.sendMessage(fieldsAndProps, fieldsAndProps, content);\n};\n\nC.sendToQueue = function(queue, content, options) {\n  return this.publish('', queue, content, options);\n};\n\nC.consume = function(queue, callback, options) {\n  var self = this;\n  // NB we want the callback to be run synchronously, so that we've\n  // registered the consumerTag before any messages can arrive.\n  var fields = Args.consume(queue, options);\n  return Promise.fromCallback(function(cb) {\n    self._rpc(defs.BasicConsume, fields, defs.BasicConsumeOk, cb);\n  })\n  .then(function(ok) {\n    self.registerConsumer(ok.fields.consumerTag, callback);\n    return ok.fields;\n  });\n};\n\nC.cancel = function(consumerTag) {\n  var self = this;\n  return Promise.fromCallback(function(cb) {\n    self._rpc(defs.BasicCancel, Args.cancel(consumerTag),\n          defs.BasicCancelOk,\n          cb);\n  })\n  .then(function(ok) {\n    self.unregisterConsumer(consumerTag);\n    return ok.fields;\n  });\n};\n\nC.get = function(queue, options) {\n  var self = this;\n  var fields = Args.get(queue, options);\n  return Promise.fromCallback(function(cb) {\n    return self.sendOrEnqueue(defs.BasicGet, fields, cb);\n  })\n  .then(function(f) {\n    if (f.id === defs.BasicGetEmpty) {\n      return false;\n    }\n    else if (f.id === defs.BasicGetOk) {\n      var fields = f.fields;\n      return new Promise(function(resolve) {\n        self.handleMessage = acceptMessage(function(m) {\n          m.fields = fields;\n          resolve(m);\n        });\n      });\n    }\n    else {\n      throw new Error(\"Unexpected response to BasicGet: \" +\n                             inspect(f));\n    }\n  })\n};\n\nC.ack = function(message, allUpTo) {\n  this.sendImmediately(\n    defs.BasicAck,\n    Args.ack(message.fields.deliveryTag, allUpTo));\n};\n\nC.ackAll = function() {\n  this.sendImmediately(defs.BasicAck, Args.ack(0, true));\n};\n\nC.nack = function(message, allUpTo, requeue) {\n  this.sendImmediately(\n    defs.BasicNack,\n    Args.nack(message.fields.deliveryTag, allUpTo, requeue));\n};\n\nC.nackAll = function(requeue) {\n  this.sendImmediately(defs.BasicNack,\n                       Args.nack(0, true, requeue));\n};\n\n// `Basic.Nack` is not available in older RabbitMQ versions (or in the\n// AMQP specification), so you have to use the one-at-a-time\n// `Basic.Reject`. This is otherwise synonymous with\n// `#nack(message, false, requeue)`.\nC.reject = function(message, requeue) {\n  this.sendImmediately(\n    defs.BasicReject,\n    Args.reject(message.fields.deliveryTag, requeue));\n};\n\n// There are more options in AMQP than exposed here; RabbitMQ only\n// implements prefetch based on message count, and only for individual\n// channels or consumers. RabbitMQ v3.3.0 and after treat prefetch\n// (without `global` set) as per-consumer (for consumers following),\n// and prefetch with `global` set as per-channel.\nC.prefetch = C.qos = function(count, global) {\n  return this.rpc(defs.BasicQos,\n                  Args.prefetch(count, global),\n                  defs.BasicQosOk);\n};\n\nC.recover = function() {\n  return this.rpc(defs.BasicRecover,\n                  Args.recover(),\n                  defs.BasicRecoverOk);\n};\n\n// Confirm channel. This is a channel with confirms 'switched on',\n// meaning sent messages will provoke a responding 'ack' or 'nack'\n// from the server. The upshot of this is that `publish` and\n// `sendToQueue` both take a callback, which will be called either\n// with `null` as its argument to signify 'ack', or an exception as\n// its argument to signify 'nack'.\n\nfunction ConfirmChannel(connection) {\n  Channel.call(this, connection);\n}\ninherits(ConfirmChannel, Channel);\n\nmodule.exports.ConfirmChannel = ConfirmChannel;\n\nCM.createConfirmChannel = function() {\n  var c = new ConfirmChannel(this.connection);\n  return c.open()\n    .then(function(openOk) {\n      return c.rpc(defs.ConfirmSelect, {nowait: false},\n                   defs.ConfirmSelectOk)\n    })\n    .then(function() { return c; });\n};\n\nvar CC = ConfirmChannel.prototype;\n\nCC.publish = function(exchange, routingKey, content, options, cb) {\n  this.pushConfirmCallback(cb);\n  return C.publish.call(this, exchange, routingKey, content, options);\n};\n\nCC.sendToQueue = function(queue, content, options, cb) {\n  return this.publish('', queue, content, options, cb);\n};\n\nCC.waitForConfirms = function() {\n  var awaiting = [];\n  var unconfirmed = this.unconfirmed;\n  unconfirmed.forEach(function(val, index) {\n    if (val === null); // already confirmed\n    else {\n      var confirmed = new Promise(function(resolve, reject) {\n        unconfirmed[index] = function(err) {\n          if (val) val(err);\n          if (err === null) resolve();\n          else reject(err);\n        };\n      });\n      awaiting.push(confirmed);\n    }\n  });\n  return Promise.all(awaiting);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}