{"ast":null,"code":"var crypto = require('crypto');\nvar constants = require('constants');\nvar schemes = require('../schemes/schemes.js');\nmodule.exports = function (keyPair, options) {\n  var jsEngine = require('./js.js')(keyPair, options);\n  var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);\n  return {\n    encrypt: function (buffer, usePrivate) {\n      if (usePrivate) {\n        return jsEngine.encrypt(buffer, usePrivate);\n      }\n      var padding = constants.RSA_PKCS1_OAEP_PADDING;\n      if (options.encryptionScheme === 'pkcs1') {\n        padding = constants.RSA_PKCS1_PADDING;\n      }\n      if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n        padding = options.encryptionSchemeOptions.padding;\n      }\n      var data = buffer;\n      if (padding === constants.RSA_NO_PADDING) {\n        data = pkcs1Scheme.pkcs0pad(buffer);\n      }\n      return crypto.publicEncrypt({\n        key: options.rsaUtils.exportKey('public'),\n        padding: padding\n      }, data);\n    },\n    decrypt: function (buffer, usePublic) {\n      if (usePublic) {\n        return jsEngine.decrypt(buffer, usePublic);\n      }\n      var padding = constants.RSA_PKCS1_OAEP_PADDING;\n      if (options.encryptionScheme === 'pkcs1') {\n        padding = constants.RSA_PKCS1_PADDING;\n      }\n      if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n        padding = options.encryptionSchemeOptions.padding;\n      }\n      var res = crypto.privateDecrypt({\n        key: options.rsaUtils.exportKey('private'),\n        padding: padding\n      }, buffer);\n      if (padding === constants.RSA_NO_PADDING) {\n        return pkcs1Scheme.pkcs0unpad(res);\n      }\n      return res;\n    }\n  };\n};","map":{"version":3,"names":["crypto","require","constants","schemes","module","exports","keyPair","options","jsEngine","pkcs1Scheme","pkcs1","makeScheme","encrypt","buffer","usePrivate","padding","RSA_PKCS1_OAEP_PADDING","encryptionScheme","RSA_PKCS1_PADDING","encryptionSchemeOptions","data","RSA_NO_PADDING","pkcs0pad","publicEncrypt","key","rsaUtils","exportKey","decrypt","usePublic","res","privateDecrypt","pkcs0unpad"],"sources":["/Users/anandarunima/Documents/Arunima/Coursework/sauce_labs-fizzbuzzbash/fizzbuzzbass/components/node_modules/node-rsa/src/encryptEngines/node12.js"],"sourcesContent":["var crypto = require('crypto');\nvar constants = require('constants');\nvar schemes = require('../schemes/schemes.js');\n\nmodule.exports = function (keyPair, options) {\n    var jsEngine = require('./js.js')(keyPair, options);\n    var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);\n\n    return {\n        encrypt: function (buffer, usePrivate) {\n            if (usePrivate) {\n                return jsEngine.encrypt(buffer, usePrivate);\n            }\n            var padding = constants.RSA_PKCS1_OAEP_PADDING;\n            if (options.encryptionScheme === 'pkcs1') {\n                padding = constants.RSA_PKCS1_PADDING;\n            }\n            if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n                padding = options.encryptionSchemeOptions.padding;\n            }\n\n            var data = buffer;\n            if (padding === constants.RSA_NO_PADDING) {\n                data = pkcs1Scheme.pkcs0pad(buffer);\n            }\n\n            return crypto.publicEncrypt({\n                key: options.rsaUtils.exportKey('public'),\n                padding: padding\n            }, data);\n        },\n\n        decrypt: function (buffer, usePublic) {\n            if (usePublic) {\n                return jsEngine.decrypt(buffer, usePublic);\n            }\n            var padding = constants.RSA_PKCS1_OAEP_PADDING;\n            if (options.encryptionScheme === 'pkcs1') {\n                padding = constants.RSA_PKCS1_PADDING;\n            }\n            if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n                padding = options.encryptionSchemeOptions.padding;\n            }\n\n            var res = crypto.privateDecrypt({\n                key: options.rsaUtils.exportKey('private'),\n                padding: padding\n            }, buffer);\n\n            if (padding === constants.RSA_NO_PADDING) {\n                return pkcs1Scheme.pkcs0unpad(res);\n            }\n            return res;\n        }\n    };\n};"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC9B,IAAIC,SAAS,GAAGD,OAAO,CAAC,WAAW,CAAC;AACpC,IAAIE,OAAO,GAAGF,OAAO,CAAC,uBAAuB,CAAC;AAE9CG,MAAM,CAACC,OAAO,GAAG,UAAUC,OAAO,EAAEC,OAAO,EAAE;EACzC,IAAIC,QAAQ,GAAGP,OAAO,CAAC,SAAS,CAAC,CAACK,OAAO,EAAEC,OAAO,CAAC;EACnD,IAAIE,WAAW,GAAGN,OAAO,CAACO,KAAK,CAACC,UAAU,CAACL,OAAO,EAAEC,OAAO,CAAC;EAE5D,OAAO;IACHK,OAAO,EAAE,SAAAA,CAAUC,MAAM,EAAEC,UAAU,EAAE;MACnC,IAAIA,UAAU,EAAE;QACZ,OAAON,QAAQ,CAACI,OAAO,CAACC,MAAM,EAAEC,UAAU,CAAC;MAC/C;MACA,IAAIC,OAAO,GAAGb,SAAS,CAACc,sBAAsB;MAC9C,IAAIT,OAAO,CAACU,gBAAgB,KAAK,OAAO,EAAE;QACtCF,OAAO,GAAGb,SAAS,CAACgB,iBAAiB;MACzC;MACA,IAAIX,OAAO,CAACY,uBAAuB,IAAIZ,OAAO,CAACY,uBAAuB,CAACJ,OAAO,EAAE;QAC5EA,OAAO,GAAGR,OAAO,CAACY,uBAAuB,CAACJ,OAAO;MACrD;MAEA,IAAIK,IAAI,GAAGP,MAAM;MACjB,IAAIE,OAAO,KAAKb,SAAS,CAACmB,cAAc,EAAE;QACtCD,IAAI,GAAGX,WAAW,CAACa,QAAQ,CAACT,MAAM,CAAC;MACvC;MAEA,OAAOb,MAAM,CAACuB,aAAa,CAAC;QACxBC,GAAG,EAAEjB,OAAO,CAACkB,QAAQ,CAACC,SAAS,CAAC,QAAQ,CAAC;QACzCX,OAAO,EAAEA;MACb,CAAC,EAAEK,IAAI,CAAC;IACZ,CAAC;IAEDO,OAAO,EAAE,SAAAA,CAAUd,MAAM,EAAEe,SAAS,EAAE;MAClC,IAAIA,SAAS,EAAE;QACX,OAAOpB,QAAQ,CAACmB,OAAO,CAACd,MAAM,EAAEe,SAAS,CAAC;MAC9C;MACA,IAAIb,OAAO,GAAGb,SAAS,CAACc,sBAAsB;MAC9C,IAAIT,OAAO,CAACU,gBAAgB,KAAK,OAAO,EAAE;QACtCF,OAAO,GAAGb,SAAS,CAACgB,iBAAiB;MACzC;MACA,IAAIX,OAAO,CAACY,uBAAuB,IAAIZ,OAAO,CAACY,uBAAuB,CAACJ,OAAO,EAAE;QAC5EA,OAAO,GAAGR,OAAO,CAACY,uBAAuB,CAACJ,OAAO;MACrD;MAEA,IAAIc,GAAG,GAAG7B,MAAM,CAAC8B,cAAc,CAAC;QAC5BN,GAAG,EAAEjB,OAAO,CAACkB,QAAQ,CAACC,SAAS,CAAC,SAAS,CAAC;QAC1CX,OAAO,EAAEA;MACb,CAAC,EAAEF,MAAM,CAAC;MAEV,IAAIE,OAAO,KAAKb,SAAS,CAACmB,cAAc,EAAE;QACtC,OAAOZ,WAAW,CAACsB,UAAU,CAACF,GAAG,CAAC;MACtC;MACA,OAAOA,GAAG;IACd;EACJ,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}