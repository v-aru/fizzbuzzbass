{"ast":null,"code":"//\n//\n//\n\n'use strict';\n\nvar defs = require('./defs');\nvar constants = defs.constants;\nvar frame = require('./frame');\nvar HEARTBEAT = frame.HEARTBEAT;\nvar Mux = require('./mux').Mux;\nvar Buffer = require('safe-buffer').Buffer;\nvar Duplex = require('stream').Duplex || require('readable-stream/duplex');\nvar EventEmitter = require('events').EventEmitter;\nvar Heart = require('./heartbeat').Heart;\nvar methodName = require('./format').methodName;\nvar closeMsg = require('./format').closeMessage;\nvar inspect = require('./format').inspect;\nvar BitSet = require('./bitset').BitSet;\nvar inherits = require('util').inherits;\nvar fmt = require('util').format;\nvar PassThrough = require('stream').PassThrough || require('readable-stream/passthrough');\nvar IllegalOperationError = require('./error').IllegalOperationError;\nvar stackCapture = require('./error').stackCapture;\n\n// High-water mark for channel write buffers, in 'objects' (which are\n// encoded frames as buffers).\nvar DEFAULT_WRITE_HWM = 1024;\n// If all the frames of a message (method, properties, content) total\n// to less than this, copy them into a single buffer and write it all\n// at once. Note that this is less than the minimum frame size: if it\n// was greater, we might have to fragment the content.\nvar SINGLE_CHUNK_THRESHOLD = 2048;\nfunction Connection(underlying) {\n  EventEmitter.call(this);\n  var stream = this.stream = wrapStream(underlying);\n  this.muxer = new Mux(stream);\n\n  // frames\n  this.rest = Buffer.alloc(0);\n  this.frameMax = constants.FRAME_MIN_SIZE;\n  this.sentSinceLastCheck = false;\n  this.recvSinceLastCheck = false;\n  this.expectSocketClose = false;\n  this.freeChannels = new BitSet();\n  this.channels = [{\n    channel: {\n      accept: channel0(this)\n    },\n    buffer: underlying\n  }];\n}\ninherits(Connection, EventEmitter);\nvar C = Connection.prototype;\n\n// Usual frame accept mode\nfunction mainAccept(frame) {\n  var rec = this.channels[frame.channel];\n  if (rec) {\n    return rec.channel.accept(frame);\n  }\n  // NB CHANNEL_ERROR may not be right, but I don't know what is ..\n  else this.closeWithError(fmt('Frame on unknown channel %d', frame.channel), constants.CHANNEL_ERROR, new Error(fmt(\"Frame on unknown channel: %s\", inspect(frame, false))));\n}\n\n// Handle anything that comes through on channel 0, that's the\n// connection control channel. This is only used once mainAccept is\n// installed as the frame handler, after the opening handshake.\nfunction channel0(connection) {\n  return function (f) {\n    // Once we get a 'close', we know 1. we'll get no more frames, and\n    // 2. anything we send except close, or close-ok, will be\n    // ignored. If we already sent 'close', this won't be invoked since\n    // we're already in closing mode; if we didn't well we're not going\n    // to send it now are we.\n    if (f === HEARTBEAT) ; // ignore; it's already counted as activity\n    // on the socket, which is its purpose\n    else if (f.id === defs.ConnectionClose) {\n      // Oh. OK. I guess we're done here then.\n      connection.sendMethod(0, defs.ConnectionCloseOk, {});\n      var emsg = fmt('Connection closed: %s', closeMsg(f));\n      var s = stackCapture(emsg);\n      var e = new Error(emsg);\n      e.code = f.fields.replyCode;\n      if (isFatalError(e)) {\n        connection.emit('error', e);\n      }\n      connection.toClosed(s, e);\n    } else if (f.id === defs.ConnectionBlocked) {\n      connection.emit('blocked', f.fields.reason);\n    } else if (f.id === defs.ConnectionUnblocked) {\n      connection.emit('unblocked');\n    } else {\n      connection.closeWithError(fmt(\"Unexpected frame on channel 0\"), constants.UNEXPECTED_FRAME, new Error(fmt(\"Unexpected frame on channel 0: %s\", inspect(f, false))));\n    }\n  };\n}\n\n// This changed between versions, as did the codec, methods, etc. AMQP\n// 0-9-1 is fairly similar to 0.8, but better, and nothing implements\n// 0.8 that doesn't implement 0-9-1. In other words, it doesn't make\n// much sense to generalise here.\nC.sendProtocolHeader = function () {\n  this.sendBytes(frame.PROTOCOL_HEADER);\n};\n\n/*\n  The frighteningly complicated opening protocol (spec section 2.2.4):\n\n     Client -> Server\n\n       protocol header ->\n         <- start\n       start-ok ->\n     .. next two zero or more times ..\n         <- secure\n       secure-ok ->\n         <- tune\n       tune-ok ->\n       open ->\n         <- open-ok\n\nIf I'm only supporting SASL's PLAIN mechanism (which I am for the time\nbeing), it gets a bit easier since the server won't in general send\nback a `secure`, it'll just send `tune` after the `start-ok`.\n(SASL PLAIN: http://tools.ietf.org/html/rfc4616)\n\n*/\n\nC.open = function (allFields, openCallback0) {\n  var self = this;\n  var openCallback = openCallback0 || function () {};\n\n  // This is where we'll put our negotiated values\n  var tunedOptions = Object.create(allFields);\n  function wait(k) {\n    self.step(function (err, frame) {\n      if (err !== null) bail(err);else if (frame.channel !== 0) {\n        bail(new Error(fmt(\"Frame on channel != 0 during handshake: %s\", inspect(frame, false))));\n      } else k(frame);\n    });\n  }\n  function expect(Method, k) {\n    wait(function (frame) {\n      if (frame.id === Method) k(frame);else {\n        bail(new Error(fmt(\"Expected %s; got %s\", methodName(Method), inspect(frame, false))));\n      }\n    });\n  }\n  function bail(err) {\n    openCallback(err);\n  }\n  function send(Method) {\n    // This can throw an exception if there's some problem with the\n    // options; e.g., something is a string instead of a number.\n    try {\n      self.sendMethod(0, Method, tunedOptions);\n    } catch (err) {\n      bail(err);\n    }\n  }\n  function negotiate(server, desired) {\n    // We get sent values for channelMax, frameMax and heartbeat,\n    // which we may accept or lower (subject to a minimum for\n    // frameMax, but we'll leave that to the server to enforce). In\n    // all cases, `0` really means \"no limit\", or rather the highest\n    // value in the encoding, e.g., unsigned short for channelMax.\n    if (server === 0 || desired === 0) {\n      // i.e., whichever places a limit, if either\n      return Math.max(server, desired);\n    } else {\n      return Math.min(server, desired);\n    }\n  }\n  function onStart(start) {\n    var mechanisms = start.fields.mechanisms.toString().split(' ');\n    if (mechanisms.indexOf(allFields.mechanism) < 0) {\n      bail(new Error(fmt('SASL mechanism %s is not provided by the server', allFields.mechanism)));\n      return;\n    }\n    send(defs.ConnectionStartOk);\n    wait(afterStartOk);\n  }\n  function afterStartOk(reply) {\n    switch (reply.id) {\n      case defs.ConnectionSecure:\n        bail(new Error(\"Wasn't expecting to have to go through secure\"));\n        break;\n      case defs.ConnectionClose:\n        bail(new Error(fmt(\"Handshake terminated by server: %s\", closeMsg(reply))));\n        break;\n      case defs.ConnectionTune:\n        var fields = reply.fields;\n        tunedOptions.frameMax = negotiate(fields.frameMax, allFields.frameMax);\n        tunedOptions.channelMax = negotiate(fields.channelMax, allFields.channelMax);\n        tunedOptions.heartbeat = negotiate(fields.heartbeat, allFields.heartbeat);\n        send(defs.ConnectionTuneOk);\n        send(defs.ConnectionOpen);\n        expect(defs.ConnectionOpenOk, onOpenOk);\n        break;\n      default:\n        bail(new Error(fmt(\"Expected connection.secure, connection.close, \" + \"or connection.tune during handshake; got %s\", inspect(reply, false))));\n        break;\n    }\n  }\n  function onOpenOk(openOk) {\n    // Impose the maximum of the encoded value, if the negotiated\n    // value is zero, meaning \"no, no limits\"\n    self.channelMax = tunedOptions.channelMax || 0xffff;\n    self.frameMax = tunedOptions.frameMax || 0xffffffff;\n    // 0 means \"no heartbeat\", rather than \"maximum period of\n    // heartbeating\"\n    self.heartbeat = tunedOptions.heartbeat;\n    self.heartbeater = self.startHeartbeater();\n    self.accept = mainAccept;\n    succeed(openOk);\n  }\n\n  // If the server closes the connection, it's probably because of\n  // something we did\n  function endWhileOpening(err) {\n    bail(err || new Error('Socket closed abruptly ' + 'during opening handshake'));\n  }\n  this.stream.on('end', endWhileOpening);\n  this.stream.on('error', endWhileOpening);\n  function succeed(ok) {\n    self.stream.removeListener('end', endWhileOpening);\n    self.stream.removeListener('error', endWhileOpening);\n    self.stream.on('error', self.onSocketError.bind(self));\n    self.stream.on('end', self.onSocketError.bind(self, new Error('Unexpected close')));\n    self.on('frameError', self.onSocketError.bind(self));\n    self.acceptLoop();\n    openCallback(null, ok);\n  }\n\n  // Now kick off the handshake by prompting the server\n  this.sendProtocolHeader();\n  expect(defs.ConnectionStart, onStart);\n};\n\n// Closing things: AMQP has a closing handshake that applies to\n// closing both connects and channels. As the initiating party, I send\n// Close, then ignore all frames until I see either CloseOK --\n// which signifies that the other party has seen the Close and shut\n// the connection or channel down, so it's fine to free resources; or\n// Close, which means the other party also wanted to close the\n// whatever, and I should send CloseOk so it can free resources,\n// then go back to waiting for the CloseOk. If I receive a Close\n// out of the blue, I should throw away any unsent frames (they will\n// be ignored anyway) and send CloseOk, then clean up resources. In\n// general, Close out of the blue signals an error (or a forced\n// closure, which may as well be an error).\n//\n//  RUNNING [1] --- send Close ---> Closing [2] ---> recv Close --+\n//     |                               |                         [3]\n//     |                               +------ send CloseOk ------+\n//  recv Close                   recv CloseOk\n//     |                               |\n//     V                               V\n//  Ended [4] ---- send CloseOk ---> Closed [5]\n//\n// [1] All frames accepted; getting a Close frame from the server\n// moves to Ended; client may initiate a close by sending Close\n// itself.\n// [2] Client has initiated a close; only CloseOk or (simulataneously\n// sent) Close is accepted.\n// [3] Simultaneous close\n// [4] Server won't send any more frames; accept no more frames, send\n// CloseOk.\n// [5] Fully closed, client will send no more, server will send no\n// more. Signal 'close' or 'error'.\n//\n// There are two signalling mechanisms used in the API. The first is\n// that calling `close` will return a promise, that will either\n// resolve once the connection or channel is cleanly shut down, or\n// will reject if the shutdown times out.\n//\n// The second is the 'close' and 'error' events. These are\n// emitted as above. The events will fire *before* promises are\n// resolved.\n\n// Close the connection without even giving a reason. Typical.\nC.close = function (closeCallback) {\n  var k = closeCallback && function () {\n    closeCallback(null);\n  };\n  this.closeBecause(\"Cheers, thanks\", constants.REPLY_SUCCESS, k);\n};\n\n// Close with a reason and a 'code'. I'm pretty sure RabbitMQ totally\n// ignores these; maybe it logs them. The continuation will be invoked\n// when the CloseOk has been received, and before the 'close' event.\nC.closeBecause = function (reason, code, k) {\n  this.sendMethod(0, defs.ConnectionClose, {\n    replyText: reason,\n    replyCode: code,\n    methodId: 0,\n    classId: 0\n  });\n  var s = stackCapture('closeBecause called: ' + reason);\n  this.toClosing(s, k);\n};\nC.closeWithError = function (reason, code, error) {\n  this.emit('error', error);\n  this.closeBecause(reason, code);\n};\nC.onSocketError = function (err) {\n  if (!this.expectSocketClose) {\n    // forestall any more calls to onSocketError, since we're signed\n    // up for `'error'` *and* `'end'`\n    this.expectSocketClose = true;\n    this.emit('error', err);\n    var s = stackCapture('Socket error');\n    this.toClosed(s, err);\n  }\n};\nfunction invalidOp(msg, stack) {\n  return function () {\n    throw new IllegalOperationError(msg, stack);\n  };\n}\nfunction invalidateSend(conn, msg, stack) {\n  conn.sendMethod = conn.sendContent = conn.sendMessage = invalidOp(msg, stack);\n}\n\n// A close has been initiated. Repeat: a close has been initiated.\n// This means we should not send more frames, anyway they will be\n// ignored. We also have to shut down all the channels.\nC.toClosing = function (capturedStack, k) {\n  var send = this.sendMethod.bind(this);\n  this.accept = function (f) {\n    if (f.id === defs.ConnectionCloseOk) {\n      if (k) k();\n      var s = stackCapture('ConnectionCloseOk received');\n      this.toClosed(s, undefined);\n    } else if (f.id === defs.ConnectionClose) {\n      send(0, defs.ConnectionCloseOk, {});\n    }\n    // else ignore frame\n  };\n  invalidateSend(this, 'Connection closing', capturedStack);\n};\nC._closeChannels = function (capturedStack) {\n  for (var i = 1; i < this.channels.length; i++) {\n    var ch = this.channels[i];\n    if (ch !== null) {\n      ch.channel.toClosed(capturedStack); // %%% or with an error? not clear\n    }\n  }\n};\n\n// A close has been confirmed. Cease all communication.\nC.toClosed = function (capturedStack, maybeErr) {\n  this._closeChannels(capturedStack);\n  var info = fmt('Connection closed (%s)', maybeErr ? maybeErr.toString() : 'by client');\n  // Tidy up, invalidate enverything, dynamite the bridges.\n  invalidateSend(this, info, capturedStack);\n  this.accept = invalidOp(info, capturedStack);\n  this.close = function (cb) {\n    cb && cb(new IllegalOperationError(info, capturedStack));\n  };\n  if (this.heartbeater) this.heartbeater.clear();\n  // This is certainly true now, if it wasn't before\n  this.expectSocketClose = true;\n  this.stream.end();\n  this.emit('close', maybeErr);\n};\n\n// ===\n\nC.startHeartbeater = function () {\n  if (this.heartbeat === 0) return null;else {\n    var self = this;\n    var hb = new Heart(this.heartbeat, this.checkSend.bind(this), this.checkRecv.bind(this));\n    hb.on('timeout', function () {\n      var hberr = new Error(\"Heartbeat timeout\");\n      self.emit('error', hberr);\n      var s = stackCapture('Heartbeat timeout');\n      self.toClosed(s, hberr);\n    });\n    hb.on('beat', function () {\n      self.sendHeartbeat();\n    });\n    return hb;\n  }\n};\n\n// I use an array to keep track of the channels, rather than an\n// object. The channel identifiers are numbers, and allocated by the\n// connection. If I try to allocate low numbers when they are\n// available (which I do, by looking from the start of the bitset),\n// this ought to keep the array small, and out of 'sparse array\n// storage'. I also set entries to null, rather than deleting them, in\n// the expectation that the next channel allocation will fill the slot\n// again rather than growing the array. See\n// http://www.html5rocks.com/en/tutorials/speed/v8/\nC.freshChannel = function (channel, options) {\n  var next = this.freeChannels.nextClearBit(1);\n  if (next < 0 || next > this.channelMax) throw new Error(\"No channels left to allocate\");\n  this.freeChannels.set(next);\n  var hwm = options && options.highWaterMark || DEFAULT_WRITE_HWM;\n  var writeBuffer = new PassThrough({\n    objectMode: true,\n    highWaterMark: hwm\n  });\n  this.channels[next] = {\n    channel: channel,\n    buffer: writeBuffer\n  };\n  writeBuffer.on('drain', function () {\n    channel.onBufferDrain();\n  });\n  this.muxer.pipeFrom(writeBuffer);\n  return next;\n};\nC.releaseChannel = function (channel) {\n  this.freeChannels.clear(channel);\n  var buffer = this.channels[channel].buffer;\n  this.muxer.unpipeFrom(buffer);\n  this.channels[channel] = null;\n};\nC.acceptLoop = function () {\n  var self = this;\n  function go() {\n    try {\n      var f;\n      while (f = self.recvFrame()) self.accept(f);\n    } catch (e) {\n      self.emit('frameError', e);\n    }\n  }\n  self.stream.on('readable', go);\n  go();\n};\nC.step = function (cb) {\n  var self = this;\n  function recv() {\n    var f;\n    try {\n      f = self.recvFrame();\n    } catch (e) {\n      cb(e, null);\n      return;\n    }\n    if (f) cb(null, f);else self.stream.once('readable', recv);\n  }\n  recv();\n};\nC.checkSend = function () {\n  var check = this.sentSinceLastCheck;\n  this.sentSinceLastCheck = false;\n  return check;\n};\nC.checkRecv = function () {\n  var check = this.recvSinceLastCheck;\n  this.recvSinceLastCheck = false;\n  return check;\n};\nC.sendBytes = function (bytes) {\n  this.sentSinceLastCheck = true;\n  this.stream.write(bytes);\n};\nC.sendHeartbeat = function () {\n  return this.sendBytes(frame.HEARTBEAT_BUF);\n};\nvar encodeMethod = defs.encodeMethod;\nvar encodeProperties = defs.encodeProperties;\nC.sendMethod = function (channel, Method, fields) {\n  var frame = encodeMethod(Method, channel, fields);\n  this.sentSinceLastCheck = true;\n  var buffer = this.channels[channel].buffer;\n  return buffer.write(frame);\n};\nC.sendMessage = function (channel, Method, fields, Properties, props, content) {\n  if (!Buffer.isBuffer(content)) throw new TypeError('content is not a buffer');\n  var mframe = encodeMethod(Method, channel, fields);\n  var pframe = encodeProperties(Properties, channel, content.length, props);\n  var buffer = this.channels[channel].buffer;\n  this.sentSinceLastCheck = true;\n  var methodHeaderLen = mframe.length + pframe.length;\n  var bodyLen = content.length > 0 ? content.length + FRAME_OVERHEAD : 0;\n  var allLen = methodHeaderLen + bodyLen;\n  if (allLen < SINGLE_CHUNK_THRESHOLD) {\n    var all = Buffer.alloc(allLen);\n    var offset = mframe.copy(all, 0);\n    offset += pframe.copy(all, offset);\n    if (bodyLen > 0) makeBodyFrame(channel, content).copy(all, offset);\n    return buffer.write(all);\n  } else {\n    if (methodHeaderLen < SINGLE_CHUNK_THRESHOLD) {\n      var both = Buffer.alloc(methodHeaderLen);\n      var offset = mframe.copy(both, 0);\n      pframe.copy(both, offset);\n      buffer.write(both);\n    } else {\n      buffer.write(mframe);\n      buffer.write(pframe);\n    }\n    return this.sendContent(channel, content);\n  }\n};\nvar FRAME_OVERHEAD = defs.FRAME_OVERHEAD;\nvar makeBodyFrame = frame.makeBodyFrame;\nC.sendContent = function (channel, body) {\n  if (!Buffer.isBuffer(body)) {\n    throw new TypeError(fmt(\"Expected buffer; got %s\", body));\n  }\n  var writeResult = true;\n  var buffer = this.channels[channel].buffer;\n  var maxBody = this.frameMax - FRAME_OVERHEAD;\n  for (var offset = 0; offset < body.length; offset += maxBody) {\n    var end = offset + maxBody;\n    var slice = end > body.length ? body.slice(offset) : body.slice(offset, end);\n    var bodyFrame = makeBodyFrame(channel, slice);\n    writeResult = buffer.write(bodyFrame);\n  }\n  this.sentSinceLastCheck = true;\n  return writeResult;\n};\nvar parseFrame = frame.parseFrame;\nvar decodeFrame = frame.decodeFrame;\nC.recvFrame = function () {\n  // %%% identifying invariants might help here?\n  var frame = parseFrame(this.rest, this.frameMax);\n  if (!frame) {\n    var incoming = this.stream.read();\n    if (incoming === null) {\n      return false;\n    } else {\n      this.recvSinceLastCheck = true;\n      this.rest = Buffer.concat([this.rest, incoming]);\n      return this.recvFrame();\n    }\n  } else {\n    this.rest = frame.rest;\n    return decodeFrame(frame);\n  }\n};\nfunction wrapStream(s) {\n  if (s instanceof Duplex) return s;else {\n    var ws = new Duplex();\n    ws.wrap(s); //wraps the readable side of things\n    ws._write = function (chunk, encoding, callback) {\n      return s.write(chunk, encoding, callback);\n    };\n    return ws;\n  }\n}\nfunction isFatalError(error) {\n  switch (error && error.code) {\n    case defs.constants.CONNECTION_FORCED:\n    case defs.constants.REPLY_SUCCESS:\n      return false;\n    default:\n      return true;\n  }\n}\nmodule.exports.Connection = Connection;\nmodule.exports.isFatalError = isFatalError;","map":{"version":3,"names":["defs","require","constants","frame","HEARTBEAT","Mux","Buffer","Duplex","EventEmitter","Heart","methodName","closeMsg","closeMessage","inspect","BitSet","inherits","fmt","format","PassThrough","IllegalOperationError","stackCapture","DEFAULT_WRITE_HWM","SINGLE_CHUNK_THRESHOLD","Connection","underlying","call","stream","wrapStream","muxer","rest","alloc","frameMax","FRAME_MIN_SIZE","sentSinceLastCheck","recvSinceLastCheck","expectSocketClose","freeChannels","channels","channel","accept","channel0","buffer","C","prototype","mainAccept","rec","closeWithError","CHANNEL_ERROR","Error","connection","f","id","ConnectionClose","sendMethod","ConnectionCloseOk","emsg","s","e","code","fields","replyCode","isFatalError","emit","toClosed","ConnectionBlocked","reason","ConnectionUnblocked","UNEXPECTED_FRAME","sendProtocolHeader","sendBytes","PROTOCOL_HEADER","open","allFields","openCallback0","self","openCallback","tunedOptions","Object","create","wait","k","step","err","bail","expect","Method","send","negotiate","server","desired","Math","max","min","onStart","start","mechanisms","toString","split","indexOf","mechanism","ConnectionStartOk","afterStartOk","reply","ConnectionSecure","ConnectionTune","channelMax","heartbeat","ConnectionTuneOk","ConnectionOpen","ConnectionOpenOk","onOpenOk","openOk","heartbeater","startHeartbeater","succeed","endWhileOpening","on","ok","removeListener","onSocketError","bind","acceptLoop","ConnectionStart","close","closeCallback","closeBecause","REPLY_SUCCESS","replyText","methodId","classId","toClosing","error","invalidOp","msg","stack","invalidateSend","conn","sendContent","sendMessage","capturedStack","undefined","_closeChannels","i","length","ch","maybeErr","info","cb","clear","end","hb","checkSend","checkRecv","hberr","sendHeartbeat","freshChannel","options","next","nextClearBit","set","hwm","highWaterMark","writeBuffer","objectMode","onBufferDrain","pipeFrom","releaseChannel","unpipeFrom","go","recvFrame","recv","once","check","bytes","write","HEARTBEAT_BUF","encodeMethod","encodeProperties","Properties","props","content","isBuffer","TypeError","mframe","pframe","methodHeaderLen","bodyLen","FRAME_OVERHEAD","allLen","all","offset","copy","makeBodyFrame","both","body","writeResult","maxBody","slice","bodyFrame","parseFrame","decodeFrame","incoming","read","concat","ws","wrap","_write","chunk","encoding","callback","CONNECTION_FORCED","module","exports"],"sources":["/Users/anandarunima/Documents/Arunima/Coursework/sauce_labs-fizzbuzzbash/fizzbuzzbass/components/node_modules/amqplib/lib/connection.js"],"sourcesContent":["//\n//\n//\n\n'use strict';\n\nvar defs = require('./defs');\nvar constants = defs.constants;\nvar frame = require('./frame');\nvar HEARTBEAT = frame.HEARTBEAT;\nvar Mux = require('./mux').Mux;\nvar Buffer = require('safe-buffer').Buffer\n\nvar Duplex =\n  require('stream').Duplex ||\n  require('readable-stream/duplex');\nvar EventEmitter = require('events').EventEmitter;\nvar Heart = require('./heartbeat').Heart;\n\nvar methodName = require('./format').methodName;\nvar closeMsg = require('./format').closeMessage;\nvar inspect = require('./format').inspect;\n\nvar BitSet = require('./bitset').BitSet;\nvar inherits = require('util').inherits;\nvar fmt = require('util').format;\nvar PassThrough = require('stream').PassThrough ||\n  require('readable-stream/passthrough');\nvar IllegalOperationError = require('./error').IllegalOperationError;\nvar stackCapture = require('./error').stackCapture;\n\n// High-water mark for channel write buffers, in 'objects' (which are\n// encoded frames as buffers).\nvar DEFAULT_WRITE_HWM = 1024;\n// If all the frames of a message (method, properties, content) total\n// to less than this, copy them into a single buffer and write it all\n// at once. Note that this is less than the minimum frame size: if it\n// was greater, we might have to fragment the content.\nvar SINGLE_CHUNK_THRESHOLD = 2048;\n\nfunction Connection(underlying) {\n  EventEmitter.call( this );\n  var stream = this.stream = wrapStream(underlying);\n  this.muxer = new Mux(stream);\n\n  // frames\n  this.rest = Buffer.alloc(0);\n  this.frameMax = constants.FRAME_MIN_SIZE;\n  this.sentSinceLastCheck = false;\n  this.recvSinceLastCheck = false;\n\n  this.expectSocketClose = false;\n  this.freeChannels = new BitSet();\n  this.channels = [{channel: {accept: channel0(this)},\n                    buffer: underlying}];\n}\ninherits(Connection, EventEmitter);\n\nvar C = Connection.prototype;\n\n// Usual frame accept mode\nfunction mainAccept(frame) {\n  var rec = this.channels[frame.channel];\n  if (rec) { return rec.channel.accept(frame); }\n  // NB CHANNEL_ERROR may not be right, but I don't know what is ..\n  else\n    this.closeWithError(\n      fmt('Frame on unknown channel %d', frame.channel),\n      constants.CHANNEL_ERROR,\n      new Error(fmt(\"Frame on unknown channel: %s\",\n                    inspect(frame, false))));\n}\n\n// Handle anything that comes through on channel 0, that's the\n// connection control channel. This is only used once mainAccept is\n// installed as the frame handler, after the opening handshake.\nfunction channel0(connection) {\n  return function(f) {\n    // Once we get a 'close', we know 1. we'll get no more frames, and\n    // 2. anything we send except close, or close-ok, will be\n    // ignored. If we already sent 'close', this won't be invoked since\n    // we're already in closing mode; if we didn't well we're not going\n    // to send it now are we.\n    if (f === HEARTBEAT); // ignore; it's already counted as activity\n                          // on the socket, which is its purpose\n    else if (f.id === defs.ConnectionClose) {\n      // Oh. OK. I guess we're done here then.\n      connection.sendMethod(0, defs.ConnectionCloseOk, {});\n      var emsg = fmt('Connection closed: %s', closeMsg(f));\n      var s = stackCapture(emsg);\n      var e = new Error(emsg);\n      e.code = f.fields.replyCode;\n      if (isFatalError(e)) {\n        connection.emit('error', e);\n      }\n      connection.toClosed(s, e);\n    }\n    else if (f.id === defs.ConnectionBlocked) {\n      connection.emit('blocked', f.fields.reason);\n    }\n    else if (f.id === defs.ConnectionUnblocked) {\n      connection.emit('unblocked');\n    }\n    else {\n      connection.closeWithError(\n        fmt(\"Unexpected frame on channel 0\"),\n        constants.UNEXPECTED_FRAME,\n        new Error(fmt(\"Unexpected frame on channel 0: %s\",\n                      inspect(f, false))));\n    }\n  };\n}\n\n// This changed between versions, as did the codec, methods, etc. AMQP\n// 0-9-1 is fairly similar to 0.8, but better, and nothing implements\n// 0.8 that doesn't implement 0-9-1. In other words, it doesn't make\n// much sense to generalise here.\nC.sendProtocolHeader = function() {\n  this.sendBytes(frame.PROTOCOL_HEADER);\n};\n\n/*\n  The frighteningly complicated opening protocol (spec section 2.2.4):\n\n     Client -> Server\n\n       protocol header ->\n         <- start\n       start-ok ->\n     .. next two zero or more times ..\n         <- secure\n       secure-ok ->\n         <- tune\n       tune-ok ->\n       open ->\n         <- open-ok\n\nIf I'm only supporting SASL's PLAIN mechanism (which I am for the time\nbeing), it gets a bit easier since the server won't in general send\nback a `secure`, it'll just send `tune` after the `start-ok`.\n(SASL PLAIN: http://tools.ietf.org/html/rfc4616)\n\n*/\n\nC.open = function(allFields, openCallback0) {\n  var self = this;\n  var openCallback = openCallback0 || function() {};\n\n  // This is where we'll put our negotiated values\n  var tunedOptions = Object.create(allFields);\n\n  function wait(k) {\n    self.step(function(err, frame) {\n      if (err !== null) bail(err);\n      else if (frame.channel !== 0) {\n        bail(new Error(\n          fmt(\"Frame on channel != 0 during handshake: %s\",\n              inspect(frame, false))));\n      }\n      else k(frame);\n    });\n  }\n\n  function expect(Method, k) {\n    wait(function(frame) {\n      if (frame.id === Method) k(frame);\n      else {\n        bail(new Error(\n          fmt(\"Expected %s; got %s\",\n              methodName(Method), inspect(frame, false))));\n      }\n    });\n  }\n\n  function bail(err) {\n    openCallback(err);\n  }\n\n  function send(Method) {\n    // This can throw an exception if there's some problem with the\n    // options; e.g., something is a string instead of a number.\n    try { self.sendMethod(0, Method, tunedOptions); }\n    catch (err) { bail(err); }\n  }\n\n  function negotiate(server, desired) {\n    // We get sent values for channelMax, frameMax and heartbeat,\n    // which we may accept or lower (subject to a minimum for\n    // frameMax, but we'll leave that to the server to enforce). In\n    // all cases, `0` really means \"no limit\", or rather the highest\n    // value in the encoding, e.g., unsigned short for channelMax.\n    if (server === 0 || desired === 0) {\n      // i.e., whichever places a limit, if either\n      return Math.max(server, desired);\n    }\n    else {\n      return Math.min(server, desired);\n    }\n  }\n\n  function onStart(start) {\n    var mechanisms = start.fields.mechanisms.toString().split(' ');\n    if (mechanisms.indexOf(allFields.mechanism) < 0) {\n      bail(new Error(fmt('SASL mechanism %s is not provided by the server',\n                         allFields.mechanism)));\n      return;\n    }\n    send(defs.ConnectionStartOk);\n    wait(afterStartOk);\n  }\n\n  function afterStartOk(reply) {\n    switch (reply.id) {\n    case defs.ConnectionSecure:\n      bail(new Error(\n        \"Wasn't expecting to have to go through secure\"));\n      break;\n    case defs.ConnectionClose:\n      bail(new Error(fmt(\"Handshake terminated by server: %s\",\n                         closeMsg(reply))));\n      break;\n    case defs.ConnectionTune:\n      var fields = reply.fields;\n      tunedOptions.frameMax =\n        negotiate(fields.frameMax, allFields.frameMax);\n      tunedOptions.channelMax =\n        negotiate(fields.channelMax, allFields.channelMax);\n      tunedOptions.heartbeat =\n        negotiate(fields.heartbeat, allFields.heartbeat);\n      send(defs.ConnectionTuneOk);\n      send(defs.ConnectionOpen);\n      expect(defs.ConnectionOpenOk, onOpenOk);\n      break;\n    default:\n      bail(new Error(\n        fmt(\"Expected connection.secure, connection.close, \" +\n            \"or connection.tune during handshake; got %s\",\n            inspect(reply, false))));\n      break;\n    }\n  }\n\n  function onOpenOk(openOk) {\n    // Impose the maximum of the encoded value, if the negotiated\n    // value is zero, meaning \"no, no limits\"\n    self.channelMax = tunedOptions.channelMax || 0xffff;\n    self.frameMax = tunedOptions.frameMax || 0xffffffff;\n    // 0 means \"no heartbeat\", rather than \"maximum period of\n    // heartbeating\"\n    self.heartbeat = tunedOptions.heartbeat;\n    self.heartbeater = self.startHeartbeater();\n    self.accept = mainAccept;\n    succeed(openOk);\n  }\n\n  // If the server closes the connection, it's probably because of\n  // something we did\n  function endWhileOpening(err) {\n    bail(err || new Error('Socket closed abruptly ' +\n                          'during opening handshake'));\n  }\n\n  this.stream.on('end', endWhileOpening);\n  this.stream.on('error', endWhileOpening);\n\n  function succeed(ok) {\n    self.stream.removeListener('end', endWhileOpening);\n    self.stream.removeListener('error', endWhileOpening);\n    self.stream.on('error', self.onSocketError.bind(self));\n    self.stream.on('end', self.onSocketError.bind(\n      self, new Error('Unexpected close')));\n    self.on('frameError', self.onSocketError.bind(self));\n    self.acceptLoop();\n    openCallback(null, ok);\n  }\n\n  // Now kick off the handshake by prompting the server\n  this.sendProtocolHeader();\n  expect(defs.ConnectionStart, onStart);\n};\n\n// Closing things: AMQP has a closing handshake that applies to\n// closing both connects and channels. As the initiating party, I send\n// Close, then ignore all frames until I see either CloseOK --\n// which signifies that the other party has seen the Close and shut\n// the connection or channel down, so it's fine to free resources; or\n// Close, which means the other party also wanted to close the\n// whatever, and I should send CloseOk so it can free resources,\n// then go back to waiting for the CloseOk. If I receive a Close\n// out of the blue, I should throw away any unsent frames (they will\n// be ignored anyway) and send CloseOk, then clean up resources. In\n// general, Close out of the blue signals an error (or a forced\n// closure, which may as well be an error).\n//\n//  RUNNING [1] --- send Close ---> Closing [2] ---> recv Close --+\n//     |                               |                         [3]\n//     |                               +------ send CloseOk ------+\n//  recv Close                   recv CloseOk\n//     |                               |\n//     V                               V\n//  Ended [4] ---- send CloseOk ---> Closed [5]\n//\n// [1] All frames accepted; getting a Close frame from the server\n// moves to Ended; client may initiate a close by sending Close\n// itself.\n// [2] Client has initiated a close; only CloseOk or (simulataneously\n// sent) Close is accepted.\n// [3] Simultaneous close\n// [4] Server won't send any more frames; accept no more frames, send\n// CloseOk.\n// [5] Fully closed, client will send no more, server will send no\n// more. Signal 'close' or 'error'.\n//\n// There are two signalling mechanisms used in the API. The first is\n// that calling `close` will return a promise, that will either\n// resolve once the connection or channel is cleanly shut down, or\n// will reject if the shutdown times out.\n//\n// The second is the 'close' and 'error' events. These are\n// emitted as above. The events will fire *before* promises are\n// resolved.\n\n// Close the connection without even giving a reason. Typical.\nC.close = function(closeCallback) {\n  var k = closeCallback && function() { closeCallback(null); };\n  this.closeBecause(\"Cheers, thanks\", constants.REPLY_SUCCESS, k);\n};\n\n// Close with a reason and a 'code'. I'm pretty sure RabbitMQ totally\n// ignores these; maybe it logs them. The continuation will be invoked\n// when the CloseOk has been received, and before the 'close' event.\nC.closeBecause = function(reason, code, k) {\n  this.sendMethod(0, defs.ConnectionClose, {\n    replyText: reason,\n    replyCode: code,\n    methodId: 0, classId: 0\n  });\n  var s = stackCapture('closeBecause called: ' + reason);\n  this.toClosing(s, k);\n};\n\nC.closeWithError = function(reason, code, error) {\n  this.emit('error', error);\n  this.closeBecause(reason, code);\n};\n\nC.onSocketError = function(err) {\n  if (!this.expectSocketClose) {\n    // forestall any more calls to onSocketError, since we're signed\n    // up for `'error'` *and* `'end'`\n    this.expectSocketClose = true;\n    this.emit('error', err);\n    var s = stackCapture('Socket error');\n    this.toClosed(s, err);\n  }\n};\n\nfunction invalidOp(msg, stack) {\n  return function() {\n    throw new IllegalOperationError(msg, stack);\n  };\n}\n\nfunction invalidateSend(conn, msg, stack) {\n  conn.sendMethod = conn.sendContent = conn.sendMessage =\n    invalidOp(msg, stack);\n}\n\n// A close has been initiated. Repeat: a close has been initiated.\n// This means we should not send more frames, anyway they will be\n// ignored. We also have to shut down all the channels.\nC.toClosing = function(capturedStack, k) {\n  var send = this.sendMethod.bind(this);\n\n  this.accept = function(f) {\n    if (f.id === defs.ConnectionCloseOk) {\n      if (k) k();\n      var s = stackCapture('ConnectionCloseOk received');\n      this.toClosed(s, undefined);\n    }\n    else if (f.id === defs.ConnectionClose) {\n      send(0, defs.ConnectionCloseOk, {});\n    }\n    // else ignore frame\n  };\n  invalidateSend(this, 'Connection closing', capturedStack);\n};\n\nC._closeChannels = function(capturedStack) {\n  for (var i = 1; i < this.channels.length; i++) {\n    var ch = this.channels[i];\n    if (ch !== null) {\n      ch.channel.toClosed(capturedStack); // %%% or with an error? not clear\n    }\n  }\n};\n\n// A close has been confirmed. Cease all communication.\nC.toClosed = function(capturedStack, maybeErr) {\n  this._closeChannels(capturedStack);\n  var info = fmt('Connection closed (%s)',\n                 (maybeErr) ? maybeErr.toString() : 'by client');\n  // Tidy up, invalidate enverything, dynamite the bridges.\n  invalidateSend(this, info, capturedStack);\n  this.accept = invalidOp(info, capturedStack);\n  this.close = function(cb) {\n    cb && cb(new IllegalOperationError(info, capturedStack));\n  };\n  if (this.heartbeater) this.heartbeater.clear();\n  // This is certainly true now, if it wasn't before\n  this.expectSocketClose = true;\n  this.stream.end();\n  this.emit('close', maybeErr);\n};\n\n// ===\n\nC.startHeartbeater = function() {\n  if (this.heartbeat === 0) return null;\n  else {\n    var self = this;\n    var hb = new Heart(this.heartbeat,\n                       this.checkSend.bind(this),\n                       this.checkRecv.bind(this));\n    hb.on('timeout', function() {\n      var hberr = new Error(\"Heartbeat timeout\");\n      self.emit('error', hberr);\n      var s = stackCapture('Heartbeat timeout');\n      self.toClosed(s, hberr);\n    });\n    hb.on('beat', function() {\n      self.sendHeartbeat();\n    });\n    return hb;\n  }\n};\n\n// I use an array to keep track of the channels, rather than an\n// object. The channel identifiers are numbers, and allocated by the\n// connection. If I try to allocate low numbers when they are\n// available (which I do, by looking from the start of the bitset),\n// this ought to keep the array small, and out of 'sparse array\n// storage'. I also set entries to null, rather than deleting them, in\n// the expectation that the next channel allocation will fill the slot\n// again rather than growing the array. See\n// http://www.html5rocks.com/en/tutorials/speed/v8/\nC.freshChannel = function(channel, options) {\n  var next = this.freeChannels.nextClearBit(1);\n  if (next < 0 || next > this.channelMax)\n    throw new Error(\"No channels left to allocate\");\n  this.freeChannels.set(next);\n\n  var hwm = (options && options.highWaterMark) || DEFAULT_WRITE_HWM;\n  var writeBuffer = new PassThrough({\n    objectMode: true, highWaterMark: hwm\n  });\n  this.channels[next] = {channel: channel, buffer: writeBuffer};\n  writeBuffer.on('drain', function() {\n    channel.onBufferDrain();\n  });\n  this.muxer.pipeFrom(writeBuffer);\n  return next;\n};\n\nC.releaseChannel = function(channel) {\n  this.freeChannels.clear(channel);\n  var buffer = this.channels[channel].buffer;\n  this.muxer.unpipeFrom(buffer);\n  this.channels[channel] = null;\n};\n\nC.acceptLoop = function() {\n  var self = this;\n\n  function go() {\n    try {\n      var f; while (f = self.recvFrame()) self.accept(f);\n    }\n    catch (e) {\n      self.emit('frameError', e);\n    }\n  }\n  self.stream.on('readable', go);\n  go();\n};\n\nC.step = function(cb) {\n  var self = this;\n  function recv() {\n    var f;\n    try {\n      f = self.recvFrame();\n    }\n    catch (e) {\n      cb(e, null);\n      return;\n    }\n    if (f) cb(null, f);\n    else self.stream.once('readable', recv);\n  }\n  recv();\n};\n\nC.checkSend = function() {\n  var check = this.sentSinceLastCheck;\n  this.sentSinceLastCheck = false;\n  return check;\n}\n\nC.checkRecv = function() {\n  var check = this.recvSinceLastCheck;\n  this.recvSinceLastCheck = false;\n  return check;\n}\n\nC.sendBytes = function(bytes) {\n  this.sentSinceLastCheck = true;\n  this.stream.write(bytes);\n};\n\nC.sendHeartbeat = function() {\n  return this.sendBytes(frame.HEARTBEAT_BUF);\n};\n\nvar encodeMethod = defs.encodeMethod;\nvar encodeProperties = defs.encodeProperties;\n\nC.sendMethod = function(channel, Method, fields) {\n  var frame = encodeMethod(Method, channel, fields);\n  this.sentSinceLastCheck = true;\n  var buffer = this.channels[channel].buffer;\n  return buffer.write(frame);\n};\n\nC.sendMessage = function(channel,\n                         Method, fields,\n                         Properties, props,\n                         content) {\n  if (!Buffer.isBuffer(content))\n    throw new TypeError('content is not a buffer');\n\n  var mframe = encodeMethod(Method, channel, fields);\n  var pframe = encodeProperties(Properties, channel,\n                                content.length, props);\n  var buffer = this.channels[channel].buffer;\n  this.sentSinceLastCheck = true;\n\n  var methodHeaderLen = mframe.length + pframe.length;\n  var bodyLen = (content.length > 0) ?\n    content.length + FRAME_OVERHEAD : 0;\n  var allLen = methodHeaderLen + bodyLen;\n\n  if (allLen < SINGLE_CHUNK_THRESHOLD) {\n    var all = Buffer.alloc(allLen);\n    var offset = mframe.copy(all, 0);\n    offset += pframe.copy(all, offset);\n\n    if (bodyLen > 0)\n      makeBodyFrame(channel, content).copy(all, offset);\n    return buffer.write(all);\n  }\n  else {\n    if (methodHeaderLen < SINGLE_CHUNK_THRESHOLD) {\n      var both = Buffer.alloc(methodHeaderLen);\n      var offset = mframe.copy(both, 0);\n      pframe.copy(both, offset);\n      buffer.write(both);\n    }\n    else {\n      buffer.write(mframe);\n      buffer.write(pframe);\n    }\n    return this.sendContent(channel, content);\n  }\n};\n\nvar FRAME_OVERHEAD = defs.FRAME_OVERHEAD;\nvar makeBodyFrame = frame.makeBodyFrame;\n\nC.sendContent = function(channel, body) {\n  if (!Buffer.isBuffer(body)) {\n    throw new TypeError(fmt(\"Expected buffer; got %s\", body));\n  }\n  var writeResult = true;\n  var buffer = this.channels[channel].buffer;\n\n  var maxBody = this.frameMax - FRAME_OVERHEAD;\n\n  for (var offset = 0; offset < body.length; offset += maxBody) {\n    var end = offset + maxBody;\n    var slice = (end > body.length) ? body.slice(offset) : body.slice(offset, end);\n    var bodyFrame = makeBodyFrame(channel, slice);\n    writeResult = buffer.write(bodyFrame);\n  }\n  this.sentSinceLastCheck = true;\n  return writeResult;\n};\n\nvar parseFrame = frame.parseFrame;\nvar decodeFrame = frame.decodeFrame;\n\nC.recvFrame = function() {\n  // %%% identifying invariants might help here?\n  var frame = parseFrame(this.rest, this.frameMax);\n\n  if (!frame) {\n    var incoming = this.stream.read();\n    if (incoming === null) {\n      return false;\n    }\n    else {\n      this.recvSinceLastCheck = true;\n      this.rest = Buffer.concat([this.rest, incoming]);\n      return this.recvFrame();\n    }\n  }\n  else {\n    this.rest = frame.rest;\n    return decodeFrame(frame);\n  }\n};\n\nfunction wrapStream(s) {\n  if (s instanceof Duplex) return s;\n  else {\n    var ws = new Duplex();\n    ws.wrap(s); //wraps the readable side of things\n    ws._write = function(chunk, encoding, callback) {\n      return s.write(chunk, encoding, callback);\n    };\n    return ws;\n  }\n}\n\nfunction isFatalError(error) {\n  switch (error && error.code) {\n  case defs.constants.CONNECTION_FORCED:\n  case defs.constants.REPLY_SUCCESS:\n    return false;\n  default:\n    return true;\n  }\n}\n\nmodule.exports.Connection = Connection;\nmodule.exports.isFatalError = isFatalError;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}