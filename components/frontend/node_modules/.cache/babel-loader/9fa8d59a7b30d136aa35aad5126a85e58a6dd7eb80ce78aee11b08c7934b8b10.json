{"ast":null,"code":"var crypto = require('crypto');\nvar constants = require('constants');\nvar schemes = require('../schemes/schemes.js');\nmodule.exports = function (keyPair, options) {\n  var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);\n  return {\n    encrypt: function (buffer, usePrivate) {\n      if (usePrivate) {\n        var padding = constants.RSA_PKCS1_PADDING;\n        if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n          padding = options.encryptionSchemeOptions.padding;\n        }\n        return crypto.privateEncrypt({\n          key: options.rsaUtils.exportKey('private'),\n          padding: padding\n        }, buffer);\n      } else {\n        var padding = constants.RSA_PKCS1_OAEP_PADDING;\n        if (options.encryptionScheme === 'pkcs1') {\n          padding = constants.RSA_PKCS1_PADDING;\n        }\n        if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n          padding = options.encryptionSchemeOptions.padding;\n        }\n        var data = buffer;\n        if (padding === constants.RSA_NO_PADDING) {\n          data = pkcs1Scheme.pkcs0pad(buffer);\n        }\n        return crypto.publicEncrypt({\n          key: options.rsaUtils.exportKey('public'),\n          padding: padding\n        }, data);\n      }\n    },\n    decrypt: function (buffer, usePublic) {\n      if (usePublic) {\n        var padding = constants.RSA_PKCS1_PADDING;\n        if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n          padding = options.encryptionSchemeOptions.padding;\n        }\n        return crypto.publicDecrypt({\n          key: options.rsaUtils.exportKey('public'),\n          padding: padding\n        }, buffer);\n      } else {\n        var padding = constants.RSA_PKCS1_OAEP_PADDING;\n        if (options.encryptionScheme === 'pkcs1') {\n          padding = constants.RSA_PKCS1_PADDING;\n        }\n        if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n          padding = options.encryptionSchemeOptions.padding;\n        }\n        var res = crypto.privateDecrypt({\n          key: options.rsaUtils.exportKey('private'),\n          padding: padding\n        }, buffer);\n        if (padding === constants.RSA_NO_PADDING) {\n          return pkcs1Scheme.pkcs0unpad(res);\n        }\n        return res;\n      }\n    }\n  };\n};","map":{"version":3,"names":["crypto","require","constants","schemes","module","exports","keyPair","options","pkcs1Scheme","pkcs1","makeScheme","encrypt","buffer","usePrivate","padding","RSA_PKCS1_PADDING","encryptionSchemeOptions","privateEncrypt","key","rsaUtils","exportKey","RSA_PKCS1_OAEP_PADDING","encryptionScheme","data","RSA_NO_PADDING","pkcs0pad","publicEncrypt","decrypt","usePublic","publicDecrypt","res","privateDecrypt","pkcs0unpad"],"sources":["/Users/anandarunima/Documents/Arunima/Coursework/sauce_labs-fizzbuzzbash/fizzbuzzbass/components/node_modules/node-rsa/src/encryptEngines/io.js"],"sourcesContent":["var crypto = require('crypto');\nvar constants = require('constants');\nvar schemes = require('../schemes/schemes.js');\n\nmodule.exports = function (keyPair, options) {\n    var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);\n\n    return {\n        encrypt: function (buffer, usePrivate) {\n            if (usePrivate) {\n                var padding = constants.RSA_PKCS1_PADDING;\n                if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n                    padding = options.encryptionSchemeOptions.padding;\n                }\n                return crypto.privateEncrypt({\n                    key: options.rsaUtils.exportKey('private'),\n                    padding: padding\n                }, buffer);\n            } else {\n                var padding = constants.RSA_PKCS1_OAEP_PADDING;\n                if (options.encryptionScheme === 'pkcs1') {\n                    padding = constants.RSA_PKCS1_PADDING;\n                }\n                if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n                    padding = options.encryptionSchemeOptions.padding;\n                }\n\n                var data = buffer;\n                if (padding === constants.RSA_NO_PADDING) {\n                    data = pkcs1Scheme.pkcs0pad(buffer);\n                }\n\n                return crypto.publicEncrypt({\n                    key: options.rsaUtils.exportKey('public'),\n                    padding: padding\n                }, data);\n            }\n        },\n\n        decrypt: function (buffer, usePublic) {\n            if (usePublic) {\n                var padding = constants.RSA_PKCS1_PADDING;\n                if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n                    padding = options.encryptionSchemeOptions.padding;\n                }\n                return crypto.publicDecrypt({\n                    key: options.rsaUtils.exportKey('public'),\n                    padding: padding\n                }, buffer);\n            } else {\n                var padding = constants.RSA_PKCS1_OAEP_PADDING;\n                if (options.encryptionScheme === 'pkcs1') {\n                    padding = constants.RSA_PKCS1_PADDING;\n                }\n                if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n                    padding = options.encryptionSchemeOptions.padding;\n                }\n                var res = crypto.privateDecrypt({\n                    key: options.rsaUtils.exportKey('private'),\n                    padding: padding\n                }, buffer);\n\n                if (padding === constants.RSA_NO_PADDING) {\n                    return pkcs1Scheme.pkcs0unpad(res);\n                }\n                return res;\n            }\n        }\n    };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}