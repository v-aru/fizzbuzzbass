{"ast":null,"code":"var dgram = require('dgram'),\n  dns = require('dns');\n\n/**\n * The UDP Client for StatsD\n * @param options\n *   @option host        {String}  The host to connect to default: localhost\n *   @option port        {String|Integer} The port to connect to default: 8125\n *   @option prefix      {String}  An optional prefix to assign to each stat name sent\n *   @option suffix      {String}  An optional suffix to assign to each stat name sent\n *   @option globalize   {boolean} An optional boolean to add \"statsd\" as an object in the global namespace\n *   @option cacheDns    {boolean} An optional option to only lookup the hostname -> ip address once\n *   @option mock        {boolean} An optional boolean indicating this Client is a mock object, no stats are sent.\n *   @option global_tags {Array=} Optional tags that will be added to every metric\n * @constructor\n */\nvar Client = function (host, port, prefix, suffix, globalize, cacheDns, mock, global_tags) {\n  var options = host || {},\n    self = this;\n  if (arguments.length > 1 || typeof host === 'string') {\n    options = {\n      host: host,\n      port: port,\n      prefix: prefix,\n      suffix: suffix,\n      globalize: globalize,\n      cacheDns: cacheDns,\n      mock: mock === true,\n      global_tags: global_tags\n    };\n  }\n  this.host = options.host || 'localhost';\n  this.port = options.port || 8125;\n  this.prefix = options.prefix || '';\n  this.suffix = options.suffix || '';\n  this.socket = dgram.createSocket('udp4');\n  this.mock = options.mock;\n  this.global_tags = options.global_tags || [];\n  if (options.cacheDns === true) {\n    dns.lookup(options.host, function (err, address, family) {\n      if (err == null) {\n        self.host = address;\n      }\n    });\n  }\n  if (options.globalize) {\n    global.statsd = this;\n  }\n};\n\n/**\n * Represents the timing stat\n * @param stat {String|Array} The stat(s) to send\n * @param time {Number} The time in milliseconds to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.timing = function (stat, time, sampleRate, tags, callback) {\n  this.sendAll(stat, time, 'ms', sampleRate, tags, callback);\n};\n\n/**\n * Increments a stat by a specified amount\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.increment = function (stat, value, sampleRate, tags, callback) {\n  this.sendAll(stat, value || 1, 'c', sampleRate, tags, callback);\n};\n\n/**\n * Decrements a stat by a specified amount\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.decrement = function (stat, value, sampleRate, tags, callback) {\n  this.sendAll(stat, -value || -1, 'c', sampleRate, tags, callback);\n};\n\n/**\n * Represents the histogram stat\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.histogram = function (stat, value, sampleRate, tags, callback) {\n  this.sendAll(stat, value, 'h', sampleRate, tags, callback);\n};\n\n/**\n * Gauges a stat by a specified amount\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.gauge = function (stat, value, sampleRate, tags, callback) {\n  this.sendAll(stat, value, 'g', sampleRate, tags, callback);\n};\n\n/**\n * Counts unique values by a specified amount\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.unique = Client.prototype.set = function (stat, value, sampleRate, tags, callback) {\n  this.sendAll(stat, value, 's', sampleRate, tags, callback);\n};\n\n/**\n * Checks if stats is an array and sends all stats calling back once all have sent\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.sendAll = function (stat, value, type, sampleRate, tags, callback) {\n  var completed = 0,\n    calledback = false,\n    sentBytes = 0,\n    self = this;\n  if (sampleRate && typeof sampleRate !== 'number') {\n    callback = tags;\n    tags = sampleRate;\n    sampleRate = undefined;\n  }\n  if (tags && !Array.isArray(tags)) {\n    callback = tags;\n    tags = undefined;\n  }\n\n  /**\n   * Gets called once for each callback, when all callbacks return we will\n   * call back from the function\n   * @private\n   */\n  function onSend(error, bytes) {\n    completed += 1;\n    if (calledback || typeof callback !== 'function') {\n      return;\n    }\n    if (error) {\n      calledback = true;\n      return callback(error);\n    }\n    sentBytes += bytes;\n    if (completed === stat.length) {\n      callback(null, sentBytes);\n    }\n  }\n  if (Array.isArray(stat)) {\n    stat.forEach(function (item) {\n      self.send(item, value, type, sampleRate, tags, onSend);\n    });\n  } else {\n    this.send(stat, value, type, sampleRate, tags, callback);\n  }\n};\n\n/**\n * Sends a stat across the wire\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param type {String} The type of message to send to statsd\n * @param sampleRate {Number} The Number of times to sample (0 to 1)\n * @param tags {Array} The Array of tags to add to metrics\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.send = function (stat, value, type, sampleRate, tags, callback) {\n  var message = this.prefix + stat + this.suffix + ':' + value + '|' + type,\n    buf,\n    merged_tags = [];\n  if (sampleRate && sampleRate < 1) {\n    if (Math.random() < sampleRate) {\n      message += '|@' + sampleRate;\n    } else {\n      //don't want to send if we don't meet the sample ratio\n      return;\n    }\n  }\n  if (tags && Array.isArray(tags)) {\n    merged_tags = merged_tags.concat(tags);\n  }\n  if (this.global_tags && Array.isArray(this.global_tags)) {\n    merged_tags = merged_tags.concat(this.global_tags);\n  }\n  if (merged_tags.length > 0) {\n    message += '|#' + merged_tags.join(',');\n  }\n\n  // Only send this stat if we're not a mock Client.\n  if (!this.mock) {\n    buf = new Buffer(message);\n    this.socket.send(buf, 0, buf.length, this.port, this.host, callback);\n  } else {\n    if (typeof callback === 'function') {\n      callback(null, 0);\n    }\n  }\n};\n\n/**\n * Close the underlying socket and stop listening for data on it.\n */\nClient.prototype.close = function () {\n  this.socket.close();\n};\nexports = module.exports = Client;\nexports.StatsD = Client;","map":{"version":3,"names":["dgram","require","dns","Client","host","port","prefix","suffix","globalize","cacheDns","mock","global_tags","options","self","arguments","length","socket","createSocket","lookup","err","address","family","global","statsd","prototype","timing","stat","time","sampleRate","tags","callback","sendAll","increment","value","decrement","histogram","gauge","unique","set","type","completed","calledback","sentBytes","undefined","Array","isArray","onSend","error","bytes","forEach","item","send","message","buf","merged_tags","Math","random","concat","join","Buffer","close","exports","module","StatsD"],"sources":["/Users/anandarunima/Documents/Arunima/Coursework/sauce_labs-fizzbuzzbash/fizzbuzzbass/components/node_modules/node-statsd/lib/statsd.js"],"sourcesContent":["var dgram = require('dgram'),\n    dns   = require('dns');\n\n/**\n * The UDP Client for StatsD\n * @param options\n *   @option host        {String}  The host to connect to default: localhost\n *   @option port        {String|Integer} The port to connect to default: 8125\n *   @option prefix      {String}  An optional prefix to assign to each stat name sent\n *   @option suffix      {String}  An optional suffix to assign to each stat name sent\n *   @option globalize   {boolean} An optional boolean to add \"statsd\" as an object in the global namespace\n *   @option cacheDns    {boolean} An optional option to only lookup the hostname -> ip address once\n *   @option mock        {boolean} An optional boolean indicating this Client is a mock object, no stats are sent.\n *   @option global_tags {Array=} Optional tags that will be added to every metric\n * @constructor\n */\nvar Client = function (host, port, prefix, suffix, globalize, cacheDns, mock, global_tags) {\n  var options = host || {},\n         self = this;\n\n  if(arguments.length > 1 || typeof(host) === 'string'){\n    options = {\n      host        : host,\n      port        : port,\n      prefix      : prefix,\n      suffix      : suffix,\n      globalize   : globalize,\n      cacheDns    : cacheDns,\n      mock        : mock === true,\n      global_tags : global_tags\n    };\n  }\n\n  this.host        = options.host || 'localhost';\n  this.port        = options.port || 8125;\n  this.prefix      = options.prefix || '';\n  this.suffix      = options.suffix || '';\n  this.socket      = dgram.createSocket('udp4');\n  this.mock        = options.mock;\n  this.global_tags = options.global_tags || [];\n\n  if(options.cacheDns === true){\n    dns.lookup(options.host, function(err, address, family){\n      if(err == null){\n        self.host = address;\n      }\n    });\n  }\n\n  if(options.globalize){\n    global.statsd = this;\n  }\n};\n\n/**\n * Represents the timing stat\n * @param stat {String|Array} The stat(s) to send\n * @param time {Number} The time in milliseconds to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.timing = function (stat, time, sampleRate, tags, callback) {\n  this.sendAll(stat, time, 'ms', sampleRate, tags, callback);\n};\n\n/**\n * Increments a stat by a specified amount\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.increment = function (stat, value, sampleRate, tags, callback) {\n  this.sendAll(stat, value || 1, 'c', sampleRate, tags, callback);\n};\n\n/**\n * Decrements a stat by a specified amount\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.decrement = function (stat, value, sampleRate, tags, callback) {\n  this.sendAll(stat, -value || -1, 'c', sampleRate, tags, callback);\n};\n\n/**\n * Represents the histogram stat\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.histogram = function (stat, value, sampleRate, tags, callback) {\n  this.sendAll(stat, value, 'h', sampleRate, tags, callback);\n};\n\n\n/**\n * Gauges a stat by a specified amount\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.gauge = function (stat, value, sampleRate, tags, callback) {\n  this.sendAll(stat, value, 'g', sampleRate, tags, callback);\n};\n\n/**\n * Counts unique values by a specified amount\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.unique =\nClient.prototype.set = function (stat, value, sampleRate, tags, callback) {\n  this.sendAll(stat, value, 's', sampleRate, tags, callback);\n};\n\n/**\n * Checks if stats is an array and sends all stats calling back once all have sent\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param sampleRate {Number=} The Number of times to sample (0 to 1). Optional.\n * @param tags {Array=} The Array of tags to add to metrics. Optional.\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.sendAll = function(stat, value, type, sampleRate, tags, callback){\n  var completed = 0,\n      calledback = false,\n      sentBytes = 0,\n      self = this;\n\n  if(sampleRate && typeof sampleRate !== 'number'){\n    callback = tags;\n    tags = sampleRate;\n    sampleRate = undefined;\n  }\n\n  if(tags && !Array.isArray(tags)){\n    callback = tags;\n    tags = undefined;\n  }\n\n  /**\n   * Gets called once for each callback, when all callbacks return we will\n   * call back from the function\n   * @private\n   */\n  function onSend(error, bytes){\n    completed += 1;\n    if(calledback || typeof callback !== 'function'){\n      return;\n    }\n\n    if(error){\n      calledback = true;\n      return callback(error);\n    }\n\n    sentBytes += bytes;\n    if(completed === stat.length){\n      callback(null, sentBytes);\n    }\n  }\n\n  if(Array.isArray(stat)){\n    stat.forEach(function(item){\n      self.send(item, value, type, sampleRate, tags, onSend);\n    });\n  } else {\n    this.send(stat, value, type, sampleRate, tags, callback);\n  }\n};\n\n/**\n * Sends a stat across the wire\n * @param stat {String|Array} The stat(s) to send\n * @param value The value to send\n * @param type {String} The type of message to send to statsd\n * @param sampleRate {Number} The Number of times to sample (0 to 1)\n * @param tags {Array} The Array of tags to add to metrics\n * @param callback {Function=} Callback when message is done being delivered. Optional.\n */\nClient.prototype.send = function (stat, value, type, sampleRate, tags, callback) {\n  var message = this.prefix + stat + this.suffix + ':' + value + '|' + type,\n      buf,\n      merged_tags = [];\n\n  if(sampleRate && sampleRate < 1){\n    if(Math.random() < sampleRate){\n      message += '|@' + sampleRate;\n    } else {\n      //don't want to send if we don't meet the sample ratio\n      return;\n    }\n  }\n\n  if(tags && Array.isArray(tags)){\n    merged_tags = merged_tags.concat(tags);\n  }\n  if(this.global_tags && Array.isArray(this.global_tags)){\n    merged_tags = merged_tags.concat(this.global_tags);\n  }\n  if(merged_tags.length > 0){\n    message += '|#' + merged_tags.join(',');\n  }\n\n  // Only send this stat if we're not a mock Client.\n  if(!this.mock) {\n    buf = new Buffer(message);\n    this.socket.send(buf, 0, buf.length, this.port, this.host, callback);\n  } else {\n    if(typeof callback === 'function'){\n      callback(null, 0);\n    }\n  }\n};\n\n/**\n * Close the underlying socket and stop listening for data on it.\n */\nClient.prototype.close = function(){\n    this.socket.close();\n}\n\nexports = module.exports = Client;\nexports.StatsD = Client;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}