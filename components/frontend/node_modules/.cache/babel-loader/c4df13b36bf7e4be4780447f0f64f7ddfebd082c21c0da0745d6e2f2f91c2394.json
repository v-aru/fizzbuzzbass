{"ast":null,"code":"module.exports = function () {\n  /*\n   * Generated by PEG.js 0.7.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function quote(s) {\n    /*\n     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a\n     * string literal except for the closing quote character, backslash,\n     * carriage return, line separator, paragraph separator, and line feed.\n     * Any character may appear in the form of an escape sequence.\n     *\n     * For portability, we also escape escape all control and non-ASCII\n     * characters. Note that \"\\0\" and \"\\v\" escape sequences are not used\n     * because JSHint does not like the first and IE the second.\n     */\n    return '\"' + s.replace(/\\\\/g, '\\\\\\\\') // backslash\n    .replace(/\"/g, '\\\\\"') // closing quote character\n    .replace(/\\x08/g, '\\\\b') // backspace\n    .replace(/\\t/g, '\\\\t') // horizontal tab\n    .replace(/\\n/g, '\\\\n') // line feed\n    .replace(/\\f/g, '\\\\f') // form feed\n    .replace(/\\r/g, '\\\\r') // carriage return\n    .replace(/[\\x00-\\x07\\x0B\\x0E-\\x1F\\x80-\\uFFFF]/g, escape) + '\"';\n  }\n  var result = {\n    /*\n     * Parses the input with a generated parser. If the parsing is successfull,\n     * returns a value explicitly or implicitly specified by the grammar from\n     * which the parser was generated (see |PEG.buildParser|). If the parsing is\n     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.\n     */\n    parse: function (input, startRule) {\n      var parseFunctions = {\n        \"start\": parse_start,\n        \"segmentTail\": parse_segmentTail,\n        \"segment\": parse_segment,\n        \"string\": parse_string,\n        \"chars\": parse_chars,\n        \"char\": parse_char,\n        \"hexDigit\": parse_hexDigit,\n        \"identifier\": parse_identifier,\n        \"number\": parse_number,\n        \"size\": parse_size,\n        \"specifierList\": parse_specifierList,\n        \"specifierTail\": parse_specifierTail,\n        \"specifier\": parse_specifier,\n        \"unit\": parse_unit,\n        \"ws\": parse_ws\n      };\n      if (startRule !== undefined) {\n        if (parseFunctions[startRule] === undefined) {\n          throw new Error(\"Invalid rule name: \" + quote(startRule) + \".\");\n        }\n      } else {\n        startRule = \"start\";\n      }\n      var pos = 0;\n      var reportFailures = 0;\n      var rightmostFailuresPos = 0;\n      var rightmostFailuresExpected = [];\n      function padLeft(input, padding, length) {\n        var result = input;\n        var padLength = length - input.length;\n        for (var i = 0; i < padLength; i++) {\n          result = padding + result;\n        }\n        return result;\n      }\n      function escape(ch) {\n        var charCode = ch.charCodeAt(0);\n        var escapeChar;\n        var length;\n        if (charCode <= 0xFF) {\n          escapeChar = 'x';\n          length = 2;\n        } else {\n          escapeChar = 'u';\n          length = 4;\n        }\n        return '\\\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);\n      }\n      function matchFailed(failure) {\n        if (pos < rightmostFailuresPos) {\n          return;\n        }\n        if (pos > rightmostFailuresPos) {\n          rightmostFailuresPos = pos;\n          rightmostFailuresExpected = [];\n        }\n        rightmostFailuresExpected.push(failure);\n      }\n      function parse_start() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_ws();\n        if (result0 !== null) {\n          result1 = parse_segment();\n          if (result1 !== null) {\n            result2 = [];\n            result3 = parse_segmentTail();\n            while (result3 !== null) {\n              result2.push(result3);\n              result3 = parse_segmentTail();\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, head, tail) {\n            tail.unshift(head);\n            return tail;\n          }(pos0, result0[1], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_segmentTail() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_ws();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 44) {\n            result1 = \",\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\",\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_ws();\n            if (result2 !== null) {\n              result3 = parse_segment();\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, seg) {\n            return seg;\n          }(pos0, result0[3]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_segment() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        result0 = parse_string();\n        if (result0 !== null) {\n          result0 = function (offset, str) {\n            return {\n              string: str\n            };\n          }(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          result0 = parse_identifier();\n          if (result0 !== null) {\n            result1 = parse_size();\n            result1 = result1 !== null ? result1 : \"\";\n            if (result1 !== null) {\n              result2 = parse_specifierList();\n              result2 = result2 !== null ? result2 : \"\";\n              if (result2 !== null) {\n                result0 = [result0, result1, result2];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, v, size, specs) {\n              return {\n                name: v,\n                size: size,\n                specifiers: specs\n              };\n            }(pos0, result0[0], result0[1], result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n          if (result0 === null) {\n            pos0 = pos;\n            pos1 = pos;\n            result0 = parse_number();\n            if (result0 !== null) {\n              result1 = parse_size();\n              result1 = result1 !== null ? result1 : \"\";\n              if (result1 !== null) {\n                result2 = parse_specifierList();\n                result2 = result2 !== null ? result2 : \"\";\n                if (result2 !== null) {\n                  result0 = [result0, result1, result2];\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n            if (result0 !== null) {\n              result0 = function (offset, v, size, specs) {\n                return {\n                  value: v,\n                  size: size,\n                  specifiers: specs\n                };\n              }(pos0, result0[0], result0[1], result0[2]);\n            }\n            if (result0 === null) {\n              pos = pos0;\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_string() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 34) {\n          result0 = \"\\\"\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"\\\\\\\"\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 34) {\n            result1 = \"\\\"\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"\\\\\\\"\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset) {\n            return \"\";\n          }(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 34) {\n            result0 = \"\\\"\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"\\\\\\\"\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            result1 = parse_chars();\n            if (result1 !== null) {\n              if (input.charCodeAt(pos) === 34) {\n                result2 = \"\\\"\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"\\\\\\\"\\\"\");\n                }\n              }\n              if (result2 !== null) {\n                result0 = [result0, result1, result2];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, chars) {\n              return chars;\n            }(pos0, result0[1]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_chars() {\n        var result0, result1;\n        var pos0;\n        pos0 = pos;\n        result1 = parse_char();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_char();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, chars) {\n            return chars.join(\"\");\n          }(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_char() {\n        var result0, result1, result2, result3, result4;\n        var pos0, pos1;\n        if (/^[^\"\\\\\\0-\\x1F]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[^\\\"\\\\\\\\\\\\0-\\\\x1F]\");\n          }\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          if (input.substr(pos, 2) === \"\\\\\\\"\") {\n            result0 = \"\\\\\\\"\";\n            pos += 2;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"\\\\\\\\\\\\\\\"\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            result0 = function (offset) {\n              return '\"';\n            }(pos0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n          if (result0 === null) {\n            pos0 = pos;\n            if (input.substr(pos, 2) === \"\\\\\\\\\") {\n              result0 = \"\\\\\\\\\";\n              pos += 2;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"\\\\\\\\\\\\\\\\\\\"\");\n              }\n            }\n            if (result0 !== null) {\n              result0 = function (offset) {\n                return \"\\\\\";\n              }(pos0);\n            }\n            if (result0 === null) {\n              pos = pos0;\n            }\n            if (result0 === null) {\n              pos0 = pos;\n              if (input.substr(pos, 2) === \"\\\\/\") {\n                result0 = \"\\\\/\";\n                pos += 2;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"\\\\\\\\/\\\"\");\n                }\n              }\n              if (result0 !== null) {\n                result0 = function (offset) {\n                  return \"/\";\n                }(pos0);\n              }\n              if (result0 === null) {\n                pos = pos0;\n              }\n              if (result0 === null) {\n                pos0 = pos;\n                if (input.substr(pos, 2) === \"\\\\b\") {\n                  result0 = \"\\\\b\";\n                  pos += 2;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"\\\\\\\\b\\\"\");\n                  }\n                }\n                if (result0 !== null) {\n                  result0 = function (offset) {\n                    return \"\\b\";\n                  }(pos0);\n                }\n                if (result0 === null) {\n                  pos = pos0;\n                }\n                if (result0 === null) {\n                  pos0 = pos;\n                  if (input.substr(pos, 2) === \"\\\\f\") {\n                    result0 = \"\\\\f\";\n                    pos += 2;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"\\\\\\\\f\\\"\");\n                    }\n                  }\n                  if (result0 !== null) {\n                    result0 = function (offset) {\n                      return \"\\f\";\n                    }(pos0);\n                  }\n                  if (result0 === null) {\n                    pos = pos0;\n                  }\n                  if (result0 === null) {\n                    pos0 = pos;\n                    if (input.substr(pos, 2) === \"\\\\n\") {\n                      result0 = \"\\\\n\";\n                      pos += 2;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"\\\\\\\\n\\\"\");\n                      }\n                    }\n                    if (result0 !== null) {\n                      result0 = function (offset) {\n                        return \"\\n\";\n                      }(pos0);\n                    }\n                    if (result0 === null) {\n                      pos = pos0;\n                    }\n                    if (result0 === null) {\n                      pos0 = pos;\n                      if (input.substr(pos, 2) === \"\\\\r\") {\n                        result0 = \"\\\\r\";\n                        pos += 2;\n                      } else {\n                        result0 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"\\\\\\\\r\\\"\");\n                        }\n                      }\n                      if (result0 !== null) {\n                        result0 = function (offset) {\n                          return \"\\r\";\n                        }(pos0);\n                      }\n                      if (result0 === null) {\n                        pos = pos0;\n                      }\n                      if (result0 === null) {\n                        pos0 = pos;\n                        if (input.substr(pos, 2) === \"\\\\t\") {\n                          result0 = \"\\\\t\";\n                          pos += 2;\n                        } else {\n                          result0 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"\\\\\\\\t\\\"\");\n                          }\n                        }\n                        if (result0 !== null) {\n                          result0 = function (offset) {\n                            return \"\\t\";\n                          }(pos0);\n                        }\n                        if (result0 === null) {\n                          pos = pos0;\n                        }\n                        if (result0 === null) {\n                          pos0 = pos;\n                          pos1 = pos;\n                          if (input.substr(pos, 2) === \"\\\\u\") {\n                            result0 = \"\\\\u\";\n                            pos += 2;\n                          } else {\n                            result0 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\"\\\\\\\\u\\\"\");\n                            }\n                          }\n                          if (result0 !== null) {\n                            result1 = parse_hexDigit();\n                            if (result1 !== null) {\n                              result2 = parse_hexDigit();\n                              if (result2 !== null) {\n                                result3 = parse_hexDigit();\n                                if (result3 !== null) {\n                                  result4 = parse_hexDigit();\n                                  if (result4 !== null) {\n                                    result0 = [result0, result1, result2, result3, result4];\n                                  } else {\n                                    result0 = null;\n                                    pos = pos1;\n                                  }\n                                } else {\n                                  result0 = null;\n                                  pos = pos1;\n                                }\n                              } else {\n                                result0 = null;\n                                pos = pos1;\n                              }\n                            } else {\n                              result0 = null;\n                              pos = pos1;\n                            }\n                          } else {\n                            result0 = null;\n                            pos = pos1;\n                          }\n                          if (result0 !== null) {\n                            result0 = function (offset, h1, h2, h3, h4) {\n                              return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n                            }(pos0, result0[1], result0[2], result0[3], result0[4]);\n                          }\n                          if (result0 === null) {\n                            pos = pos0;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_hexDigit() {\n        var result0;\n        if (/^[0-9a-fA-F]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[0-9a-fA-F]\");\n          }\n        }\n        return result0;\n      }\n      function parse_identifier() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (/^[_a-zA-Z]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[_a-zA-Z]\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          if (/^[_a-zA-Z0-9]/.test(input.charAt(pos))) {\n            result2 = input.charAt(pos);\n            pos++;\n          } else {\n            result2 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"[_a-zA-Z0-9]\");\n            }\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            if (/^[_a-zA-Z0-9]/.test(input.charAt(pos))) {\n              result2 = input.charAt(pos);\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"[_a-zA-Z0-9]\");\n              }\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, head, tail) {\n            return head + tail.join('');\n          }(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_number() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        pos0 = pos;\n        if (input.charCodeAt(pos) === 48) {\n          result0 = \"0\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"0\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result0 = function (offset) {\n            return 0;\n          }(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (/^[1-9]/.test(input.charAt(pos))) {\n            result0 = input.charAt(pos);\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"[1-9]\");\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            if (/^[0-9]/.test(input.charAt(pos))) {\n              result2 = input.charAt(pos);\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"[0-9]\");\n              }\n            }\n            while (result2 !== null) {\n              result1.push(result2);\n              if (/^[0-9]/.test(input.charAt(pos))) {\n                result2 = input.charAt(pos);\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"[0-9]\");\n                }\n              }\n            }\n            if (result1 !== null) {\n              result0 = [result0, result1];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, head, tail) {\n              return parseInt(head + tail.join(''));\n            }(pos0, result0[0], result0[1]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_size() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 58) {\n          result0 = \":\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\":\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_number();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, num) {\n            return num;\n          }(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 58) {\n            result0 = \":\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\":\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            result1 = parse_identifier();\n            if (result1 !== null) {\n              result0 = [result0, result1];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = function (offset, id) {\n              return id;\n            }(pos0, result0[1]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      function parse_specifierList() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 47) {\n          result0 = \"/\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"/\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_specifier();\n          if (result1 !== null) {\n            result2 = [];\n            result3 = parse_specifierTail();\n            while (result3 !== null) {\n              result2.push(result3);\n              result3 = parse_specifierTail();\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, head, tail) {\n            tail.unshift(head);\n            return tail;\n          }(pos0, result0[1], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_specifierTail() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 45) {\n          result0 = \"-\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"-\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_specifier();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, spec) {\n            return spec;\n          }(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_specifier() {\n        var result0;\n        if (input.substr(pos, 6) === \"little\") {\n          result0 = \"little\";\n          pos += 6;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"little\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.substr(pos, 3) === \"big\") {\n            result0 = \"big\";\n            pos += 3;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"big\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.substr(pos, 6) === \"signed\") {\n              result0 = \"signed\";\n              pos += 6;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"signed\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.substr(pos, 8) === \"unsigned\") {\n                result0 = \"unsigned\";\n                pos += 8;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"unsigned\\\"\");\n                }\n              }\n              if (result0 === null) {\n                if (input.substr(pos, 7) === \"integer\") {\n                  result0 = \"integer\";\n                  pos += 7;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"integer\\\"\");\n                  }\n                }\n                if (result0 === null) {\n                  if (input.substr(pos, 6) === \"binary\") {\n                    result0 = \"binary\";\n                    pos += 6;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"binary\\\"\");\n                    }\n                  }\n                  if (result0 === null) {\n                    if (input.substr(pos, 5) === \"float\") {\n                      result0 = \"float\";\n                      pos += 5;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"float\\\"\");\n                      }\n                    }\n                    if (result0 === null) {\n                      result0 = parse_unit();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      function parse_unit() {\n        var result0, result1;\n        var pos0, pos1;\n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 5) === \"unit:\") {\n          result0 = \"unit:\";\n          pos += 5;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"unit:\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_number();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = function (offset, num) {\n            return 'unit:' + num;\n          }(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      function parse_ws() {\n        var result0, result1;\n        result0 = [];\n        if (/^[ \\t\\n]/.test(input.charAt(pos))) {\n          result1 = input.charAt(pos);\n          pos++;\n        } else {\n          result1 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[ \\\\t\\\\n]\");\n          }\n        }\n        while (result1 !== null) {\n          result0.push(result1);\n          if (/^[ \\t\\n]/.test(input.charAt(pos))) {\n            result1 = input.charAt(pos);\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"[ \\\\t\\\\n]\");\n            }\n          }\n        }\n        return result0;\n      }\n      function cleanupExpected(expected) {\n        expected.sort();\n        var lastExpected = null;\n        var cleanExpected = [];\n        for (var i = 0; i < expected.length; i++) {\n          if (expected[i] !== lastExpected) {\n            cleanExpected.push(expected[i]);\n            lastExpected = expected[i];\n          }\n        }\n        return cleanExpected;\n      }\n      function computeErrorPosition() {\n        /*\n         * The first idea was to use |String.split| to break the input up to the\n         * error position along newlines and derive the line and column from\n         * there. However IE's |split| implementation is so broken that it was\n         * enough to prevent it.\n         */\n\n        var line = 1;\n        var column = 1;\n        var seenCR = false;\n        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {\n          var ch = input.charAt(i);\n          if (ch === \"\\n\") {\n            if (!seenCR) {\n              line++;\n            }\n            column = 1;\n            seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            line++;\n            column = 1;\n            seenCR = true;\n          } else {\n            column++;\n            seenCR = false;\n          }\n        }\n        return {\n          line: line,\n          column: column\n        };\n      }\n      var result = parseFunctions[startRule]();\n\n      /*\n       * The parser is now in one of the following three states:\n       *\n       * 1. The parser successfully parsed the whole input.\n       *\n       *    - |result !== null|\n       *    - |pos === input.length|\n       *    - |rightmostFailuresExpected| may or may not contain something\n       *\n       * 2. The parser successfully parsed only a part of the input.\n       *\n       *    - |result !== null|\n       *    - |pos < input.length|\n       *    - |rightmostFailuresExpected| may or may not contain something\n       *\n       * 3. The parser did not successfully parse any part of the input.\n       *\n       *   - |result === null|\n       *   - |pos === 0|\n       *   - |rightmostFailuresExpected| contains at least one failure\n       *\n       * All code following this comment (including called functions) must\n       * handle these states.\n       */\n      if (result === null || pos !== input.length) {\n        var offset = Math.max(pos, rightmostFailuresPos);\n        var found = offset < input.length ? input.charAt(offset) : null;\n        var errorPosition = computeErrorPosition();\n        throw new this.SyntaxError(cleanupExpected(rightmostFailuresExpected), found, offset, errorPosition.line, errorPosition.column);\n      }\n      return result;\n    },\n    /* Returns the parser source code. */\n    toSource: function () {\n      return this._source;\n    }\n  };\n\n  /* Thrown when a parser encounters a syntax error. */\n\n  result.SyntaxError = function (expected, found, offset, line, column) {\n    function buildMessage(expected, found) {\n      var expectedHumanized, foundHumanized;\n      switch (expected.length) {\n        case 0:\n          expectedHumanized = \"end of input\";\n          break;\n        case 1:\n          expectedHumanized = expected[0];\n          break;\n        default:\n          expectedHumanized = expected.slice(0, expected.length - 1).join(\", \") + \" or \" + expected[expected.length - 1];\n      }\n      foundHumanized = found ? quote(found) : \"end of input\";\n      return \"Expected \" + expectedHumanized + \" but \" + foundHumanized + \" found.\";\n    }\n    this.name = \"SyntaxError\";\n    this.expected = expected;\n    this.found = found;\n    this.message = buildMessage(expected, found);\n    this.offset = offset;\n    this.line = line;\n    this.column = column;\n  };\n  result.SyntaxError.prototype = Error.prototype;\n  return result;\n}();","map":{"version":3,"names":["module","exports","quote","s","replace","escape","result","parse","input","startRule","parseFunctions","parse_start","parse_segmentTail","parse_segment","parse_string","parse_chars","parse_char","parse_hexDigit","parse_identifier","parse_number","parse_size","parse_specifierList","parse_specifierTail","parse_specifier","parse_unit","parse_ws","undefined","Error","pos","reportFailures","rightmostFailuresPos","rightmostFailuresExpected","padLeft","padding","length","padLength","i","ch","charCode","charCodeAt","escapeChar","toString","toUpperCase","matchFailed","failure","push","result0","result1","result2","result3","pos0","pos1","offset","head","tail","unshift","seg","str","string","v","size","specs","name","specifiers","value","chars","join","result4","test","charAt","substr","h1","h2","h3","h4","String","fromCharCode","parseInt","num","id","spec","cleanupExpected","expected","sort","lastExpected","cleanExpected","computeErrorPosition","line","column","seenCR","Math","max","found","errorPosition","SyntaxError","toSource","_source","buildMessage","expectedHumanized","foundHumanized","slice","message","prototype"],"sources":["/Users/anandarunima/Documents/Arunima/Coursework/sauce_labs-fizzbuzzbash/fizzbuzzbass/components/node_modules/bitsyntax/lib/parser.js"],"sourcesContent":["module.exports = (function(){\n  /*\n   * Generated by PEG.js 0.7.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n  \n  function quote(s) {\n    /*\n     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a\n     * string literal except for the closing quote character, backslash,\n     * carriage return, line separator, paragraph separator, and line feed.\n     * Any character may appear in the form of an escape sequence.\n     *\n     * For portability, we also escape escape all control and non-ASCII\n     * characters. Note that \"\\0\" and \"\\v\" escape sequences are not used\n     * because JSHint does not like the first and IE the second.\n     */\n     return '\"' + s\n      .replace(/\\\\/g, '\\\\\\\\')  // backslash\n      .replace(/\"/g, '\\\\\"')    // closing quote character\n      .replace(/\\x08/g, '\\\\b') // backspace\n      .replace(/\\t/g, '\\\\t')   // horizontal tab\n      .replace(/\\n/g, '\\\\n')   // line feed\n      .replace(/\\f/g, '\\\\f')   // form feed\n      .replace(/\\r/g, '\\\\r')   // carriage return\n      .replace(/[\\x00-\\x07\\x0B\\x0E-\\x1F\\x80-\\uFFFF]/g, escape)\n      + '\"';\n  }\n  \n  var result = {\n    /*\n     * Parses the input with a generated parser. If the parsing is successfull,\n     * returns a value explicitly or implicitly specified by the grammar from\n     * which the parser was generated (see |PEG.buildParser|). If the parsing is\n     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.\n     */\n    parse: function(input, startRule) {\n      var parseFunctions = {\n        \"start\": parse_start,\n        \"segmentTail\": parse_segmentTail,\n        \"segment\": parse_segment,\n        \"string\": parse_string,\n        \"chars\": parse_chars,\n        \"char\": parse_char,\n        \"hexDigit\": parse_hexDigit,\n        \"identifier\": parse_identifier,\n        \"number\": parse_number,\n        \"size\": parse_size,\n        \"specifierList\": parse_specifierList,\n        \"specifierTail\": parse_specifierTail,\n        \"specifier\": parse_specifier,\n        \"unit\": parse_unit,\n        \"ws\": parse_ws\n      };\n      \n      if (startRule !== undefined) {\n        if (parseFunctions[startRule] === undefined) {\n          throw new Error(\"Invalid rule name: \" + quote(startRule) + \".\");\n        }\n      } else {\n        startRule = \"start\";\n      }\n      \n      var pos = 0;\n      var reportFailures = 0;\n      var rightmostFailuresPos = 0;\n      var rightmostFailuresExpected = [];\n      \n      function padLeft(input, padding, length) {\n        var result = input;\n        \n        var padLength = length - input.length;\n        for (var i = 0; i < padLength; i++) {\n          result = padding + result;\n        }\n        \n        return result;\n      }\n      \n      function escape(ch) {\n        var charCode = ch.charCodeAt(0);\n        var escapeChar;\n        var length;\n        \n        if (charCode <= 0xFF) {\n          escapeChar = 'x';\n          length = 2;\n        } else {\n          escapeChar = 'u';\n          length = 4;\n        }\n        \n        return '\\\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);\n      }\n      \n      function matchFailed(failure) {\n        if (pos < rightmostFailuresPos) {\n          return;\n        }\n        \n        if (pos > rightmostFailuresPos) {\n          rightmostFailuresPos = pos;\n          rightmostFailuresExpected = [];\n        }\n        \n        rightmostFailuresExpected.push(failure);\n      }\n      \n      function parse_start() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_ws();\n        if (result0 !== null) {\n          result1 = parse_segment();\n          if (result1 !== null) {\n            result2 = [];\n            result3 = parse_segmentTail();\n            while (result3 !== null) {\n              result2.push(result3);\n              result3 = parse_segmentTail();\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, head, tail) { tail.unshift(head); return tail; })(pos0, result0[1], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_segmentTail() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_ws();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 44) {\n            result1 = \",\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\",\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_ws();\n            if (result2 !== null) {\n              result3 = parse_segment();\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, seg) { return seg; })(pos0, result0[3]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_segment() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        result0 = parse_string();\n        if (result0 !== null) {\n          result0 = (function(offset, str) { return {string: str}; })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          result0 = parse_identifier();\n          if (result0 !== null) {\n            result1 = parse_size();\n            result1 = result1 !== null ? result1 : \"\";\n            if (result1 !== null) {\n              result2 = parse_specifierList();\n              result2 = result2 !== null ? result2 : \"\";\n              if (result2 !== null) {\n                result0 = [result0, result1, result2];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = (function(offset, v, size, specs) { return {name: v, size: size, specifiers: specs}; })(pos0, result0[0], result0[1], result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n          if (result0 === null) {\n            pos0 = pos;\n            pos1 = pos;\n            result0 = parse_number();\n            if (result0 !== null) {\n              result1 = parse_size();\n              result1 = result1 !== null ? result1 : \"\";\n              if (result1 !== null) {\n                result2 = parse_specifierList();\n                result2 = result2 !== null ? result2 : \"\";\n                if (result2 !== null) {\n                  result0 = [result0, result1, result2];\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n            if (result0 !== null) {\n              result0 = (function(offset, v, size, specs) { return {value: v, size: size, specifiers: specs}; })(pos0, result0[0], result0[1], result0[2]);\n            }\n            if (result0 === null) {\n              pos = pos0;\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_string() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 34) {\n          result0 = \"\\\"\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"\\\\\\\"\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 34) {\n            result1 = \"\\\"\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"\\\\\\\"\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) { return \"\";    })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 34) {\n            result0 = \"\\\"\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"\\\\\\\"\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            result1 = parse_chars();\n            if (result1 !== null) {\n              if (input.charCodeAt(pos) === 34) {\n                result2 = \"\\\"\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"\\\\\\\"\\\"\");\n                }\n              }\n              if (result2 !== null) {\n                result0 = [result0, result1, result2];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = (function(offset, chars) { return chars; })(pos0, result0[1]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      \n      function parse_chars() {\n        var result0, result1;\n        var pos0;\n        \n        pos0 = pos;\n        result1 = parse_char();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_char();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, chars) { return chars.join(\"\"); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_char() {\n        var result0, result1, result2, result3, result4;\n        var pos0, pos1;\n        \n        if (/^[^\"\\\\\\0-\\x1F]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[^\\\"\\\\\\\\\\\\0-\\\\x1F]\");\n          }\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          if (input.substr(pos, 2) === \"\\\\\\\"\") {\n            result0 = \"\\\\\\\"\";\n            pos += 2;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"\\\\\\\\\\\\\\\"\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            result0 = (function(offset) { return '\"';  })(pos0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n          if (result0 === null) {\n            pos0 = pos;\n            if (input.substr(pos, 2) === \"\\\\\\\\\") {\n              result0 = \"\\\\\\\\\";\n              pos += 2;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"\\\\\\\\\\\\\\\\\\\"\");\n              }\n            }\n            if (result0 !== null) {\n              result0 = (function(offset) { return \"\\\\\"; })(pos0);\n            }\n            if (result0 === null) {\n              pos = pos0;\n            }\n            if (result0 === null) {\n              pos0 = pos;\n              if (input.substr(pos, 2) === \"\\\\/\") {\n                result0 = \"\\\\/\";\n                pos += 2;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"\\\\\\\\/\\\"\");\n                }\n              }\n              if (result0 !== null) {\n                result0 = (function(offset) { return \"/\";  })(pos0);\n              }\n              if (result0 === null) {\n                pos = pos0;\n              }\n              if (result0 === null) {\n                pos0 = pos;\n                if (input.substr(pos, 2) === \"\\\\b\") {\n                  result0 = \"\\\\b\";\n                  pos += 2;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"\\\\\\\\b\\\"\");\n                  }\n                }\n                if (result0 !== null) {\n                  result0 = (function(offset) { return \"\\b\"; })(pos0);\n                }\n                if (result0 === null) {\n                  pos = pos0;\n                }\n                if (result0 === null) {\n                  pos0 = pos;\n                  if (input.substr(pos, 2) === \"\\\\f\") {\n                    result0 = \"\\\\f\";\n                    pos += 2;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"\\\\\\\\f\\\"\");\n                    }\n                  }\n                  if (result0 !== null) {\n                    result0 = (function(offset) { return \"\\f\"; })(pos0);\n                  }\n                  if (result0 === null) {\n                    pos = pos0;\n                  }\n                  if (result0 === null) {\n                    pos0 = pos;\n                    if (input.substr(pos, 2) === \"\\\\n\") {\n                      result0 = \"\\\\n\";\n                      pos += 2;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"\\\\\\\\n\\\"\");\n                      }\n                    }\n                    if (result0 !== null) {\n                      result0 = (function(offset) { return \"\\n\"; })(pos0);\n                    }\n                    if (result0 === null) {\n                      pos = pos0;\n                    }\n                    if (result0 === null) {\n                      pos0 = pos;\n                      if (input.substr(pos, 2) === \"\\\\r\") {\n                        result0 = \"\\\\r\";\n                        pos += 2;\n                      } else {\n                        result0 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"\\\\\\\\r\\\"\");\n                        }\n                      }\n                      if (result0 !== null) {\n                        result0 = (function(offset) { return \"\\r\"; })(pos0);\n                      }\n                      if (result0 === null) {\n                        pos = pos0;\n                      }\n                      if (result0 === null) {\n                        pos0 = pos;\n                        if (input.substr(pos, 2) === \"\\\\t\") {\n                          result0 = \"\\\\t\";\n                          pos += 2;\n                        } else {\n                          result0 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"\\\\\\\\t\\\"\");\n                          }\n                        }\n                        if (result0 !== null) {\n                          result0 = (function(offset) { return \"\\t\"; })(pos0);\n                        }\n                        if (result0 === null) {\n                          pos = pos0;\n                        }\n                        if (result0 === null) {\n                          pos0 = pos;\n                          pos1 = pos;\n                          if (input.substr(pos, 2) === \"\\\\u\") {\n                            result0 = \"\\\\u\";\n                            pos += 2;\n                          } else {\n                            result0 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\"\\\\\\\\u\\\"\");\n                            }\n                          }\n                          if (result0 !== null) {\n                            result1 = parse_hexDigit();\n                            if (result1 !== null) {\n                              result2 = parse_hexDigit();\n                              if (result2 !== null) {\n                                result3 = parse_hexDigit();\n                                if (result3 !== null) {\n                                  result4 = parse_hexDigit();\n                                  if (result4 !== null) {\n                                    result0 = [result0, result1, result2, result3, result4];\n                                  } else {\n                                    result0 = null;\n                                    pos = pos1;\n                                  }\n                                } else {\n                                  result0 = null;\n                                  pos = pos1;\n                                }\n                              } else {\n                                result0 = null;\n                                pos = pos1;\n                              }\n                            } else {\n                              result0 = null;\n                              pos = pos1;\n                            }\n                          } else {\n                            result0 = null;\n                            pos = pos1;\n                          }\n                          if (result0 !== null) {\n                            result0 = (function(offset, h1, h2, h3, h4) {\n                                return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n                              })(pos0, result0[1], result0[2], result0[3], result0[4]);\n                          }\n                          if (result0 === null) {\n                            pos = pos0;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_hexDigit() {\n        var result0;\n        \n        if (/^[0-9a-fA-F]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[0-9a-fA-F]\");\n          }\n        }\n        return result0;\n      }\n      \n      function parse_identifier() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (/^[_a-zA-Z]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[_a-zA-Z]\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          if (/^[_a-zA-Z0-9]/.test(input.charAt(pos))) {\n            result2 = input.charAt(pos);\n            pos++;\n          } else {\n            result2 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"[_a-zA-Z0-9]\");\n            }\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            if (/^[_a-zA-Z0-9]/.test(input.charAt(pos))) {\n              result2 = input.charAt(pos);\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"[_a-zA-Z0-9]\");\n              }\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, head, tail) { return head + tail.join(''); })(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_number() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        if (input.charCodeAt(pos) === 48) {\n          result0 = \"0\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"0\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) { return 0; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (/^[1-9]/.test(input.charAt(pos))) {\n            result0 = input.charAt(pos);\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"[1-9]\");\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            if (/^[0-9]/.test(input.charAt(pos))) {\n              result2 = input.charAt(pos);\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"[0-9]\");\n              }\n            }\n            while (result2 !== null) {\n              result1.push(result2);\n              if (/^[0-9]/.test(input.charAt(pos))) {\n                result2 = input.charAt(pos);\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"[0-9]\");\n                }\n              }\n            }\n            if (result1 !== null) {\n              result0 = [result0, result1];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = (function(offset, head, tail) { return parseInt(head + tail.join('')); })(pos0, result0[0], result0[1]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      \n      function parse_size() {\n        var result0, result1;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 58) {\n          result0 = \":\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\":\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_number();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, num) { return num; })(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 58) {\n            result0 = \":\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\":\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            result1 = parse_identifier();\n            if (result1 !== null) {\n              result0 = [result0, result1];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = (function(offset, id) { return id; })(pos0, result0[1]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      \n      function parse_specifierList() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 47) {\n          result0 = \"/\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"/\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_specifier();\n          if (result1 !== null) {\n            result2 = [];\n            result3 = parse_specifierTail();\n            while (result3 !== null) {\n              result2.push(result3);\n              result3 = parse_specifierTail();\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, head, tail) { tail.unshift(head); return tail; })(pos0, result0[1], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_specifierTail() {\n        var result0, result1;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 45) {\n          result0 = \"-\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"-\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_specifier();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, spec) { return spec; })(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_specifier() {\n        var result0;\n        \n        if (input.substr(pos, 6) === \"little\") {\n          result0 = \"little\";\n          pos += 6;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"little\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.substr(pos, 3) === \"big\") {\n            result0 = \"big\";\n            pos += 3;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"big\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.substr(pos, 6) === \"signed\") {\n              result0 = \"signed\";\n              pos += 6;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"signed\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.substr(pos, 8) === \"unsigned\") {\n                result0 = \"unsigned\";\n                pos += 8;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"unsigned\\\"\");\n                }\n              }\n              if (result0 === null) {\n                if (input.substr(pos, 7) === \"integer\") {\n                  result0 = \"integer\";\n                  pos += 7;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"integer\\\"\");\n                  }\n                }\n                if (result0 === null) {\n                  if (input.substr(pos, 6) === \"binary\") {\n                    result0 = \"binary\";\n                    pos += 6;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"binary\\\"\");\n                    }\n                  }\n                  if (result0 === null) {\n                    if (input.substr(pos, 5) === \"float\") {\n                      result0 = \"float\";\n                      pos += 5;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"float\\\"\");\n                      }\n                    }\n                    if (result0 === null) {\n                      result0 = parse_unit();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_unit() {\n        var result0, result1;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 5) === \"unit:\") {\n          result0 = \"unit:\";\n          pos += 5;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"unit:\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_number();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, num) { return 'unit:' + num; })(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_ws() {\n        var result0, result1;\n        \n        result0 = [];\n        if (/^[ \\t\\n]/.test(input.charAt(pos))) {\n          result1 = input.charAt(pos);\n          pos++;\n        } else {\n          result1 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[ \\\\t\\\\n]\");\n          }\n        }\n        while (result1 !== null) {\n          result0.push(result1);\n          if (/^[ \\t\\n]/.test(input.charAt(pos))) {\n            result1 = input.charAt(pos);\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"[ \\\\t\\\\n]\");\n            }\n          }\n        }\n        return result0;\n      }\n      \n      \n      function cleanupExpected(expected) {\n        expected.sort();\n        \n        var lastExpected = null;\n        var cleanExpected = [];\n        for (var i = 0; i < expected.length; i++) {\n          if (expected[i] !== lastExpected) {\n            cleanExpected.push(expected[i]);\n            lastExpected = expected[i];\n          }\n        }\n        return cleanExpected;\n      }\n      \n      function computeErrorPosition() {\n        /*\n         * The first idea was to use |String.split| to break the input up to the\n         * error position along newlines and derive the line and column from\n         * there. However IE's |split| implementation is so broken that it was\n         * enough to prevent it.\n         */\n        \n        var line = 1;\n        var column = 1;\n        var seenCR = false;\n        \n        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {\n          var ch = input.charAt(i);\n          if (ch === \"\\n\") {\n            if (!seenCR) { line++; }\n            column = 1;\n            seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            line++;\n            column = 1;\n            seenCR = true;\n          } else {\n            column++;\n            seenCR = false;\n          }\n        }\n        \n        return { line: line, column: column };\n      }\n      \n      \n      var result = parseFunctions[startRule]();\n      \n      /*\n       * The parser is now in one of the following three states:\n       *\n       * 1. The parser successfully parsed the whole input.\n       *\n       *    - |result !== null|\n       *    - |pos === input.length|\n       *    - |rightmostFailuresExpected| may or may not contain something\n       *\n       * 2. The parser successfully parsed only a part of the input.\n       *\n       *    - |result !== null|\n       *    - |pos < input.length|\n       *    - |rightmostFailuresExpected| may or may not contain something\n       *\n       * 3. The parser did not successfully parse any part of the input.\n       *\n       *   - |result === null|\n       *   - |pos === 0|\n       *   - |rightmostFailuresExpected| contains at least one failure\n       *\n       * All code following this comment (including called functions) must\n       * handle these states.\n       */\n      if (result === null || pos !== input.length) {\n        var offset = Math.max(pos, rightmostFailuresPos);\n        var found = offset < input.length ? input.charAt(offset) : null;\n        var errorPosition = computeErrorPosition();\n        \n        throw new this.SyntaxError(\n          cleanupExpected(rightmostFailuresExpected),\n          found,\n          offset,\n          errorPosition.line,\n          errorPosition.column\n        );\n      }\n      \n      return result;\n    },\n    \n    /* Returns the parser source code. */\n    toSource: function() { return this._source; }\n  };\n  \n  /* Thrown when a parser encounters a syntax error. */\n  \n  result.SyntaxError = function(expected, found, offset, line, column) {\n    function buildMessage(expected, found) {\n      var expectedHumanized, foundHumanized;\n      \n      switch (expected.length) {\n        case 0:\n          expectedHumanized = \"end of input\";\n          break;\n        case 1:\n          expectedHumanized = expected[0];\n          break;\n        default:\n          expectedHumanized = expected.slice(0, expected.length - 1).join(\", \")\n            + \" or \"\n            + expected[expected.length - 1];\n      }\n      \n      foundHumanized = found ? quote(found) : \"end of input\";\n      \n      return \"Expected \" + expectedHumanized + \" but \" + foundHumanized + \" found.\";\n    }\n    \n    this.name = \"SyntaxError\";\n    this.expected = expected;\n    this.found = found;\n    this.message = buildMessage(expected, found);\n    this.offset = offset;\n    this.line = line;\n    this.column = column;\n  };\n  \n  result.SyntaxError.prototype = Error.prototype;\n  \n  return result;\n})();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}