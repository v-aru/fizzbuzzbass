{"ast":null,"code":"// Parse patterns in string form into the form we use for interpreting\n// (and later, for compiling).\n\n'use strict';\n\nvar ast = require('./pattern');\nvar parser = require('./parser');\nfunction parse_pattern(string) {\n  var segments = parser.parse(string);\n  for (var i = 0, len = segments.length; i < len; i++) {\n    var s = segments[i];\n    if (s.string != undefined) {\n      segments[i] = ast.string(s.string);\n    } else if (s.value != undefined) {\n      segments[i] = ast.value(s.value, s.size, s.specifiers);\n    } else if (s.name != undefined) {\n      segments[i] = ast.variable(s.name, s.size, s.specifiers);\n    } else {\n      throw \"Unknown segment \" + s;\n    }\n  }\n  return segments;\n}\nmodule.exports.parse = function () {\n  var str = [].join.call(arguments, ',');\n  return parse_pattern(str);\n};","map":{"version":3,"names":["ast","require","parser","parse_pattern","string","segments","parse","i","len","length","s","undefined","value","size","specifiers","name","variable","module","exports","str","join","call","arguments"],"sources":["/Users/anandarunima/Documents/Arunima/Coursework/sauce_labs-fizzbuzzbash/fizzbuzzbass/components/node_modules/bitsyntax/lib/parse.js"],"sourcesContent":["// Parse patterns in string form into the form we use for interpreting\n// (and later, for compiling).\n\n'use strict';\n\nvar ast = require('./pattern');\nvar parser = require('./parser');\n\nfunction parse_pattern(string) {\n  var segments = parser.parse(string);\n  for (var i=0, len = segments.length; i < len; i++) {\n    var s = segments[i];\n    if (s.string != undefined) {\n      segments[i] = ast.string(s.string);\n    }\n    else if (s.value != undefined) {\n      segments[i] = ast.value(s.value, s.size, s.specifiers);\n    }\n    else if (s.name != undefined) {\n      segments[i] = ast.variable(s.name, s.size, s.specifiers);\n    }\n    else {\n      throw \"Unknown segment \" + s;\n    }\n  }\n  return segments;\n}\n\nmodule.exports.parse = function() {\n  var str = [].join.call(arguments, ',');\n  return parse_pattern(str);\n};\n"],"mappings":"AAAA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,GAAG,GAAGC,OAAO,CAAC,WAAW,CAAC;AAC9B,IAAIC,MAAM,GAAGD,OAAO,CAAC,UAAU,CAAC;AAEhC,SAASE,aAAaA,CAACC,MAAM,EAAE;EAC7B,IAAIC,QAAQ,GAAGH,MAAM,CAACI,KAAK,CAACF,MAAM,CAAC;EACnC,KAAK,IAAIG,CAAC,GAAC,CAAC,EAAEC,GAAG,GAAGH,QAAQ,CAACI,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;IACjD,IAAIG,CAAC,GAAGL,QAAQ,CAACE,CAAC,CAAC;IACnB,IAAIG,CAAC,CAACN,MAAM,IAAIO,SAAS,EAAE;MACzBN,QAAQ,CAACE,CAAC,CAAC,GAAGP,GAAG,CAACI,MAAM,CAACM,CAAC,CAACN,MAAM,CAAC;IACpC,CAAC,MACI,IAAIM,CAAC,CAACE,KAAK,IAAID,SAAS,EAAE;MAC7BN,QAAQ,CAACE,CAAC,CAAC,GAAGP,GAAG,CAACY,KAAK,CAACF,CAAC,CAACE,KAAK,EAAEF,CAAC,CAACG,IAAI,EAAEH,CAAC,CAACI,UAAU,CAAC;IACxD,CAAC,MACI,IAAIJ,CAAC,CAACK,IAAI,IAAIJ,SAAS,EAAE;MAC5BN,QAAQ,CAACE,CAAC,CAAC,GAAGP,GAAG,CAACgB,QAAQ,CAACN,CAAC,CAACK,IAAI,EAAEL,CAAC,CAACG,IAAI,EAAEH,CAAC,CAACI,UAAU,CAAC;IAC1D,CAAC,MACI;MACH,MAAM,kBAAkB,GAAGJ,CAAC;IAC9B;EACF;EACA,OAAOL,QAAQ;AACjB;AAEAY,MAAM,CAACC,OAAO,CAACZ,KAAK,GAAG,YAAW;EAChC,IAAIa,GAAG,GAAG,EAAE,CAACC,IAAI,CAACC,IAAI,CAACC,SAAS,EAAE,GAAG,CAAC;EACtC,OAAOnB,aAAa,CAACgB,GAAG,CAAC;AAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}