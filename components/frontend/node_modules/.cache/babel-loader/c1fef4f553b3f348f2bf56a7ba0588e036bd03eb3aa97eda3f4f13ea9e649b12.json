{"ast":null,"code":"'use strict';\n\nvar compileSchema = require('./compile'),\n  resolve = require('./compile/resolve'),\n  Cache = require('./cache'),\n  SchemaObject = require('./compile/schema_obj'),\n  stableStringify = require('fast-json-stable-stringify'),\n  formats = require('./compile/formats'),\n  rules = require('./compile/rules'),\n  $dataMetaSchema = require('./data'),\n  util = require('./compile/util');\nmodule.exports = Ajv;\nAjv.prototype.validate = validate;\nAjv.prototype.compile = compile;\nAjv.prototype.addSchema = addSchema;\nAjv.prototype.addMetaSchema = addMetaSchema;\nAjv.prototype.validateSchema = validateSchema;\nAjv.prototype.getSchema = getSchema;\nAjv.prototype.removeSchema = removeSchema;\nAjv.prototype.addFormat = addFormat;\nAjv.prototype.errorsText = errorsText;\nAjv.prototype._addSchema = _addSchema;\nAjv.prototype._compile = _compile;\nAjv.prototype.compileAsync = require('./compile/async');\nvar customKeyword = require('./keyword');\nAjv.prototype.addKeyword = customKeyword.add;\nAjv.prototype.getKeyword = customKeyword.get;\nAjv.prototype.removeKeyword = customKeyword.remove;\nAjv.prototype.validateKeyword = customKeyword.validate;\nvar errorClasses = require('./compile/error_classes');\nAjv.ValidationError = errorClasses.Validation;\nAjv.MissingRefError = errorClasses.MissingRef;\nAjv.$dataMetaSchema = $dataMetaSchema;\nvar META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';\nvar META_IGNORE_OPTIONS = ['removeAdditional', 'useDefaults', 'coerceTypes', 'strictDefaults'];\nvar META_SUPPORT_DATA = ['/properties'];\n\n/**\n * Creates validator instance.\n * Usage: `Ajv(opts)`\n * @param {Object} opts optional options\n * @return {Object} ajv instance\n */\nfunction Ajv(opts) {\n  if (!(this instanceof Ajv)) return new Ajv(opts);\n  opts = this._opts = util.copy(opts) || {};\n  setLogger(this);\n  this._schemas = {};\n  this._refs = {};\n  this._fragments = {};\n  this._formats = formats(opts.format);\n  this._cache = opts.cache || new Cache();\n  this._loadingSchemas = {};\n  this._compilations = [];\n  this.RULES = rules();\n  this._getId = chooseGetId(opts);\n  opts.loopRequired = opts.loopRequired || Infinity;\n  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;\n  if (opts.serialize === undefined) opts.serialize = stableStringify;\n  this._metaOpts = getMetaSchemaOptions(this);\n  if (opts.formats) addInitialFormats(this);\n  addDefaultMetaSchema(this);\n  if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);\n  if (opts.nullable) this.addKeyword('nullable', {\n    metaSchema: {\n      type: 'boolean'\n    }\n  });\n  addInitialSchemas(this);\n}\n\n/**\n * Validate data using schema\n * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.\n * @this   Ajv\n * @param  {String|Object} schemaKeyRef key, ref or schema object\n * @param  {Any} data to be validated\n * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).\n */\nfunction validate(schemaKeyRef, data) {\n  var v;\n  if (typeof schemaKeyRef == 'string') {\n    v = this.getSchema(schemaKeyRef);\n    if (!v) throw new Error('no schema with key or ref \"' + schemaKeyRef + '\"');\n  } else {\n    var schemaObj = this._addSchema(schemaKeyRef);\n    v = schemaObj.validate || this._compile(schemaObj);\n  }\n  var valid = v(data);\n  if (v.$async !== true) this.errors = v.errors;\n  return valid;\n}\n\n/**\n * Create validating function for passed schema.\n * @this   Ajv\n * @param  {Object} schema schema object\n * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.\n * @return {Function} validating function\n */\nfunction compile(schema, _meta) {\n  var schemaObj = this._addSchema(schema, undefined, _meta);\n  return schemaObj.validate || this._compile(schemaObj);\n}\n\n/**\n * Adds schema to the instance.\n * @this   Ajv\n * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.\n * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\n * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.\n * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.\n * @return {Ajv} this for method chaining\n */\nfunction addSchema(schema, key, _skipValidation, _meta) {\n  if (Array.isArray(schema)) {\n    for (var i = 0; i < schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);\n    return this;\n  }\n  var id = this._getId(schema);\n  if (id !== undefined && typeof id != 'string') throw new Error('schema id must be string');\n  key = resolve.normalizeId(key || id);\n  checkUnique(this, key);\n  this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);\n  return this;\n}\n\n/**\n * Add schema that will be used to validate other schemas\n * options in META_IGNORE_OPTIONS are alway set to false\n * @this   Ajv\n * @param {Object} schema schema object\n * @param {String} key optional schema key\n * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema\n * @return {Ajv} this for method chaining\n */\nfunction addMetaSchema(schema, key, skipValidation) {\n  this.addSchema(schema, key, skipValidation, true);\n  return this;\n}\n\n/**\n * Validate schema\n * @this   Ajv\n * @param {Object} schema schema to validate\n * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid\n * @return {Boolean} true if schema is valid\n */\nfunction validateSchema(schema, throwOrLogError) {\n  var $schema = schema.$schema;\n  if ($schema !== undefined && typeof $schema != 'string') throw new Error('$schema must be a string');\n  $schema = $schema || this._opts.defaultMeta || defaultMeta(this);\n  if (!$schema) {\n    this.logger.warn('meta-schema not available');\n    this.errors = null;\n    return true;\n  }\n  var valid = this.validate($schema, schema);\n  if (!valid && throwOrLogError) {\n    var message = 'schema is invalid: ' + this.errorsText();\n    if (this._opts.validateSchema == 'log') this.logger.error(message);else throw new Error(message);\n  }\n  return valid;\n}\nfunction defaultMeta(self) {\n  var meta = self._opts.meta;\n  self._opts.defaultMeta = typeof meta == 'object' ? self._getId(meta) || meta : self.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined;\n  return self._opts.defaultMeta;\n}\n\n/**\n * Get compiled schema from the instance by `key` or `ref`.\n * @this   Ajv\n * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).\n * @return {Function} schema validating function (with property `schema`).\n */\nfunction getSchema(keyRef) {\n  var schemaObj = _getSchemaObj(this, keyRef);\n  switch (typeof schemaObj) {\n    case 'object':\n      return schemaObj.validate || this._compile(schemaObj);\n    case 'string':\n      return this.getSchema(schemaObj);\n    case 'undefined':\n      return _getSchemaFragment(this, keyRef);\n  }\n}\nfunction _getSchemaFragment(self, ref) {\n  var res = resolve.schema.call(self, {\n    schema: {}\n  }, ref);\n  if (res) {\n    var schema = res.schema,\n      root = res.root,\n      baseId = res.baseId;\n    var v = compileSchema.call(self, schema, root, undefined, baseId);\n    self._fragments[ref] = new SchemaObject({\n      ref: ref,\n      fragment: true,\n      schema: schema,\n      root: root,\n      baseId: baseId,\n      validate: v\n    });\n    return v;\n  }\n}\nfunction _getSchemaObj(self, keyRef) {\n  keyRef = resolve.normalizeId(keyRef);\n  return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];\n}\n\n/**\n * Remove cached schema(s).\n * If no parameter is passed all schemas but meta-schemas are removed.\n * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n * @this   Ajv\n * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object\n * @return {Ajv} this for method chaining\n */\nfunction removeSchema(schemaKeyRef) {\n  if (schemaKeyRef instanceof RegExp) {\n    _removeAllSchemas(this, this._schemas, schemaKeyRef);\n    _removeAllSchemas(this, this._refs, schemaKeyRef);\n    return this;\n  }\n  switch (typeof schemaKeyRef) {\n    case 'undefined':\n      _removeAllSchemas(this, this._schemas);\n      _removeAllSchemas(this, this._refs);\n      this._cache.clear();\n      return this;\n    case 'string':\n      var schemaObj = _getSchemaObj(this, schemaKeyRef);\n      if (schemaObj) this._cache.del(schemaObj.cacheKey);\n      delete this._schemas[schemaKeyRef];\n      delete this._refs[schemaKeyRef];\n      return this;\n    case 'object':\n      var serialize = this._opts.serialize;\n      var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;\n      this._cache.del(cacheKey);\n      var id = this._getId(schemaKeyRef);\n      if (id) {\n        id = resolve.normalizeId(id);\n        delete this._schemas[id];\n        delete this._refs[id];\n      }\n  }\n  return this;\n}\nfunction _removeAllSchemas(self, schemas, regex) {\n  for (var keyRef in schemas) {\n    var schemaObj = schemas[keyRef];\n    if (!schemaObj.meta && (!regex || regex.test(keyRef))) {\n      self._cache.del(schemaObj.cacheKey);\n      delete schemas[keyRef];\n    }\n  }\n}\n\n/* @this   Ajv */\nfunction _addSchema(schema, skipValidation, meta, shouldAddSchema) {\n  if (typeof schema != 'object' && typeof schema != 'boolean') throw new Error('schema should be object or boolean');\n  var serialize = this._opts.serialize;\n  var cacheKey = serialize ? serialize(schema) : schema;\n  var cached = this._cache.get(cacheKey);\n  if (cached) return cached;\n  shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;\n  var id = resolve.normalizeId(this._getId(schema));\n  if (id && shouldAddSchema) checkUnique(this, id);\n  var willValidate = this._opts.validateSchema !== false && !skipValidation;\n  var recursiveMeta;\n  if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema))) this.validateSchema(schema, true);\n  var localRefs = resolve.ids.call(this, schema);\n  var schemaObj = new SchemaObject({\n    id: id,\n    schema: schema,\n    localRefs: localRefs,\n    cacheKey: cacheKey,\n    meta: meta\n  });\n  if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;\n  this._cache.put(cacheKey, schemaObj);\n  if (willValidate && recursiveMeta) this.validateSchema(schema, true);\n  return schemaObj;\n}\n\n/* @this   Ajv */\nfunction _compile(schemaObj, root) {\n  if (schemaObj.compiling) {\n    schemaObj.validate = callValidate;\n    callValidate.schema = schemaObj.schema;\n    callValidate.errors = null;\n    callValidate.root = root ? root : callValidate;\n    if (schemaObj.schema.$async === true) callValidate.$async = true;\n    return callValidate;\n  }\n  schemaObj.compiling = true;\n  var currentOpts;\n  if (schemaObj.meta) {\n    currentOpts = this._opts;\n    this._opts = this._metaOpts;\n  }\n  var v;\n  try {\n    v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs);\n  } catch (e) {\n    delete schemaObj.validate;\n    throw e;\n  } finally {\n    schemaObj.compiling = false;\n    if (schemaObj.meta) this._opts = currentOpts;\n  }\n  schemaObj.validate = v;\n  schemaObj.refs = v.refs;\n  schemaObj.refVal = v.refVal;\n  schemaObj.root = v.root;\n  return v;\n\n  /* @this   {*} - custom context, see passContext option */\n  function callValidate() {\n    /* jshint validthis: true */\n    var _validate = schemaObj.validate;\n    var result = _validate.apply(this, arguments);\n    callValidate.errors = _validate.errors;\n    return result;\n  }\n}\nfunction chooseGetId(opts) {\n  switch (opts.schemaId) {\n    case 'auto':\n      return _get$IdOrId;\n    case 'id':\n      return _getId;\n    default:\n      return _get$Id;\n  }\n}\n\n/* @this   Ajv */\nfunction _getId(schema) {\n  if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);\n  return schema.id;\n}\n\n/* @this   Ajv */\nfunction _get$Id(schema) {\n  if (schema.id) this.logger.warn('schema id ignored', schema.id);\n  return schema.$id;\n}\nfunction _get$IdOrId(schema) {\n  if (schema.$id && schema.id && schema.$id != schema.id) throw new Error('schema $id is different from id');\n  return schema.$id || schema.id;\n}\n\n/**\n * Convert array of error message objects to string\n * @this   Ajv\n * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.\n * @param  {Object} options optional options with properties `separator` and `dataVar`.\n * @return {String} human readable string with all errors descriptions\n */\nfunction errorsText(errors, options) {\n  errors = errors || this.errors;\n  if (!errors) return 'No errors';\n  options = options || {};\n  var separator = options.separator === undefined ? ', ' : options.separator;\n  var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;\n  var text = '';\n  for (var i = 0; i < errors.length; i++) {\n    var e = errors[i];\n    if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;\n  }\n  return text.slice(0, -separator.length);\n}\n\n/**\n * Add custom format\n * @this   Ajv\n * @param {String} name format name\n * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)\n * @return {Ajv} this for method chaining\n */\nfunction addFormat(name, format) {\n  if (typeof format == 'string') format = new RegExp(format);\n  this._formats[name] = format;\n  return this;\n}\nfunction addDefaultMetaSchema(self) {\n  var $dataSchema;\n  if (self._opts.$data) {\n    $dataSchema = require('./refs/data.json');\n    self.addMetaSchema($dataSchema, $dataSchema.$id, true);\n  }\n  if (self._opts.meta === false) return;\n  var metaSchema = require('./refs/json-schema-draft-07.json');\n  if (self._opts.$data) metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);\n  self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);\n  self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;\n}\nfunction addInitialSchemas(self) {\n  var optsSchemas = self._opts.schemas;\n  if (!optsSchemas) return;\n  if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);\n}\nfunction addInitialFormats(self) {\n  for (var name in self._opts.formats) {\n    var format = self._opts.formats[name];\n    self.addFormat(name, format);\n  }\n}\nfunction checkUnique(self, id) {\n  if (self._schemas[id] || self._refs[id]) throw new Error('schema with key or id \"' + id + '\" already exists');\n}\nfunction getMetaSchemaOptions(self) {\n  var metaOpts = util.copy(self._opts);\n  for (var i = 0; i < META_IGNORE_OPTIONS.length; i++) delete metaOpts[META_IGNORE_OPTIONS[i]];\n  return metaOpts;\n}\nfunction setLogger(self) {\n  var logger = self._opts.logger;\n  if (logger === false) {\n    self.logger = {\n      log: noop,\n      warn: noop,\n      error: noop\n    };\n  } else {\n    if (logger === undefined) logger = console;\n    if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error)) throw new Error('logger must implement log, warn and error methods');\n    self.logger = logger;\n  }\n}\nfunction noop() {}","map":{"version":3,"names":["compileSchema","require","resolve","Cache","SchemaObject","stableStringify","formats","rules","$dataMetaSchema","util","module","exports","Ajv","prototype","validate","compile","addSchema","addMetaSchema","validateSchema","getSchema","removeSchema","addFormat","errorsText","_addSchema","_compile","compileAsync","customKeyword","addKeyword","add","getKeyword","get","removeKeyword","remove","validateKeyword","errorClasses","ValidationError","Validation","MissingRefError","MissingRef","META_SCHEMA_ID","META_IGNORE_OPTIONS","META_SUPPORT_DATA","opts","_opts","copy","setLogger","_schemas","_refs","_fragments","_formats","format","_cache","cache","_loadingSchemas","_compilations","RULES","_getId","chooseGetId","loopRequired","Infinity","errorDataPath","_errorDataPathProperty","serialize","undefined","_metaOpts","getMetaSchemaOptions","addInitialFormats","addDefaultMetaSchema","meta","nullable","metaSchema","type","addInitialSchemas","schemaKeyRef","data","v","Error","schemaObj","valid","$async","errors","schema","_meta","key","_skipValidation","Array","isArray","i","length","id","normalizeId","checkUnique","skipValidation","throwOrLogError","$schema","defaultMeta","logger","warn","message","error","self","keyRef","_getSchemaObj","_getSchemaFragment","ref","res","call","root","baseId","fragment","RegExp","_removeAllSchemas","clear","del","cacheKey","schemas","regex","test","shouldAddSchema","cached","addUsedSchema","willValidate","recursiveMeta","localRefs","ids","put","compiling","callValidate","currentOpts","e","refs","refVal","_validate","result","apply","arguments","schemaId","_get$IdOrId","_get$Id","$id","options","separator","dataVar","text","dataPath","slice","name","$dataSchema","$data","optsSchemas","metaOpts","log","noop","console"],"sources":["/Users/anandarunima/Documents/Arunima/Coursework/sauce_labs-fizzbuzzbash/fizzbuzzbass/components/node_modules/ajv/lib/ajv.js"],"sourcesContent":["'use strict';\n\nvar compileSchema = require('./compile')\n  , resolve = require('./compile/resolve')\n  , Cache = require('./cache')\n  , SchemaObject = require('./compile/schema_obj')\n  , stableStringify = require('fast-json-stable-stringify')\n  , formats = require('./compile/formats')\n  , rules = require('./compile/rules')\n  , $dataMetaSchema = require('./data')\n  , util = require('./compile/util');\n\nmodule.exports = Ajv;\n\nAjv.prototype.validate = validate;\nAjv.prototype.compile = compile;\nAjv.prototype.addSchema = addSchema;\nAjv.prototype.addMetaSchema = addMetaSchema;\nAjv.prototype.validateSchema = validateSchema;\nAjv.prototype.getSchema = getSchema;\nAjv.prototype.removeSchema = removeSchema;\nAjv.prototype.addFormat = addFormat;\nAjv.prototype.errorsText = errorsText;\n\nAjv.prototype._addSchema = _addSchema;\nAjv.prototype._compile = _compile;\n\nAjv.prototype.compileAsync = require('./compile/async');\nvar customKeyword = require('./keyword');\nAjv.prototype.addKeyword = customKeyword.add;\nAjv.prototype.getKeyword = customKeyword.get;\nAjv.prototype.removeKeyword = customKeyword.remove;\nAjv.prototype.validateKeyword = customKeyword.validate;\n\nvar errorClasses = require('./compile/error_classes');\nAjv.ValidationError = errorClasses.Validation;\nAjv.MissingRefError = errorClasses.MissingRef;\nAjv.$dataMetaSchema = $dataMetaSchema;\n\nvar META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';\n\nvar META_IGNORE_OPTIONS = [ 'removeAdditional', 'useDefaults', 'coerceTypes', 'strictDefaults' ];\nvar META_SUPPORT_DATA = ['/properties'];\n\n/**\n * Creates validator instance.\n * Usage: `Ajv(opts)`\n * @param {Object} opts optional options\n * @return {Object} ajv instance\n */\nfunction Ajv(opts) {\n  if (!(this instanceof Ajv)) return new Ajv(opts);\n  opts = this._opts = util.copy(opts) || {};\n  setLogger(this);\n  this._schemas = {};\n  this._refs = {};\n  this._fragments = {};\n  this._formats = formats(opts.format);\n\n  this._cache = opts.cache || new Cache;\n  this._loadingSchemas = {};\n  this._compilations = [];\n  this.RULES = rules();\n  this._getId = chooseGetId(opts);\n\n  opts.loopRequired = opts.loopRequired || Infinity;\n  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;\n  if (opts.serialize === undefined) opts.serialize = stableStringify;\n  this._metaOpts = getMetaSchemaOptions(this);\n\n  if (opts.formats) addInitialFormats(this);\n  addDefaultMetaSchema(this);\n  if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);\n  if (opts.nullable) this.addKeyword('nullable', {metaSchema: {type: 'boolean'}});\n  addInitialSchemas(this);\n}\n\n\n\n/**\n * Validate data using schema\n * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.\n * @this   Ajv\n * @param  {String|Object} schemaKeyRef key, ref or schema object\n * @param  {Any} data to be validated\n * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).\n */\nfunction validate(schemaKeyRef, data) {\n  var v;\n  if (typeof schemaKeyRef == 'string') {\n    v = this.getSchema(schemaKeyRef);\n    if (!v) throw new Error('no schema with key or ref \"' + schemaKeyRef + '\"');\n  } else {\n    var schemaObj = this._addSchema(schemaKeyRef);\n    v = schemaObj.validate || this._compile(schemaObj);\n  }\n\n  var valid = v(data);\n  if (v.$async !== true) this.errors = v.errors;\n  return valid;\n}\n\n\n/**\n * Create validating function for passed schema.\n * @this   Ajv\n * @param  {Object} schema schema object\n * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.\n * @return {Function} validating function\n */\nfunction compile(schema, _meta) {\n  var schemaObj = this._addSchema(schema, undefined, _meta);\n  return schemaObj.validate || this._compile(schemaObj);\n}\n\n\n/**\n * Adds schema to the instance.\n * @this   Ajv\n * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.\n * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\n * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.\n * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.\n * @return {Ajv} this for method chaining\n */\nfunction addSchema(schema, key, _skipValidation, _meta) {\n  if (Array.isArray(schema)){\n    for (var i=0; i<schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);\n    return this;\n  }\n  var id = this._getId(schema);\n  if (id !== undefined && typeof id != 'string')\n    throw new Error('schema id must be string');\n  key = resolve.normalizeId(key || id);\n  checkUnique(this, key);\n  this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);\n  return this;\n}\n\n\n/**\n * Add schema that will be used to validate other schemas\n * options in META_IGNORE_OPTIONS are alway set to false\n * @this   Ajv\n * @param {Object} schema schema object\n * @param {String} key optional schema key\n * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema\n * @return {Ajv} this for method chaining\n */\nfunction addMetaSchema(schema, key, skipValidation) {\n  this.addSchema(schema, key, skipValidation, true);\n  return this;\n}\n\n\n/**\n * Validate schema\n * @this   Ajv\n * @param {Object} schema schema to validate\n * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid\n * @return {Boolean} true if schema is valid\n */\nfunction validateSchema(schema, throwOrLogError) {\n  var $schema = schema.$schema;\n  if ($schema !== undefined && typeof $schema != 'string')\n    throw new Error('$schema must be a string');\n  $schema = $schema || this._opts.defaultMeta || defaultMeta(this);\n  if (!$schema) {\n    this.logger.warn('meta-schema not available');\n    this.errors = null;\n    return true;\n  }\n  var valid = this.validate($schema, schema);\n  if (!valid && throwOrLogError) {\n    var message = 'schema is invalid: ' + this.errorsText();\n    if (this._opts.validateSchema == 'log') this.logger.error(message);\n    else throw new Error(message);\n  }\n  return valid;\n}\n\n\nfunction defaultMeta(self) {\n  var meta = self._opts.meta;\n  self._opts.defaultMeta = typeof meta == 'object'\n                            ? self._getId(meta) || meta\n                            : self.getSchema(META_SCHEMA_ID)\n                              ? META_SCHEMA_ID\n                              : undefined;\n  return self._opts.defaultMeta;\n}\n\n\n/**\n * Get compiled schema from the instance by `key` or `ref`.\n * @this   Ajv\n * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).\n * @return {Function} schema validating function (with property `schema`).\n */\nfunction getSchema(keyRef) {\n  var schemaObj = _getSchemaObj(this, keyRef);\n  switch (typeof schemaObj) {\n    case 'object': return schemaObj.validate || this._compile(schemaObj);\n    case 'string': return this.getSchema(schemaObj);\n    case 'undefined': return _getSchemaFragment(this, keyRef);\n  }\n}\n\n\nfunction _getSchemaFragment(self, ref) {\n  var res = resolve.schema.call(self, { schema: {} }, ref);\n  if (res) {\n    var schema = res.schema\n      , root = res.root\n      , baseId = res.baseId;\n    var v = compileSchema.call(self, schema, root, undefined, baseId);\n    self._fragments[ref] = new SchemaObject({\n      ref: ref,\n      fragment: true,\n      schema: schema,\n      root: root,\n      baseId: baseId,\n      validate: v\n    });\n    return v;\n  }\n}\n\n\nfunction _getSchemaObj(self, keyRef) {\n  keyRef = resolve.normalizeId(keyRef);\n  return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];\n}\n\n\n/**\n * Remove cached schema(s).\n * If no parameter is passed all schemas but meta-schemas are removed.\n * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n * @this   Ajv\n * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object\n * @return {Ajv} this for method chaining\n */\nfunction removeSchema(schemaKeyRef) {\n  if (schemaKeyRef instanceof RegExp) {\n    _removeAllSchemas(this, this._schemas, schemaKeyRef);\n    _removeAllSchemas(this, this._refs, schemaKeyRef);\n    return this;\n  }\n  switch (typeof schemaKeyRef) {\n    case 'undefined':\n      _removeAllSchemas(this, this._schemas);\n      _removeAllSchemas(this, this._refs);\n      this._cache.clear();\n      return this;\n    case 'string':\n      var schemaObj = _getSchemaObj(this, schemaKeyRef);\n      if (schemaObj) this._cache.del(schemaObj.cacheKey);\n      delete this._schemas[schemaKeyRef];\n      delete this._refs[schemaKeyRef];\n      return this;\n    case 'object':\n      var serialize = this._opts.serialize;\n      var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;\n      this._cache.del(cacheKey);\n      var id = this._getId(schemaKeyRef);\n      if (id) {\n        id = resolve.normalizeId(id);\n        delete this._schemas[id];\n        delete this._refs[id];\n      }\n  }\n  return this;\n}\n\n\nfunction _removeAllSchemas(self, schemas, regex) {\n  for (var keyRef in schemas) {\n    var schemaObj = schemas[keyRef];\n    if (!schemaObj.meta && (!regex || regex.test(keyRef))) {\n      self._cache.del(schemaObj.cacheKey);\n      delete schemas[keyRef];\n    }\n  }\n}\n\n\n/* @this   Ajv */\nfunction _addSchema(schema, skipValidation, meta, shouldAddSchema) {\n  if (typeof schema != 'object' && typeof schema != 'boolean')\n    throw new Error('schema should be object or boolean');\n  var serialize = this._opts.serialize;\n  var cacheKey = serialize ? serialize(schema) : schema;\n  var cached = this._cache.get(cacheKey);\n  if (cached) return cached;\n\n  shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;\n\n  var id = resolve.normalizeId(this._getId(schema));\n  if (id && shouldAddSchema) checkUnique(this, id);\n\n  var willValidate = this._opts.validateSchema !== false && !skipValidation;\n  var recursiveMeta;\n  if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema)))\n    this.validateSchema(schema, true);\n\n  var localRefs = resolve.ids.call(this, schema);\n\n  var schemaObj = new SchemaObject({\n    id: id,\n    schema: schema,\n    localRefs: localRefs,\n    cacheKey: cacheKey,\n    meta: meta\n  });\n\n  if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;\n  this._cache.put(cacheKey, schemaObj);\n\n  if (willValidate && recursiveMeta) this.validateSchema(schema, true);\n\n  return schemaObj;\n}\n\n\n/* @this   Ajv */\nfunction _compile(schemaObj, root) {\n  if (schemaObj.compiling) {\n    schemaObj.validate = callValidate;\n    callValidate.schema = schemaObj.schema;\n    callValidate.errors = null;\n    callValidate.root = root ? root : callValidate;\n    if (schemaObj.schema.$async === true)\n      callValidate.$async = true;\n    return callValidate;\n  }\n  schemaObj.compiling = true;\n\n  var currentOpts;\n  if (schemaObj.meta) {\n    currentOpts = this._opts;\n    this._opts = this._metaOpts;\n  }\n\n  var v;\n  try { v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs); }\n  catch(e) {\n    delete schemaObj.validate;\n    throw e;\n  }\n  finally {\n    schemaObj.compiling = false;\n    if (schemaObj.meta) this._opts = currentOpts;\n  }\n\n  schemaObj.validate = v;\n  schemaObj.refs = v.refs;\n  schemaObj.refVal = v.refVal;\n  schemaObj.root = v.root;\n  return v;\n\n\n  /* @this   {*} - custom context, see passContext option */\n  function callValidate() {\n    /* jshint validthis: true */\n    var _validate = schemaObj.validate;\n    var result = _validate.apply(this, arguments);\n    callValidate.errors = _validate.errors;\n    return result;\n  }\n}\n\n\nfunction chooseGetId(opts) {\n  switch (opts.schemaId) {\n    case 'auto': return _get$IdOrId;\n    case 'id': return _getId;\n    default: return _get$Id;\n  }\n}\n\n/* @this   Ajv */\nfunction _getId(schema) {\n  if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);\n  return schema.id;\n}\n\n/* @this   Ajv */\nfunction _get$Id(schema) {\n  if (schema.id) this.logger.warn('schema id ignored', schema.id);\n  return schema.$id;\n}\n\n\nfunction _get$IdOrId(schema) {\n  if (schema.$id && schema.id && schema.$id != schema.id)\n    throw new Error('schema $id is different from id');\n  return schema.$id || schema.id;\n}\n\n\n/**\n * Convert array of error message objects to string\n * @this   Ajv\n * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.\n * @param  {Object} options optional options with properties `separator` and `dataVar`.\n * @return {String} human readable string with all errors descriptions\n */\nfunction errorsText(errors, options) {\n  errors = errors || this.errors;\n  if (!errors) return 'No errors';\n  options = options || {};\n  var separator = options.separator === undefined ? ', ' : options.separator;\n  var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;\n\n  var text = '';\n  for (var i=0; i<errors.length; i++) {\n    var e = errors[i];\n    if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;\n  }\n  return text.slice(0, -separator.length);\n}\n\n\n/**\n * Add custom format\n * @this   Ajv\n * @param {String} name format name\n * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)\n * @return {Ajv} this for method chaining\n */\nfunction addFormat(name, format) {\n  if (typeof format == 'string') format = new RegExp(format);\n  this._formats[name] = format;\n  return this;\n}\n\n\nfunction addDefaultMetaSchema(self) {\n  var $dataSchema;\n  if (self._opts.$data) {\n    $dataSchema = require('./refs/data.json');\n    self.addMetaSchema($dataSchema, $dataSchema.$id, true);\n  }\n  if (self._opts.meta === false) return;\n  var metaSchema = require('./refs/json-schema-draft-07.json');\n  if (self._opts.$data) metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);\n  self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);\n  self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;\n}\n\n\nfunction addInitialSchemas(self) {\n  var optsSchemas = self._opts.schemas;\n  if (!optsSchemas) return;\n  if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);\n  else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);\n}\n\n\nfunction addInitialFormats(self) {\n  for (var name in self._opts.formats) {\n    var format = self._opts.formats[name];\n    self.addFormat(name, format);\n  }\n}\n\n\nfunction checkUnique(self, id) {\n  if (self._schemas[id] || self._refs[id])\n    throw new Error('schema with key or id \"' + id + '\" already exists');\n}\n\n\nfunction getMetaSchemaOptions(self) {\n  var metaOpts = util.copy(self._opts);\n  for (var i=0; i<META_IGNORE_OPTIONS.length; i++)\n    delete metaOpts[META_IGNORE_OPTIONS[i]];\n  return metaOpts;\n}\n\n\nfunction setLogger(self) {\n  var logger = self._opts.logger;\n  if (logger === false) {\n    self.logger = {log: noop, warn: noop, error: noop};\n  } else {\n    if (logger === undefined) logger = console;\n    if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error))\n      throw new Error('logger must implement log, warn and error methods');\n    self.logger = logger;\n  }\n}\n\n\nfunction noop() {}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}