{"ast":null,"code":"var BigInteger = require('../libs/jsbn.js');\nvar schemes = require('../schemes/schemes.js');\nmodule.exports = function (keyPair, options) {\n  var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);\n  return {\n    encrypt: function (buffer, usePrivate) {\n      var m, c;\n      if (usePrivate) {\n        /* Type 1: zeros padding for private key encrypt */\n        m = new BigInteger(pkcs1Scheme.encPad(buffer, {\n          type: 1\n        }));\n        c = keyPair.$doPrivate(m);\n      } else {\n        m = new BigInteger(keyPair.encryptionScheme.encPad(buffer));\n        c = keyPair.$doPublic(m);\n      }\n      return c.toBuffer(keyPair.encryptedDataLength);\n    },\n    decrypt: function (buffer, usePublic) {\n      var m,\n        c = new BigInteger(buffer);\n      if (usePublic) {\n        m = keyPair.$doPublic(c);\n        /* Type 1: zeros padding for private key decrypt */\n        return pkcs1Scheme.encUnPad(m.toBuffer(keyPair.encryptedDataLength), {\n          type: 1\n        });\n      } else {\n        m = keyPair.$doPrivate(c);\n        return keyPair.encryptionScheme.encUnPad(m.toBuffer(keyPair.encryptedDataLength));\n      }\n    }\n  };\n};","map":{"version":3,"names":["BigInteger","require","schemes","module","exports","keyPair","options","pkcs1Scheme","pkcs1","makeScheme","encrypt","buffer","usePrivate","m","c","encPad","type","$doPrivate","encryptionScheme","$doPublic","toBuffer","encryptedDataLength","decrypt","usePublic","encUnPad"],"sources":["/Users/anandarunima/Documents/Arunima/Coursework/sauce_labs-fizzbuzzbash/fizzbuzzbass/components/node_modules/node-rsa/src/encryptEngines/js.js"],"sourcesContent":["var BigInteger = require('../libs/jsbn.js');\nvar schemes = require('../schemes/schemes.js');\n\nmodule.exports = function (keyPair, options) {\n    var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);\n\n    return {\n        encrypt: function (buffer, usePrivate) {\n            var m, c;\n            if (usePrivate) {\n                /* Type 1: zeros padding for private key encrypt */\n                m = new BigInteger(pkcs1Scheme.encPad(buffer, {type: 1}));\n                c = keyPair.$doPrivate(m);\n            } else {\n                m = new BigInteger(keyPair.encryptionScheme.encPad(buffer));\n                c = keyPair.$doPublic(m);\n            }\n            return c.toBuffer(keyPair.encryptedDataLength);\n        },\n\n        decrypt: function (buffer, usePublic) {\n            var m, c = new BigInteger(buffer);\n\n            if (usePublic) {\n                m = keyPair.$doPublic(c);\n                /* Type 1: zeros padding for private key decrypt */\n                return pkcs1Scheme.encUnPad(m.toBuffer(keyPair.encryptedDataLength), {type: 1});\n            } else {\n                m = keyPair.$doPrivate(c);\n                return keyPair.encryptionScheme.encUnPad(m.toBuffer(keyPair.encryptedDataLength));\n            }\n        }\n    };\n};"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC3C,IAAIC,OAAO,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAE9CE,MAAM,CAACC,OAAO,GAAG,UAAUC,OAAO,EAAEC,OAAO,EAAE;EACzC,IAAIC,WAAW,GAAGL,OAAO,CAACM,KAAK,CAACC,UAAU,CAACJ,OAAO,EAAEC,OAAO,CAAC;EAE5D,OAAO;IACHI,OAAO,EAAE,SAAAA,CAAUC,MAAM,EAAEC,UAAU,EAAE;MACnC,IAAIC,CAAC,EAAEC,CAAC;MACR,IAAIF,UAAU,EAAE;QACZ;QACAC,CAAC,GAAG,IAAIb,UAAU,CAACO,WAAW,CAACQ,MAAM,CAACJ,MAAM,EAAE;UAACK,IAAI,EAAE;QAAC,CAAC,CAAC,CAAC;QACzDF,CAAC,GAAGT,OAAO,CAACY,UAAU,CAACJ,CAAC,CAAC;MAC7B,CAAC,MAAM;QACHA,CAAC,GAAG,IAAIb,UAAU,CAACK,OAAO,CAACa,gBAAgB,CAACH,MAAM,CAACJ,MAAM,CAAC,CAAC;QAC3DG,CAAC,GAAGT,OAAO,CAACc,SAAS,CAACN,CAAC,CAAC;MAC5B;MACA,OAAOC,CAAC,CAACM,QAAQ,CAACf,OAAO,CAACgB,mBAAmB,CAAC;IAClD,CAAC;IAEDC,OAAO,EAAE,SAAAA,CAAUX,MAAM,EAAEY,SAAS,EAAE;MAClC,IAAIV,CAAC;QAAEC,CAAC,GAAG,IAAId,UAAU,CAACW,MAAM,CAAC;MAEjC,IAAIY,SAAS,EAAE;QACXV,CAAC,GAAGR,OAAO,CAACc,SAAS,CAACL,CAAC,CAAC;QACxB;QACA,OAAOP,WAAW,CAACiB,QAAQ,CAACX,CAAC,CAACO,QAAQ,CAACf,OAAO,CAACgB,mBAAmB,CAAC,EAAE;UAACL,IAAI,EAAE;QAAC,CAAC,CAAC;MACnF,CAAC,MAAM;QACHH,CAAC,GAAGR,OAAO,CAACY,UAAU,CAACH,CAAC,CAAC;QACzB,OAAOT,OAAO,CAACa,gBAAgB,CAACM,QAAQ,CAACX,CAAC,CAACO,QAAQ,CAACf,OAAO,CAACgB,mBAAmB,CAAC,CAAC;MACrF;IACJ;EACJ,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}