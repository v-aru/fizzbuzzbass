{"ast":null,"code":"'use strict';\n\nvar Timer = require('timer2');\nvar Client = require('./Client');\nvar setupRoute = function setupRoute(_ref) {\n  var heartbeatInterval = _ref.heartbeatInterval;\n  var heartbeatTimer = new Timer(heartbeatInterval * 1000);\n  var route = function route(callback) {\n    return function (req, res) {\n      if (req.method !== 'POST' && req.method !== 'OPTIONS') {\n        res.writeHead(405, {\n          allow: 'POST, OPTIONS'\n        });\n        return res.end();\n      }\n      var client = new Client(req, res);\n      var sendHeartbeat = function sendHeartbeat() {\n        client.send({\n          name: 'heartbeat'\n        });\n      };\n      req.setTimeout(0);\n      res.setTimeout(0);\n      heartbeatTimer.on('tick', sendHeartbeat);\n      res.socket.once('close', function () {\n        heartbeatTimer.removeListener('tick', sendHeartbeat);\n        client.emit('disconnect');\n        client.removeAllListeners();\n      });\n      var headers = {\n        'content-type': 'application/json'\n      };\n\n      // The transfer-encoding: chunked header is forbidden in HTTP/2.\n      if (!req.isSpdy) {\n        headers['transfer-encoding'] = 'chunked';\n      }\n      res.writeHead(200, headers);\n\n      // Send an initial heartbeat to initialize the connection. If we do not\n      // do this, sometimes the connection does not become open until the first\n      // data is sent.\n      sendHeartbeat();\n\n      /* eslint-disable callback-return */\n      callback(client);\n      /* eslint-enable callback-return */\n      client.emit('connect');\n    };\n  };\n  return route;\n};\nmodule.exports = setupRoute;","map":{"version":3,"names":["Timer","require","Client","setupRoute","_ref","heartbeatInterval","heartbeatTimer","route","callback","req","res","method","writeHead","allow","end","client","sendHeartbeat","send","name","setTimeout","on","socket","once","removeListener","emit","removeAllListeners","headers","isSpdy","module","exports"],"sources":["/Users/anandarunima/Documents/Arunima/Coursework/sauce_labs-fizzbuzzbash/fizzbuzzbass/components/node_modules/json-lines/dist/route/index.js"],"sourcesContent":["'use strict';\n\nvar Timer = require('timer2');\n\nvar Client = require('./Client');\n\nvar setupRoute = function setupRoute(_ref) {\n  var heartbeatInterval = _ref.heartbeatInterval;\n\n  var heartbeatTimer = new Timer(heartbeatInterval * 1000);\n\n  var route = function route(callback) {\n    return function (req, res) {\n      if (req.method !== 'POST' && req.method !== 'OPTIONS') {\n        res.writeHead(405, {\n          allow: 'POST, OPTIONS'\n        });\n\n        return res.end();\n      }\n\n      var client = new Client(req, res);\n\n      var sendHeartbeat = function sendHeartbeat() {\n        client.send({ name: 'heartbeat' });\n      };\n\n      req.setTimeout(0);\n      res.setTimeout(0);\n\n      heartbeatTimer.on('tick', sendHeartbeat);\n      res.socket.once('close', function () {\n        heartbeatTimer.removeListener('tick', sendHeartbeat);\n        client.emit('disconnect');\n        client.removeAllListeners();\n      });\n\n      var headers = {\n        'content-type': 'application/json'\n      };\n\n      // The transfer-encoding: chunked header is forbidden in HTTP/2.\n      if (!req.isSpdy) {\n        headers['transfer-encoding'] = 'chunked';\n      }\n\n      res.writeHead(200, headers);\n\n      // Send an initial heartbeat to initialize the connection. If we do not\n      // do this, sometimes the connection does not become open until the first\n      // data is sent.\n      sendHeartbeat();\n\n      /* eslint-disable callback-return */\n      callback(client);\n      /* eslint-enable callback-return */\n      client.emit('connect');\n    };\n  };\n\n  return route;\n};\n\nmodule.exports = setupRoute;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,KAAK,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE7B,IAAIC,MAAM,GAAGD,OAAO,CAAC,UAAU,CAAC;AAEhC,IAAIE,UAAU,GAAG,SAASA,UAAUA,CAACC,IAAI,EAAE;EACzC,IAAIC,iBAAiB,GAAGD,IAAI,CAACC,iBAAiB;EAE9C,IAAIC,cAAc,GAAG,IAAIN,KAAK,CAACK,iBAAiB,GAAG,IAAI,CAAC;EAExD,IAAIE,KAAK,GAAG,SAASA,KAAKA,CAACC,QAAQ,EAAE;IACnC,OAAO,UAAUC,GAAG,EAAEC,GAAG,EAAE;MACzB,IAAID,GAAG,CAACE,MAAM,KAAK,MAAM,IAAIF,GAAG,CAACE,MAAM,KAAK,SAAS,EAAE;QACrDD,GAAG,CAACE,SAAS,CAAC,GAAG,EAAE;UACjBC,KAAK,EAAE;QACT,CAAC,CAAC;QAEF,OAAOH,GAAG,CAACI,GAAG,CAAC,CAAC;MAClB;MAEA,IAAIC,MAAM,GAAG,IAAIb,MAAM,CAACO,GAAG,EAAEC,GAAG,CAAC;MAEjC,IAAIM,aAAa,GAAG,SAASA,aAAaA,CAAA,EAAG;QAC3CD,MAAM,CAACE,IAAI,CAAC;UAAEC,IAAI,EAAE;QAAY,CAAC,CAAC;MACpC,CAAC;MAEDT,GAAG,CAACU,UAAU,CAAC,CAAC,CAAC;MACjBT,GAAG,CAACS,UAAU,CAAC,CAAC,CAAC;MAEjBb,cAAc,CAACc,EAAE,CAAC,MAAM,EAAEJ,aAAa,CAAC;MACxCN,GAAG,CAACW,MAAM,CAACC,IAAI,CAAC,OAAO,EAAE,YAAY;QACnChB,cAAc,CAACiB,cAAc,CAAC,MAAM,EAAEP,aAAa,CAAC;QACpDD,MAAM,CAACS,IAAI,CAAC,YAAY,CAAC;QACzBT,MAAM,CAACU,kBAAkB,CAAC,CAAC;MAC7B,CAAC,CAAC;MAEF,IAAIC,OAAO,GAAG;QACZ,cAAc,EAAE;MAClB,CAAC;;MAED;MACA,IAAI,CAACjB,GAAG,CAACkB,MAAM,EAAE;QACfD,OAAO,CAAC,mBAAmB,CAAC,GAAG,SAAS;MAC1C;MAEAhB,GAAG,CAACE,SAAS,CAAC,GAAG,EAAEc,OAAO,CAAC;;MAE3B;MACA;MACA;MACAV,aAAa,CAAC,CAAC;;MAEf;MACAR,QAAQ,CAACO,MAAM,CAAC;MAChB;MACAA,MAAM,CAACS,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;EACH,CAAC;EAED,OAAOjB,KAAK;AACd,CAAC;AAEDqB,MAAM,CAACC,OAAO,GAAG1B,UAAU","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}